Search.setIndex({"docnames": ["cbmpy", "install_doc", "manual_doc", "modules_doc"], "filenames": ["cbmpy.rst", "install_doc.rst", "manual_doc.rst", "modules_doc.rst"], "titles": ["CBMPy Reference Guide", "CBMPy: Installation Guide", "Introduction", "CBMPy Module Reference"], "terms": {"content": [0, 3], "instal": 0, "introduct": 0, "overview": 0, "ubuntu": 0, "linux": 0, "microsoft": 0, "window": 0, "14": [0, 3], "04": [0, 3], "appl": 0, "macintosh": 0, "o": [0, 3], "x": [0, 3], "pysc": [0, 2, 3], "cbm": [0, 3], "marin": [0, 2], "modul": 0, "cbcommon": 0, "combogen": [0, 3], "miriamannot": [0, 3], "structmatrix": [0, 3], "structmatrixlp": [0, 3], "checkchemformula": [0, 3], "checkid": [0, 3], "createassociationdictfromnod": [0, 3], "extractgeneidsfromstr": [0, 3], "fixid": [0, 3], "func_getassociationstrfromgprdict": [0, 3], "getgprasdictfromstr": [0, 3], "parsegeneassoci": [0, 3], "processspecieschargechemformulaannot": [0, 3], "cbconfig": 0, "current_vers": [0, 3], "current_version_tupl": [0, 3], "cbcplex": 0, "cplx_fluxvariabilityanalysi": [0, 3], "cplx_minimizenumactiveflux": [0, 3], "cplx_minimizesumofabsflux": [0, 3], "cplx_multifluxvariabilityanalysi": [0, 3], "cplx_solvemilp": [0, 3], "cplx_writefvatocsv": [0, 3], "cplx_analyzemodel": [0, 3], "cplx_constructlpfromfba": [0, 3], "cplx_fixconsens": [0, 3], "cplx_func_getcpxandpresolv": [0, 3], "cplx_func_setobjectivefunctionasconstraint": [0, 3], "cplx_getcplexmodelfromlp": [0, 3], "cplx_getdualvalu": [0, 3], "cplx_getmodelfromlp": [0, 3], "cplx_getmodelfromobj": [0, 3], "cplx_getoptimalsolut": [0, 3], "cplx_getoptimalsolution2": [0, 3], "cplx_getreducedcost": [0, 3], "cplx_getsensit": [0, 3], "cplx_getshadowpric": [0, 3], "cplx_getsolutionstatu": [0, 3], "cplx_runinputscan": [0, 3], "cplx_setfbasolutiontomodel": [0, 3], "cplx_setmipgaptoler": [0, 3], "cplx_setobject": [0, 3], "cplx_setobjective2": [0, 3], "cplx_setoutputstream": [0, 3], "cplx_setsolutionstatustomodel": [0, 3], "cplx_singlegenescan": [0, 3], "cplx_singlereactiondeletionscan": [0, 3], "cplx_writelpsolut": [0, 3], "cplx_writelptolptfil": [0, 3], "getreducedcost": [0, 3], "setreducedcost": [0, 3], "cbdatastruct": 0, "cbgui": 0, "loadcbgui": [0, 3], "cbmodel": 0, "compart": [0, 2, 3], "constraintcompon": [0, 3], "fbase": [0, 3], "fluxbound": [0, 3], "fluxboundbas": [0, 3], "fluxboundlow": [0, 3], "fluxboundupp": [0, 3], "fluxobject": [0, 3], "fluxobjectivequadrat": [0, 3], "gene": [0, 3], "geneproteinassoci": [0, 3], "group": [0, 1, 3], "groupmemberattribut": [0, 3], "model": [0, 1, 2, 3], "object": [0, 3], "paramet": [0, 3], "reaction": [0, 2, 3], "reactionnew": [0, 3], "reagent": [0, 3], "speci": [0, 3], "userdefinedconstraint": [0, 3], "cbmodeltool": 0, "cbmulticor": 0, "grouper": [0, 3], "runmulticorefva": [0, 3], "cbmultienv": 0, "cbnetdb": 0, "dbtool": [0, 3], "keggsequencetool": [0, 3], "keggtool": [0, 3], "miriamtool": [0, 3], "restclient": [0, 3], "semanticsbml": [0, 3], "cbplot": 0, "plotfluxvari": [0, 3], "cbread": 0, "loadmodel": [0, 3], "readcobrasbml": [0, 3], "readexcel97model": [0, 3], "readsbml2fba": [0, 3], "readsbml3fbc": [0, 3], "readsk_fva": [0, 3], "readsk_vertex": [0, 3], "readsk_vertexold": [0, 3], "cbreadtxt": 0, "readcsv": [0, 3], "cbsolver": 0, "cbtool": 0, "addfluxasactiveobject": [0, 3], "addgenesfromannot": [0, 3], "addsinkreact": [0, 3], "addsourcereact": [0, 3], "addstoichtofbamodel": [0, 3], "checkexchangereact": [0, 3], "checkfluxboundconsist": [0, 3], "checkreactionbalanceelement": [0, 3], "createtempfilenam": [0, 3], "createziparch": [0, 3], "deseri": [0, 3], "deserializefromdisk": [0, 3], "exportarray2csv": [0, 3], "exportarray2txt": [0, 3], "exportlabelledarrai": [0, 3], "exportlabelledarray2csv": [0, 3], "exportlabelledarray2txt": [0, 3], "exportlabelledarraywithhead": [0, 3], "exportlabelledarraywithheader2csv": [0, 3], "exportlabelledarraywithheader2txt": [0, 3], "exportlabelledlinkedlist": [0, 3], "finddeadendmetabolit": [0, 3], "finddeadendreact": [0, 3], "fixrevers": [0, 3], "getboundsdict": [0, 3], "getexchboundsdict": [0, 3], "getmodelgenesperreact": [0, 3], "loadobj": [0, 3], "merge2model": [0, 3], "mergegroup": [0, 3], "processbiggannotationnot": [0, 3], "processbiggchemformula": [0, 3], "processexchangereact": [0, 3], "processsbmlannotationnot": [0, 3], "removefixedspeciesreact": [0, 3], "roundoffwithsens": [0, 3], "scanforreactiondupl": [0, 3], "scanforunbalancedreact": [0, 3], "setspeciespropertiesfromannot": [0, 3], "splitreversiblereact": [0, 3], "splitsinglereversiblereact": [0, 3], "storeobj": [0, 3], "stringreplac": [0, 3], "cbwrite": 0, "buildhformatfluxbound": [0, 3], "buildlpconstraint": [0, 3], "buildlpconstraintsmath": [0, 3], "buildlpconstraintsrelax": [0, 3], "buildlpconstraintsstrict": [0, 3], "buildlpfluxbound": [0, 3], "buildlpuserconstraint": [0, 3], "writefvadata": [0, 3], "writefvatocsv": [0, 3], "writemodelhformatfba": [0, 3], "writemodelhformatfba2": [0, 3], "writemodellp": [0, 3], "writemodellpold": [0, 3], "writemodelraw": [0, 3], "convertexceltofloat": [0, 3], "convertfloattoexcel": [0, 3], "exportmodel": [0, 3], "generatebgid": [0, 3], "printfbasolut": [0, 3], "savemodel": [0, 3], "writecobrasbml": [0, 3], "writemindistancelpwithcost": [0, 3], "writemodelinfotofil": [0, 3], "writemodeltocombinearch": [0, 3], "writemodeltoexcel97": [0, 3], "writeoptimalsolut": [0, 3], "writeproteincosttocsv": [0, 3], "writereactioninfotofil": [0, 3], "writesbml2fba": [0, 3], "writesbml3fbc": [0, 3], "writesbml3fbcv2": [0, 3], "writesbml3fbcv3": [0, 3], "writesensitivitiestocsv": [0, 3], "writesolut": [0, 3], "writespeciesinfotofil": [0, 3], "writestoichiometricmatrix": [0, 3], "cbwx": 0, "cbxml": 0, "mlstripper": [0, 3], "sbml_n": [0, 3], "sbml_convertcobrasbmltofbc": [0, 3], "sbml_convertsbml3fbctocobra": [0, 3], "sbml_createassociationfromast": [0, 3], "sbml_createassociationfromtreev2": [0, 3], "sbml_createmodell2": [0, 3], "sbml_exportsbml2fbamodel": [0, 3], "sbml_filefindvers": [0, 3], "sbml_filevalid": [0, 3], "sbml_getcvterm": [0, 3], "sbml_getgprasdictfbcv1": [0, 3], "sbml_getgprasdictfbcv2": [0, 3], "sbml_getgeneref": [0, 3], "sbml_getnot": [0, 3], "sbml_readcobranot": [0, 3], "sbml_readcobrasbml": [0, 3], "sbml_readfbcv3keyvaluepair": [0, 3], "sbml_readkeyvaluedataannot": [0, 3], "sbml_readsbml2fba": [0, 3], "sbml_readsbml3fbc": [0, 3], "sbml_setannotationsl3fbc": [0, 3], "sbml_setcvterm": [0, 3], "sbml_setcompartmentsl3": [0, 3], "sbml_setdescript": [0, 3], "sbml_setfbcv3keyvaluepair": [0, 3], "sbml_setgroupsl3": [0, 3], "sbml_setnotes3": [0, 3], "sbml_setparametersl3fbc": [0, 3], "sbml_setreactionsl2": [0, 3], "sbml_setreactionsl3fbc": [0, 3], "sbml_setspeciesl2": [0, 3], "sbml_setspeciesl3": [0, 3], "sbml_setunit": [0, 3], "sbml_setvalidationopt": [0, 3], "sbml_validatedocu": [0, 3], "sbml_writeannotationsascobranot": [0, 3], "sbml_writecobrasbml": [0, 3], "sbml_writekeyvaluedataannot": [0, 3], "sbml_writesbml2fba": [0, 3], "sbml_writesbml3fbc": [0, 3], "setcbsboterm": [0, 3], "with_metaclass": [0, 3], "xml_addsbml2fbafluxbound": [0, 3], "xml_addsbml2fbaobject": [0, 3], "xml_createlistoffluxobject": [0, 3], "xml_createsbml2fbadoc": [0, 3], "xml_createsbml2fbaobject": [0, 3], "xml_getsbml2fbaannot": [0, 3], "xml_striptag": [0, 3], "xml_viewsbml2fbaxml": [0, 3], "multicorefva": 0, "multicoreenvfva": 0, "index": [0, 3], "search": [0, 3], "page": [0, 1], "i": [1, 2, 3], "open": [1, 3], "sourc": [1, 3], "softwar": [1, 2, 3], "releas": 1, "under": [1, 3], "gnu": [1, 3], "gpl": 1, "3": [1, 3], "licenc": 1, "includ": [1, 3], "code": [1, 3], "constant": [1, 3], "develop": [1, 2, 3], "all": [1, 3], "latest": 1, "download": 1, "document": [1, 3], "inform": [1, 2, 3], "avail": [1, 3], "depart": 1, "system": 1, "bioinformatioc": 1, "vrije": 1, "universiteit": 1, "amsterdam": [1, 3], "part": [1, 3], "bebas": 1, "metatoolkit": 1, "project": [1, 2], "brett": [1, 3], "olivi": [1, 3], "bgoli": [1, 2, 3], "should": [1, 3], "also": [1, 3], "work": [1, 3], "The": [1, 3], "follow": [1, 3], "ar": [1, 2, 3], "us": [1, 2, 3], "ani": [1, 3], "cpython": 1, "distribut": [1, 3], "addit": [1, 3], "cpickl": 1, "cstringio": 1, "cgi": 1, "copi": [1, 3], "gc": 1, "itertool": 1, "local": 1, "math": [1, 3], "multiprocess": 1, "pprint": 1, "random": 1, "re": 1, "shutil": 1, "subprocess": 1, "time": [1, 3], "urllib2": 1, "webbrows": [1, 3], "xml": [1, 3], "besid": 1, "those": [1, 3], "mention": 1, "abov": [1, 3], "packag": 1, "": [1, 2, 3], "core": [1, 3], "function": [1, 2, 3], "note": [1, 3], "possibl": [1, 3], "onli": [1, 3], "numpi": [1, 3], "veri": 1, "limit": [1, 3], "subset": [1, 3], "primarili": 1, "where": [1, 3], "name": [1, 3], "provid": [1, 3], "can": [1, 3], "center": 1, "manag": 1, "sudo": 1, "apt": 1, "get": [1, 3], "pleas": [1, 3], "see": [1, 3], "man": 1, "you": [1, 3], "don": 1, "t": [1, 3], "know": 1, "what": [1, 3], "thi": [1, 3], "A": [1, 3], "comprehens": 1, "list": [1, 3], "end": [1, 3], "In": [1, 3], "case": [1, 3], "extern": 1, "c": [1, 3], "e": [1, 3], "g": [1, 3], "mani": [1, 3], "batteri": 1, "via": [1, 2, 3], "pip": 1, "ha": [1, 2, 3], "been": [1, 2, 3], "design": [1, 2, 3], "framework": [1, 2], "differ": [1, 3], "context": 1, "here": [1, 3], "each": [1, 3], "role": [1, 3], "fastest": 1, "wai": [1, 3], "offici": 1, "version": [1, 3], "org": [1, 3], "while": [1, 2, 3], "binari": [1, 3], "util": [1, 3], "from": [1, 3], "file": [1, 3], "try": [1, 3], "one": [1, 3], "easy_instal": 1, "read": [1, 3], "write": [1, 3], "convert": [1, 3], "well": [1, 2], "view": [1, 3], "creat": [1, 3], "edit": [1, 2, 3], "compon": [1, 3], "annot": [1, 2, 3], "biopython": 1, "linear": [1, 3], "more": [1, 2, 3], "lp": [1, 2, 3], "milp": [1, 2, 3], "www": [1, 3], "com": [1, 3], "tfinlei": 1, "pyglpk": 1, "matplotlib": [1, 3], "sympi": [1, 3], "xlwt": 1, "xlrd": 1, "graphic": 1, "interfac": [1, 3], "pyqt4": 1, "wxpython": 1, "sud": [1, 3], "scipi": [1, 3], "h5py": 1, "networkx": 1, "These": [1, 3], "highli": 1, "recommend": 1, "ipython": 1, "notebook": 1, "scite": 1, "first": [1, 3], "we": 1, "scientif": 1, "workbench": 1, "dev": 1, "wxgtk2": 1, "8": [1, 3], "qt4": 1, "now": [1, 3], "easi": [1, 3], "need": [1, 2, 3], "some": [1, 3], "libxml2": 1, "zlib1g": 1, "bzip2": 1, "libbz2": 1, "Then": 1, "greatest": 1, "current": [1, 3], "still": [1, 3], "4": [1, 3], "47": 1, "0": [1, 3], "so": [1, 3], "import": [1, 3], "rather": [1, 3], "instruct": 1, "tar": 1, "gz": [1, 3], "bz2": 1, "libgmp": 1, "unpack": 1, "make": [1, 3], "directori": [1, 3], "cd": 1, "build": [1, 3], "configur": 1, "gmp": 1, "check": [1, 3], "ldconfig": 1, "chang": [1, 3], "command": [1, 3], "final": 1, "either": [1, 3], "Or": 1, "manual": [1, 3], "setup": 1, "py": [1, 3], "sdist": 1, "For": [1, 2, 3], "doe": [1, 3], "want": [1, 3], "custom": [1, 3], "hi": 1, "individu": [1, 3], "hand": 1, "which": [1, 3], "have": [1, 3], "64": 1, "bit": 1, "continuum": 1, "io": 1, "32": 1, "enthought": 1, "epd": 1, "most": 1, "conda": 1, "exampl": [1, 3], "setuptool": 1, "select": [1, 2, 3], "branch": 1, "There": 1, "two": [1, 3], "bundl": 1, "unzip": 1, "execut": [1, 3], "temporari": [1, 3], "potenti": 1, "broken": 1, "grab": 1, "revis": 1, "subvers": 1, "repositori": 1, "svn": 1, "co": 1, "p": [1, 3], "head": 1, "tree": [1, 3], "trunk": 1, "both": [1, 2, 3], "contain": [1, 3], "simpli": 1, "type": [1, 3], "shell": 1, "line": 1, "It": [1, 2, 3], "biologi": 1, "markup": 1, "languag": 1, "sbml": [1, 3], "go": 1, "stabl": 1, "32bit": 1, "path": [1, 3], "5": [1, 3], "10": [1, 3], "win": 1, "x86": 1, "ex": 1, "found": [1, 3], "run": [1, 3], "sure": 1, "dure": 1, "appropri": 1, "match": [1, 3], "directli": [1, 3], "py2": 1, "If": [1, 3], "access": [1, 2], "solver": [1, 3], "good": [1, 3], "idea": 1, "again": 1, "choos": [1, 3], "an": [1, 3], "suit": 1, "cplex_studio126": 1, "english": 1, "accept": 1, "set": [1, 3], "program": [1, 3], "ilog": 1, "allow": [1, 3], "default": [1, 3], "associ": [1, 3], "updat": [1, 3], "onc": [1, 3], "complet": [1, 3], "termin": [1, 3], "x86_win32": 1, "free": [1, 2, 3], "port": 1, "maintain": 1, "opencobra": 1, "mirror": 1, "win32": 1, "everyth": [1, 3], "gone": 1, "accord": 1, "plan": 1, "No": 1, "error": [1, 3], "occur": [1, 3], "libsbml_version_str": 1, "success": 1, "return": [1, 3], "out": [1, 3], "51000": 1, "welcom": 1, "constraint": [1, 2, 3], "base": [1, 2, 3], "copyright": [1, 3], "2010": 1, "2015": [1, 3], "dept": 1, "bioinformat": 1, "netherland": [1, 3], "v": 1, "suppli": [1, 3], "detail": [1, 3], "exit": 1, "ctrl": 1, "d": [1, 3], "solv": [1, 3], "succes": 1, "tri": [1, 3], "aggreg": 1, "presolv": [1, 3], "reduct": 1, "00": [1, 3], "sec": 1, "lpx": 1, "0x036c24c8": 1, "newer": 1, "amd64": 1, "wx": 1, "gui": [1, 2], "environ": 1, "r346": 1, "On": 1, "cheeseshop": 1, "gener": [1, 3], "xp": 1, "2008": 1, "easili": 1, "look": [1, 3], "them": [1, 3], "up": [1, 2], "befor": [1, 3], "configurationy": 1, "experiment": [1, 3], "fbc": [1, 3], "v2": [1, 3], "least": 1, "due": 1, "api": 1, "until": [1, 3], "workaround": [1, 3], "uninstal": 1, "compil": [1, 3], "etc": [1, 3], "xzf": 1, "extend": [1, 3], "web": [1, 2, 3], "servic": [1, 2, 3], "databas": [1, 3], "pysqlite2": 1, "advanc": [1, 2], "add": [1, 3], "soap": [1, 2, 3], "capabl": 1, "pyscesmarin": 1, "zip": [1, 3], "webserv": 1, "pysces_cbm_marin": 1, "misc": 1, "xf": 1, "server": 1, "nano": 1, "usr": 1, "lib": 1, "dist": 1, "marinerconfig": 1, "path_libsbmlthread": 1, "libsbmlthread": 1, "pyc": 1, "path_libsbml_convertthread": 1, "libsbmlconvertthread": 1, "demo": 1, "cbm_server_demo": 1, "anoth": 1, "client": [1, 3], "cbm_client_demo": 1, "kill": 1, "close": [1, 3], "Not": 1, "find": [1, 3], "easy_install3": 1, "p3": 1, "yet": [1, 3], "ipython3": 1, "pip3": 1, "sip": 1, "essenti": [1, 3], "similar": [1, 3], "except": [1, 3], "distutil": 1, "step": 1, "mac": 1, "xcode": 1, "pypars": [1, 3], "archflag": 1, "wno": 1, "unus": 1, "argument": [1, 3], "hard": 1, "futur": [1, 3], "own": [1, 3], "gmplib": 1, "prefix": [1, 3], "expos": [1, 2], "backend": [1, 3], "fame": [1, 3], "f": [1, 3], "m": [1, 3], "pysces_marin": 1, "pure": 1, "itself": [1, 3], "lxml": 1, "de": 1, "archiv": [1, 3], "warn": [1, 3], "binary_test": 1, "primitive_test": 1, "pass": 1, "To": [1, 2, 3], "run_serv": 1, "bat": 1, "displai": [1, 3], "15": 1, "31313": 1, "toolkit": 1, "snip": 1, "multipl": [1, 3], "6": [1, 3], "r1147": 1, "pyscescbm": [1, 3], "initialis": 1, "consol": [1, 2], "block": 1, "without": [1, 3], "done": [1, 3], "congratul": 1, "successfulli": 1, "cbmpy": 2, "new": [2, 3], "platform": 2, "analysi": [2, 3], "principl": 2, "simul": [2, 3], "usabl": 2, "flexibl": 2, "Its": 2, "architectur": 2, "extens": 2, "data": [2, 3], "structur": [2, 3], "intuit": 2, "biologist": 2, "metabolit": [2, 3], "transpar": 2, "translat": [2, 3], "underli": 2, "mathemat": 2, "implement": [2, 3], "popular": 2, "analys": [2, 3], "fba": [2, 3], "fva": [2, 3], "element": [2, 3], "charg": [2, 3], "balanc": [2, 3], "network": [2, 3], "method": [2, 3], "specif": [2, 3], "ecosystem": 2, "minim": [2, 3], "distanc": 2, "flux": [2, 3], "input": [2, 3], "cater": 2, "divers": 2, "rang": [2, 3], "support": [2, 3], "user": [2, 3], "interact": 2, "script": [2, 3], "librari": 2, "quick": [2, 3], "visual": 2, "represent": [2, 3], "tool": [2, 3], "much": 2, "high": [2, 3], "level": [2, 3], "integr": 2, "visit": 2, "websit": 2, "http": [2, 3], "sourceforg": [2, 3], "net": [2, 3], "date": [2, 3], "feel": 2, "contact": [2, 3], "team": 2, "2009": 3, "2024": 3, "vu": 3, "univers": 3, "redistribut": 3, "modifi": 3, "term": 3, "public": 3, "licens": 3, "publish": 3, "foundat": 3, "your": 3, "option": 3, "later": 3, "hope": 3, "warranti": 3, "even": 3, "impli": 3, "merchant": 3, "fit": 3, "FOR": 3, "particular": 3, "purpos": 3, "receiv": 3, "along": 3, "author": 3, "phd": 3, "github": 3, "systemsbioinformat": 3, "issu": 3, "last": 3, "id": 3, "710": 3, "2020": 3, "27": 3, "22": 3, "34z": 3, "class": 3, "uniqu": 3, "combin": 3, "miriam": 3, "biolog": 3, "qualifi": 3, "addidorguri": 3, "qual": 3, "uri": 3, "collect": 3, "biomodel": 3, "isencodedbi": 3, "identifi": 3, "chebi": 3, "58088": 3, "addmiriamannot": 3, "entiti": 3, "mid": 3, "resourc": 3, "17158": 3, "checkent": 3, "entri": 3, "test": 3, "insensit": 3, "correct": 3, "wrongli": 3, "capitalis": 3, "automat": 3, "recognis": 3, "candid": 3, "letter": 3, "checkentitypattern": 3, "kei": 3, "pattern": 3, "regex": 3, "necessari": 3, "deletemiriamannot": 3, "delet": 3, "getallmiriamuri": 3, "dictionari": 3, "url": 3, "getandviewurisforqualifi": 3, "retriev": 3, "attempt": 3, "browser": 3, "tab": 3, "isencod": 3, "getmiriamurisforqualifi": 3, "viewurl": 3, "arrai": 3, "ridx": 3, "cidx": 3, "row": 3, "none": 3, "col": 3, "store": 3, "matrix": 3, "give": 3, "permut": 3, "its": 3, "label": 3, "given": 3, "src": 3, "getcolsbyidx": 3, "arg": 3, "column": 3, "referenc": 3, "1": 3, "getcolsbynam": 3, "getindex": 3, "axi": 3, "getlabel": 3, "getrowsbyidx": 3, "getrowsbynam": 3, "setcol": 3, "assum": 3, "full": 3, "map": 3, "self": 3, "setrow": 3, "rh": 3, "oper": 3, "stuff": 3, "friendli": 3, "getcopi": 3, "attr_str": 3, "deep": 3, "fals": 3, "attribut": 3, "deepcopi": 3, "string": 3, "do": 3, "caution": 3, "docstr": 3, "cf": 3, "quiet": 3, "whether": 3, "conform": 3, "chemic": 3, "formula": 3, "c3br5": 3, "true": 3, "wikipedia": 3, "wiki": 3, "hill_system": 3, "print": 3, "messag": 3, "valid": 3, "variabl": 3, "node": 3, "useweakref": 3, "cntr": 3, "gpr": 3, "g1": 3, "g2": 3, "g3": 3, "python": 3, "ast": 3, "rid": 3, "bodi": 3, "instanc": 3, "weakref": 3, "altern": 3, "return_clean_gpr": 3, "extract": 3, "formul": 3, "cobra": 3, "style": 3, "clean": 3, "replac": 3, "sid": 3, "must": 3, "underscor": 3, "rest": 3, "alphanumer": 3, "leav": 3, "offens": 3, "charact": 3, "otherwis": 3, "gprd": 3, "parent": 3, "old": 3, "school": 3, "gprdict": 3, "obtain": 3, "gettre": 3, "gprdictionari": 3, "output": 3, "repres": 3, "relationship": 3, "recurs": 3, "pars": 3, "gprstring": 3, "place": 3, "nest": 3, "getfromnam": 3, "overwritechemformula": 3, "overwritecharg": 3, "disambigu": 3, "overload": 3, "strip": 3, "711": 3, "tupl": 3, "y": 3, "z": 3, "selected_react": 3, "pre_opt": 3, "tol": 3, "objf2constr": 3, "rhs_sens": 3, "lower": 3, "optpercentag": 3, "100": 3, "work_dir": 3, "debug": 3, "oldlpgen": 3, "markupmodel": 3, "default_on_fail": 3, "roundoff_span": 3, "perform": 3, "mean": 3, "report": 3, "result": 3, "ouput": 3, "disabl": 3, "valu": 3, "activ": 3, "floor": 3, "ceil": 3, "round": 3, "objc": 3, "objval": 3, "inequ": 3, "upper": 3, "equal": 3, "percentag": 3, "optim": 3, "optimal_valu": 3, "cwd": 3, "intermedi": 3, "enabl": 3, "supress": 3, "cplex": 3, "form": 3, "fva_min": 3, "fva_max": 3, "fail": 3, "minimum": 3, "maximum": 3, "solut": 3, "number": 3, "digit": 3, "off": 3, "min": 3, "max": 3, "auto": 3, "primal": 3, "dual": 3, "b": 3, "barrier": 3, "crossov": 3, "h": 3, "sift": 3, "concurr": 3, "reduc": 3, "cost": 3, "ab": 3, "minstatu": 3, "maxstatu": 3, "objective_coeffici": 3, "return_lp_obj": 3, "popul": 3, "sum": 3, "remain": 3, "unchang": 3, "mode": 3, "describ": 3, "below": 3, "bi": 3, "ci": 3, "ji": 3, "Such": 3, "nji": 3, "jbio": 3, "opt": 3, "diabl": 3, "vid": 3, "necessarili": 3, "bound": 3, "although": 3, "practic": 3, "doubt": 3, "msaf": 3, "reaction_id": 3, "float": 3, "pair": 3, "introduc": 3, "coeffici": 3, "absolut": 3, "non": 3, "specifi": 3, "when": 3, "algorithm": 3, "sub": 3, "relgap": 3, "populate_limit": 3, "20": 3, "time_limit": 3, "300": 3, "suggest": 3, "rel": 3, "gap": 3, "after": 3, "second": 3, "higher": 3, "population_limit": 3, "with_reduced_cost": 3, "uncsal": 3, "scale": 3, "unscal": 3, "anyth": 3, "els": 3, "With": 3, "mincnt": 3, "OR": 3, "cpx": 3, "populate_data": 3, "cp": 3, "depend": 3, "flag": 3, "j1": 3, "j2": 3, "j3": 3, "jn": 3, "ad": 3, "per": 3, "abs_ji": 3, "jopt": 3, "origin": 3, "1e": 3, "multist": 3, "bypass": 3, "auto_mipgap": 3, "decreas": 3, "mipgap": 3, "absmipgap": 3, "pid": 3, "dir": 3, "fbaobj": 3, "take": 3, "resul": 3, "fluxvariabilityanalysi": 3, "nice": 3, "csv": 3, "refactor": 3, "filename_bas": 3, "output_arrai": 3, "output_nam": 3, "extra": 3, "tabl": 3, "lpfname": 3, "with_sensit": 3, "del_intermedi": 3, "build_n": 3, "objectivefunct": 3, "stoichiometr": 3, "common": 3, "By": 3, "instanti": 3, "produc": 3, "calcul": 3, "interpret": 3, "s_rcost": 3, "r": 3, "reduced_cost": 3, "rval": 3, "obj_valu": 3, "sensit": 3, "redund": 3, "stoichiometri": 3, "suppress": 3, "fname": 3, "memori": 3, "filenam": 3, "defin": 3, "construct": 3, "fix": 3, "sens": 3, "symbol": 3, "properli": 3, "format": 3, "empti": 3, "boolean": 3, "pre_sol": 3, "pre_oid": 3, "pre_ov": 3, "optimal_presolut": 3, "oval": 3, "optimum": 3, "lptfile": 3, "load": 3, "lpt": 3, "cplx": 3, "objfuncnam": 3, "objfuncv": 3, "reducedcost": 3, "inpt": 3, "show": 3, "over": 3, "vari": 3, "forc": 3, "basi": 3, "lower_obj_sensit": 3, "coeff_valu": 3, "upper_obj_sensit": 3, "low": 3, "lb_low": 3, "lb_high": 3, "ub_low": 3, "ub_high": 3, "shadow": 3, "price": 3, "n_row_id": 3, "lb": 3, "ub": 3, "lps_opt": 3, "lps_fea": 3, "feasibl": 3, "lps_infea": 3, "infeas": 3, "lps_nofea": 3, "problem": 3, "lps_unbnd": 3, "unbound": 3, "lps_undef": 3, "undefin": 3, "lps_none": 3, "exdict": 3, "wdir": 3, "input_lb": 3, "input_ub": 3, "writehformat": 3, "rationallpout": 3, "scan": 3, "mip": 3, "toler": 3, "expr": 3, "maxim": 3, "reset": 3, "major": 3, "leak": 3, "get_nam": 3, "whch": 3, "r_id": 3, "zero": 3, "avoid": 3, "nois": 3, "silent": 3, "log": 3, "cplx_result_stream_fil": 3, "cplex_output": 3, "iostream": 3, "cplx_result_stream_io": 3, "csio": 3, "noisi": 3, "stream_io": 3, "stream_fil": 3, "statu": 3, "r_off_low": 3, "r_off_upp": 3, "optrnd": 3, "altout": 3, "singl": 3, "deactiv": 3, "optima": 3, "effect": 3, "fba_sol": 3, "objf_nam": 3, "separ": 3, "wth": 3, "titl": 3, "mod": 3, "2": 3, "editor": 3, "basic": 3, "properti": 3, "706": 3, "03": 3, "23": 3, "21": 3, "31": 3, "49z": 3, "size": 3, "dimens": 3, "volum": 3, "containsreact": 3, "containsspeci": 3, "getdimens": 3, "getsiz": 3, "setdimens": 3, "setid": 3, "fid": 3, "reimplement": 3, "setsiz": 3, "ctype": 3, "weight": 3, "appear": 3, "cb": 3, "fulli": 3, "only_qual_uri": 3, "addmiriamuri": 3, "12345": 3, "clone": 3, "deepcop": 3, "exist": 3, "other": 3, "word": 3, "independ": 3, "desir": 3, "behaviour": 3, "overrid": 3, "subclass": 3, "deleteannot": 3, "unset": 3, "delt": 3, "getannot": 3, "getcompartmentid": 3, "locat": 3, "getid": 3, "getmiriamannot": 3, "getmetaid": 3, "metaid": 3, "getmodel": 3, "link": 3, "objref": 3, "unlink": 3, "overwritten": 3, "getnam": 3, "getnot": 3, "getpid": 3, "getsboterm": 3, "sbo": 3, "hasannot": 3, "presenc": 3, "absenc": 3, "objext": 3, "serial": 3, "protocol": 3, "requir": 3, "pickl": 3, "serializetodisk": 3, "disk": 3, "setannot": 3, "ext": 3, "fbcv3": 3, "setcompartmentid": 3, "setmetaid": 3, "meta": 3, "setnam": 3, "setnot": 3, "prefer": 3, "html": 3, "setpid": 3, "setsboterm": 3, "sboterm": 3, "nnnnnnn": 3, "gettyp": 3, "getvalu": 3, "setreactionid": 3, "react": 3, "setvalu": 3, "streamlin": 3, "superclass": 3, "inf": 3, "reaction2": 3, "quadrat": 3, "variable1": 3, "variable2": 3, "r1": 3, "r2": 3, "about": 3, "protein": 3, "philosophi": 3, "isact": 3, "resetact": 3, "state": 3, "setact": 3, "setinact": 3, "inact": 3, "setlabel": 3, "use_compil": 3, "addassoci": 3, "assoc": 3, "express": 3, "addgeneref": 3, "geneid": 3, "createassociationandgenerefsfromstr": 3, "altlabel": 3, "evalu": 3, "cmod": 3, "addgprassoci": 3, "call": 3, "createassociationandgenerefsfromtre": 3, "gprtree": 3, "deletegenefromassoci": 3, "gid": 3, "process": 3, "irrevers": 3, "deletegeneref": 3, "evalassoci": 3, "integ": 3, "logic": 3, "getactivegen": 3, "getassociationstr": 3, "use_label": 3, "use_lablel": 3, "than": 3, "fbcv2": 3, "getgen": 3, "getgeneid": 3, "getgenelabel": 3, "gprass": 3, "getprotein": 3, "gettreecopi": 3, "isproteinact": 3, "indic": 3, "posit": 3, "setallgenesact": 3, "setallgenesinact": 3, "setgeneact": 3, "setgeneinact": 3, "setprotein": 3, "settre": 3, "addmemb": 3, "obj": 3, "member": 3, "addsharedmiriamannot": 3, "assignallsharedpropertiestomemb": 3, "overwrit": 3, "assign": 3, "share": 3, "target": 3, "thei": 3, "assignsharedannotationtomemb": 3, "merg": 3, "assignsharedmiriamannotationtomemb": 3, "assignsharednotestomemb": 3, "assignsharedsbotermstomemb": 3, "shallow": 3, "themselv": 3, "deletememb": 3, "oid": 3, "getkind": 3, "kind": 3, "getmemb": 3, "correspond": 3, "request": 3, "getmemberid": 3, "as_set": 3, "getsharedannot": 3, "getsharedmiriamannot": 3, "getsharednot": 3, "getsharedsboterm": 3, "hasmemb": 3, "setkind": 3, "partonomi": 3, "classif": 3, "setsharedannot": 3, "setsharednot": 3, "setsharedsboterm": 3, "7": 3, "equival": 3, "listofmemb": 3, "manipul": 3, "n": 3, "addcompart": 3, "comp": 3, "addfluxbound": 3, "fbexist": 3, "sampl": 3, "reactionid_boundtyp": 3, "list_of_fluxbound": 3, "append": 3, "_": 3, "getreactionid": 3, "drastic": 3, "circumv": 3, "sort": 3, "shown": 3, "scratch": 3, "alternativel": 3, "prepopul": 3, "flux_bound": 3, "update_idx": 3, "addgen": 3, "addgroup": 3, "addmodelcr": 3, "firstnam": 3, "lastnam": 3, "organis": 3, "email": 3, "creator": 3, "fmaili": 3, "mandatori": 3, "addobject": 3, "activeobjidx": 3, "addparamet": 3, "par": 3, "addreact": 3, "create_default_bound": 3, "j": 3, "revers": 3, "addspeci": 3, "adduserconstraint": 3, "determin": 3, "adduserdefinedconstraint": 3, "udc": 3, "buildstoichmatrix": 3, "matrix_typ": 3, "only_return": 3, "cn": 3, "denomin": 3, "__cbconfig__": 3, "sympy_denom_limit": 3, "12": 3, "scipy_csr": 3, "csr_spars": 3, "changeallfluxboundswithvalu": 3, "convertuserconstraintstouserdefinedconstraint": 3, "json": 3, "upmark": 3, "copyuserdefinedconstraintstouserconstraint": 3, "createcompart": 3, "cid": 3, "creategeneassociationsfromannot": 3, "annotation_kei": 3, "replace_exist": 3, "definit": 3, "standard": 3, "gene_associ": 3, "hold": 3, "enzym": 3, "ones": 3, "creategeneproteinassoci": 3, "gene_pattern": 3, "mai": 3, "deprec": 3, "anymor": 3, "creategeneproteinassociationfromtre": 3, "creategroup": 3, "createobjectivefunct": 3, "osens": 3, "delete_current_obj": 3, "createparamet": 3, "createreact": 3, "blank": 3, "createreactionbound": 3, "lb_valu": 3, "ub_valu": 3, "createreactionlowerbound": 3, "createreactionnew": 3, "createreactionreag": 3, "createreactionupperbound": 3, "createsinglegeneeffectmap": 3, "rise": 3, "further": 3, "long": 3, "order": 3, "special": 3, "keyj": 3, "__single_gene_effect_map__": 3, "createspeci": 3, "boundari": 3, "nan": 3, "chemformula": 3, "createuserdefinedconstraint": 3, "component": 3, "componen": 3, "deleteallfluxboundswithvalu": 3, "deleteboundsforreactionid": 3, "connect": 3, "deletecompart": 3, "check_compon": 3, "were": 3, "deletegprassoci": 3, "gprid": 3, "deletegen": 3, "also_delete_gpr": 3, "locu": 3, "tag": 3, "deletegenebylabel": 3, "b2003": 3, "deletegroup": 3, "deletenonreactingspeci": 3, "perman": 3, "greedi": 3, "would": 3, "speciesid": 3, "deleteobject": 3, "objective_id": 3, "deletereactionandbound": 3, "deletespeci": 3, "also_delet": 3, "particip": 3, "emptyundelet": 3, "undelet": 3, "cach": 3, "exportfvadata": 3, "export": 3, "exportuserconstraint": 3, "findfluxesforconnectedspeci": 3, "metab": 3, "getactiveobject": 3, "getactiveobjectivereactionid": 3, "getactiveobjectivestoichiometri": 3, "flux_object": 3, "getallfluxbound": 3, "getallgeneact": 3, "getallgeneproteinassoci": 3, "getallproteinact": 3, "getallproteingeneassoci": 3, "getboundaryspeciesid": 3, "getcompart": 3, "substr": 3, "appli": 3, "anywher": 3, "getcompartmentobject": 3, "getdescript": 3, "descript": 3, "wa": 3, "field": 3, "getexchangereactionid": 3, "is_exchang": 3, "getexchangereact": 3, "getfluxboundbyid": 3, "getfluxboundbyreactionid": 3, "getfluxboundid": 3, "getfluxboundsbyreactionid": 3, "reactionid": 3, "invalid": 3, "getfluxesassociatedwithcompart": 3, "transport": 3, "between": 3, "cytosol": 3, "mitochondria": 3, "cyt": 3, "mit": 3, "respect": 3, "your_model": 3, "getfluxesassociatedwithspeci": 3, "getgpridassociatedwithgeneid": 3, "getgpridassociatedwithgenelabel": 3, "getgprid": 3, "getgprobject": 3, "getgprassoci": 3, "getgprforreact": 3, "getgprforreactionasdict": 3, "getgenebylabel": 3, "getgeneidfromlabel": 3, "getgeneobject": 3, "getgeneobjectsbylabel": 3, "getgroup": 3, "getgroupid": 3, "getgroupmembership": 3, "membership": 3, "item": 3, "object_id": 3, "group_id1": 3, "group_id2": 3, "getgroupnam": 3, "getirreversiblereactionid": 3, "inherit": 3, "getmodelcr": 3, "getobjfuncvalu": 3, "getobject": 3, "getobjectiveid": 3, "getoptimalvalu": 3, "getparamet": 3, "getreact": 3, "getreactionact": 3, "getreactionbound": 3, "lowerbound": 3, "upperbound": 3, "getreactionidsassociatedwithspeci": 3, "getreactionlowerbound": 3, "getreactionnam": 3, "getreactionobject": 3, "getreactionupperbound": 3, "getreactionvalu": 3, "only_exchang": 3, "reactionvalu": 3, "exchang": 3, "getreversiblereactionid": 3, "getsolutionvector": 3, "vector": 3, "getspeci": 3, "getspeciesid": 3, "getspeciesobject": 3, "hasobject": 3, "regist": 3, "importuserconstraint": 3, "registerobjectinglobalstor": 3, "renameobjectid": 3, "suffix": 3, "ignor": 3, "inconsist": 3, "advertis": 3, "renam": 3, "resetallgen": 3, "update_react": 3, "normal": 3, "resetallinactivegprbound": 3, "setallinactivegenereactionbound": 3, "previou": 3, "setallfluxbound": 3, "setfluxboundsfromdict": 3, "present": 3, "fluxbound_id": 3, "setallinactivegprbound": 3, "setallproteinact": 3, "activit": 3, "setboundvaluebynam": 3, "setreactionbound": 3, "setcreatedd": 3, "year": 3, "month": 3, "dai": 3, "hour": 3, "minut": 3, "2012": 3, "09": 3, "24": 3, "13": 3, "34": 3, "setdescript": 3, "clear": 3, "idin": 3, "9": 3, "g_id": 3, "restor": 3, "setmodifiedd": 3, "modif": 3, "setobjectiveflux": 3, "delete_objflx": 3, "setprefix": 3, "alpha": 3, "setreactionlowerbound": 3, "setreactionupperbound": 3, "setsuffix": 3, "sortreactionsbyid": 3, "sortspeciesbyid": 3, "splitequalityfluxbound": 3, "split": 3, "equalit": 3, "testgeneproteinassoci": 3, "geneprotein": 3, "unregisterobjectinglobalstor": 3, "updatenetwork": 3, "addfluxobject": 3, "fobj": 3, "push": 3, "global": 3, "never": 3, "createfluxobject": 3, "fluxlist": 3, "tripl": 3, "createquadraticfluxobject": 3, "rid2": 3, "deleteallfluxobject": 3, "getfluxobject": 3, "foid": 3, "multipli": 3, "getfluxobjectivedata": 3, "getfluxobjectiveforreact": 3, "supli": 3, "illeg": 3, "getfluxobjectiveid": 3, "objectiveflux": 3, "getfluxobjectivereact": 3, "getlinearfluxobject": 3, "getoper": 3, "getquadraticbivariatefluxobject": 3, "bivari": 3, "getquadraticfluxobject": 3, "setoper": 3, "maximis": 3, "minimis": 3, "deleteassoci": 3, "getassoci": 3, "addreag": 3, "reag": 3, "changeid": 3, "createreag": 3, "neg": 3, "substrat": 3, "product": 3, "Will": 3, "alreadi": 3, "deactivatereact": 3, "reactivatereact": 3, "deletereagentwithspeciesref": 3, "getequ": 3, "reverse_symb": 3, "irreverse_symb": 3, "use_nam": 3, "pretti": 3, "equat": 3, "defualt": 3, "getfvadata": 3, "roundnum": 3, "fvamin": 3, "fvamax": 3, "span": 3, "roundoff": 3, "decim": 3, "stdout": 3, "getgprassociationstr": 3, "lab": 3, "getlowerbound": 3, "getproductid": 3, "getreag": 3, "getreagentobjid": 3, "getreagentref": 3, "getreagentwithspeciesref": 3, "same": 3, "getspeciesobj": 3, "getstoichiometri": 3, "getsubstrateid": 3, "getupperbound": 3, "setlowerbound": 3, "point": 3, "setstoichcoeffici": 3, "At": 3, "setupperbound": 3, "species_ref": 3, "coef": 3, "reactiv": 3, "getcoeffici": 3, "getrol": 3, "setcoeffici": 3, "coeff": 3, "setspeci": 3, "spe": 3, "getcharg": 3, "getchemformula": 3, "getreagentof": 3, "isreagentof": 3, "dynam": 3, "setboundari": 3, "setcharg": 3, "sign": 3, "doubl": 3, "int": 3, "setchemformula": 3, "ch3no2": 3, "allow_renam": 3, "setreagentof": 3, "reagent_of": 3, "isn": 3, "unsetboundari": 3, "therefor": 3, "addconstraintcompon": 3, "cc": 3, "userconstraintcompon": 3, "createconstraintcompon": 3, "getconstraintcompon": 3, "getconstraintcomponentdata": 3, "getconstraintcomponentforvari": 3, "getconstraintcomponentid": 3, "getconstraintcomponentvariabletyp": 3, "getconstraintcomponentvari": 3, "abcdefg": 3, "proc": 3, "override_bin": 3, "multicor": 3, "thread": 3, "seem": 3, "physic": 3, "python_override_bin": 3, "bin": 3, "sqlite": 3, "db": 3, "sql": 3, "checkentryincolumn": 3, "closedb": 3, "reconnect": 3, "commitdb": 3, "commit": 3, "curent": 3, "connectsqlitedb": 3, "db_name": 3, "createdbt": 3, "sqlcol": 3, "text": 3, "primari": 3, "aa_seq": 3, "nuc_seq": 3, "aa_len": 3, "nuc_len": 3, "dumptabletocsv": 3, "save": 3, "txt": 3, "dump": 3, "dumptabletotxt": 3, "executesql": 3, "fetchal": 3, "raw": 3, "queri": 3, "getcel": 3, "cell": 3, "tp": 3, "getcolumn": 3, "fetch": 3, "getrow": 3, "alwai": 3, "gettabl": 3, "colout": 3, "entir": 3, "colnam": 3, "insertdata": 3, "insert": 3, "INTO": 3, "updatedata": 3, "compani": 3, "address": 3, "texa": 3, "kegg": 3, "connector": 3, "organim": 3, "sequenc": 3, "fetchseqfromkegg": 3, "k_gene": 3, "amino": 3, "acid": 3, "deal": 3, "applic": 3, "root": 3, "establish": 3, "site": 3, "googl": 3, "reply_mod": 3, "repli": 3, "q": 3, "atp": 3, "getlog": 3, "histori": 3, "logfil": 3, "parsexmltotext": 3, "quicklookup": 3, "lookpup": 3, "descend": 3, "prioriti": 3, "lookup": 3, "viewdatainwebrows": 3, "maxr": 3, "fva_data": 3, "fva_nam": 3, "yslice": 3, "minheight": 3, "maxheight": 3, "roundec": 3, "autoclos": 3, "fluxval": 3, "png": 3, "plot": 3, "imag": 3, "graph": 3, "length": 3, "bar": 3, "colour": 3, "yellow": 3, "pdf": 3, "ep": 3, "669": 3, "2019": 3, "02": 3, "18": 3, "58": 3, "19z": 3, "sbmlfile": 3, "sbml2fba": 3, "sbml3fbcv1": 3, "sbml3fbcv2": 3, "return_sbml_model": 3, "delete_intermedi": 3, "fake_boundary_species_search": 3, "output_dir": 3, "skip_gen": 3, "scan_notes_gpr": 3, "cbm_mod": 3, "sbml_mod": 3, "boundary_condit": 3, "_b": 3, "l3": 3, "detect": 3, "associationa": 3, "xlname": 3, "write_sbml": 3, "sbml_level": 3, "return_dictionari": 3, "encod": 3, "excel97": 3, "workbook": 3, "exactli": 3, "like": 3, "network_react": 3, "sheet": 3, "xlpath": 3, "excel": 3, "return_model": 3, "l2": 3, "xoption": 3, "nmatrix_typ": 3, "nogen": 3, "noannot": 3, "readcobra": 3, "read_model_str": 3, "instead": 3, "stoichiometrich": 3, "built": 3, "dens": 3, "best": 3, "spars": 3, "ration": 3, "cast": 3, "steven": 3, "bigfil": 3, "fast_rat": 3, "nformat": 3, "14f": 3, "compress": 3, "hdf5file": 3, "vertex": 3, "pipelin": 3, "left": 3, "backward": 3, "compat": 3, "convers": 3, "decomposit": 3, "slight": 3, "2th": 3, "accuraci": 3, "hdf5": 3, "lzf": 3, "szip": 3, "_vtx_": 3, "tmp": 3, "countain": 3, "dataset": 3, "vertic": 3, "rai": 3, "lin": 3, "space": 3, "compresslevel": 3, "larg": 3, "lineal": 3, "model_fil": 3, "bounds_fil": 3, "biomass_flux": 3, "model_id": 3, "fbamodel": 3, "reaction_prefix": 3, "r_": 3, "has_head": 3, "header": 3, "funtion": 3, "derprec": 3, "fbam": 3, "1000": 3, "sink": 3, "consum": 3, "reversibl": 3, "fm": 3, "autocorrect": 3, "correctli": 3, "consist": 3, "reversbl": 3, "legal": 3, "duplic": 3, "zero_tol": 3, "0e": 3, "deriv": 3, "wikispac": 3, "chemicalformula": 3, "zipnam": 3, "move": 3, "creation": 3, "zlib": 3, "serialis": 3, "arr": 3, "sep": 3, "fmt": 3, "2d": 3, "appendlist": 3, "dead": 3, "auto_correct": 3, "fbamod": 3, "gene_annotation_kei": 3, "bigg": 3, "w": 3, "alphanum": 3, "ecoli": 3, "bw": 3, "advis": 3, "dat": 3, "m1": 3, "m2": 3, "ignore_duplicate_id": 3, "arbitrarili": 3, "outermerg": 3, "track": 3, "encount": 3, "usual": 3, "new_id": 3, "new_nam": 3, "auto_delet": 3, "being": 3, "fragment": 3, "name_chemformula": 3, "medium": 3, "xhtml": 3, "hack": 3, "remov": 3, "reactant": 3, "typic": 3, "manchest": 3, "probabl": 3, "better": 3, "around": 3, "val": 3, "08": 3, "consider": 3, "factor": 3, "ignore_coeffici": 3, "brute": 3, "apprach": 3, "unbalanc": 3, "un": 3, "miss": 3, "howev": 3, "unknown": 3, "r1f": 3, "r1r": 3, "fwd_id": 3, "rev_id": 3, "r1_fwd": 3, "r1_rev": 3, "forward": 3, "rid_fwd": 3, "rid_rev": 3, "gzip": 3, "infinity_replac": 3, "use_r": 3, "infin": 3, "stoichiometerylp": 3, "constaint": 3, "strict": 3, "dt": 3, "relax": 3, "scale_min": 3, "appendfil": 3, "info": 3, "fulllp": 3, "multisymb": 3, "constraint_mod": 3, "num": 3, "hformat": 3, "polyhedra": 3, "written": 3, "legaci": 3, "bgid": 3, "perfix": 3, "pad": 3, "figur": 3, "start": 3, "include_al": 3, "screen": 3, "late": 3, "sbml3": 3, "prepend": 3, "fvadata": 3, "glpk": 3, "fluxnam": 3, "opt_val": 3, "normalis": 3, "ignoredist": 3, "polynomi": 3, "kept": 3, "improv": 3, "met_typ": 3, "certain": 3, "actual": 3, "just": 3, "sbmlname": 3, "withexcel": 3, "vc_given": 3, "vc_famili": 3, "vc_email": 3, "vc_org": 3, "add_cbmpy_annot": 3, "add_cobra_annot": 3, "human": 3, "readabl": 3, "spreadsheet": 3, "famili": 3, "keyvaluedata": 3, "97": 3, "cbm_peptide_cost": 3, "toa": 3, "sbml_level_vers": 3, "wrapper": 3, "gpr_from_annot": 3, "add_group": 3, "compress_bound": 3, "fbc_version": 3, "libsbml": 3, "sbml3fbc": 3, "2013": 3, "zip_model": 3, "pkzip": 3, "return_model_str": 3, "obj_sen": 3, "rhs_sen": 3, "bound_sen": 3, "sol": 3, "extra_output": 3, "canb": 3, "stackoverflow": 3, "question": 3, "753052": 3, "level3": 3, "version1": 3, "version3": 3, "l3v1fbc3": 3, "version2": 3, "l3v1fbc2": 3, "l3v1fbc1": 3, "l3v2fbc2": 3, "l3v2fbc1": 3, "l3v2core": 3, "l3v1core": 3, "level2": 3, "version4": 3, "bqb_encod": 3, "bqb_has_part": 3, "haspart": 3, "bqb_has_properti": 3, "hasproperti": 3, "bqb_has_vers": 3, "hasvers": 3, "bqb_i": 3, "isa": 3, "bqb_is_described_bi": 3, "isdescribedbi": 3, "bqb_is_encoded_bi": 3, "bqb_is_homolog_to": 3, "ishomologto": 3, "bqb_is_part_of": 3, "ispartof": 3, "bqb_is_property_of": 3, "11": 3, "ispropertyof": 3, "bqb_is_version_of": 3, "isversionof": 3, "bqb_occurs_in": 3, "occursin": 3, "bqb_unknown": 3, "bqm_i": 3, "bqm_is_derived_from": 3, "bqm_is_described_bi": 3, "bqm_unknown": 3, "outnam": 3, "l3fbc": 3, "convertcobra": 3, "frank": 3, "bergmann": 3, "convertfbctocobra": 3, "shini": 3, "geneproductassoci": 3, "dict": 3, "return_doc": 3, "remove_note_bodi": 3, "intern": 3, "join": 3, "sb": 3, "compliant": 3, "cv": 3, "sbase": 3, "bqmodel": 3, "walk": 3, "through": 3, "l3fbcv2": 3, "generef": 3, "inspir": 3, "speciesannotationfix": 3, "fbcp": 3, "keyvalu": 3, "plugin": 3, "model_extension_class": 3, "model_metaclass": 3, "metaclass": 3, "cbmo": 3, "sbmlo": 3, "uridict": 3, "autodetect": 3, "paragraph": 3, "kv_pair": 3, "upgrad": 3, "next": 3, "few": 3, "cbmltosbml": 3, "fbcmod": 3, "add_cbmpy_anno": 3, "relat": 3, "cbm2sbml": 3, "return_dict": 3, "add_cobra_anno": 3, "v1": 3, "v3": 3, "2023": 3, "substance_unit": 3, "amount": 3, "concentr": 3, "mmol": 3, "gdw": 3, "unit": 3, "give_default": 3, "fullmsg": 3, "docread": 3, "three": 3, "autofix": 3, "return_fbc": 3, "oe": 3, "usag": 3, "newclass": 3, "baseclass": 3, "fbid": 3, "sbml3fba": 3, "minidom": 3, "greater": 3, "greaterequ": 3, "less": 3, "lessequ": 3, "str": 3, "autogener": 3, "listofobject": 3, "specifii": 3, "l": 3, "fluxobj": 3, "doc": 3, "_multicorefva": 3, "_multicoreenvfva": 3}, "objects": {"cbmpy": [[3, 0, 0, "-", "CBCPLEX"], [3, 0, 0, "-", "CBCommon"], [3, 0, 0, "-", "CBConfig"], [3, 0, 0, "-", "CBDataStruct"], [3, 0, 0, "-", "CBGUI"], [3, 0, 0, "-", "CBModel"], [3, 0, 0, "-", "CBModelTools"], [3, 0, 0, "-", "CBMultiCore"], [3, 0, 0, "-", "CBMultiEnv"], [3, 0, 0, "-", "CBNetDB"], [3, 0, 0, "-", "CBPlot"], [3, 0, 0, "-", "CBRead"], [3, 0, 0, "-", "CBReadtxt"], [3, 0, 0, "-", "CBSolver"], [3, 0, 0, "-", "CBTools"], [3, 0, 0, "-", "CBWrite"], [3, 0, 0, "-", "CBWx"], [3, 0, 0, "-", "CBXML"], [3, 0, 0, "-", "_multicoreenvfva"], [3, 0, 0, "-", "_multicorefva"], [3, 0, 0, "-", "miriamids"]], "cbmpy.CBCPLEX": [[3, 1, 1, "", "cplx_FluxVariabilityAnalysis"], [3, 1, 1, "", "cplx_MinimizeNumActiveFluxes"], [3, 1, 1, "", "cplx_MinimizeSumOfAbsFluxes"], [3, 1, 1, "", "cplx_MultiFluxVariabilityAnalysis"], [3, 1, 1, "", "cplx_SolveMILP"], [3, 1, 1, "", "cplx_WriteFVAtoCSV"], [3, 1, 1, "", "cplx_analyzeModel"], [3, 1, 1, "", "cplx_constructLPfromFBA"], [3, 1, 1, "", "cplx_fixConSense"], [3, 1, 1, "", "cplx_func_GetCPXandPresolve"], [3, 1, 1, "", "cplx_func_SetObjectiveFunctionAsConstraint"], [3, 1, 1, "", "cplx_getCPLEXModelFromLP"], [3, 1, 1, "", "cplx_getDualValues"], [3, 1, 1, "", "cplx_getModelFromLP"], [3, 1, 1, "", "cplx_getModelFromObj"], [3, 1, 1, "", "cplx_getOptimalSolution"], [3, 1, 1, "", "cplx_getOptimalSolution2"], [3, 1, 1, "", "cplx_getReducedCosts"], [3, 1, 1, "", "cplx_getSensitivities"], [3, 1, 1, "", "cplx_getShadowPrices"], [3, 1, 1, "", "cplx_getSolutionStatus"], [3, 1, 1, "", "cplx_runInputScan"], [3, 1, 1, "", "cplx_setFBAsolutionToModel"], [3, 1, 1, "", "cplx_setMIPGapTolerance"], [3, 1, 1, "", "cplx_setObjective"], [3, 1, 1, "", "cplx_setObjective2"], [3, 1, 1, "", "cplx_setOutputStreams"], [3, 1, 1, "", "cplx_setSolutionStatusToModel"], [3, 1, 1, "", "cplx_singleGeneScan"], [3, 1, 1, "", "cplx_singleReactionDeletionScan"], [3, 1, 1, "", "cplx_writeLPsolution"], [3, 1, 1, "", "cplx_writeLPtoLPTfile"], [3, 1, 1, "", "getReducedCosts"], [3, 1, 1, "", "setReducedCosts"]], "cbmpy.CBCommon": [[3, 2, 1, "", "ComboGen"], [3, 2, 1, "", "MIRIAMannotation"], [3, 2, 1, "", "StructMatrix"], [3, 2, 1, "", "StructMatrixLP"], [3, 1, 1, "", "checkChemFormula"], [3, 1, 1, "", "checkId"], [3, 1, 1, "", "createAssociationDictFromNode"], [3, 1, 1, "", "extractGeneIdsFromString"], [3, 1, 1, "", "fixId"], [3, 1, 1, "", "func_getAssociationStrFromGprDict"], [3, 1, 1, "", "getGPRasDictFromString"], [3, 1, 1, "", "parseGeneAssociation"], [3, 1, 1, "", "processSpeciesChargeChemFormulaAnnot"]], "cbmpy.CBCommon.MIRIAMannotation": [[3, 3, 1, "", "addIDorgURI"], [3, 3, 1, "", "addMIRIAMannotation"], [3, 3, 1, "", "checkEntity"], [3, 3, 1, "", "checkEntityPattern"], [3, 3, 1, "", "checkId"], [3, 3, 1, "", "deleteMIRIAMannotation"], [3, 3, 1, "", "getAllMIRIAMUris"], [3, 3, 1, "", "getAndViewUrisForQualifier"], [3, 3, 1, "", "getMIRIAMUrisForQualifier"], [3, 3, 1, "", "viewURL"]], "cbmpy.CBCommon.StructMatrix": [[3, 3, 1, "", "getColsByIdx"], [3, 3, 1, "", "getColsByName"], [3, 3, 1, "", "getIndexes"], [3, 3, 1, "", "getLabels"], [3, 3, 1, "", "getRowsByIdx"], [3, 3, 1, "", "getRowsByName"], [3, 3, 1, "", "setCol"], [3, 3, 1, "", "setRow"]], "cbmpy.CBCommon.StructMatrixLP": [[3, 3, 1, "", "getCopy"]], "cbmpy.CBConfig": [[3, 1, 1, "", "current_version"], [3, 1, 1, "", "current_version_tuple"]], "cbmpy.CBGUI": [[3, 1, 1, "", "loadCBGUI"]], "cbmpy.CBModel": [[3, 2, 1, "", "Compartment"], [3, 2, 1, "", "ConstraintComponent"], [3, 2, 1, "", "Fbase"], [3, 2, 1, "", "FluxBound"], [3, 2, 1, "", "FluxBoundBase"], [3, 2, 1, "", "FluxBoundLower"], [3, 2, 1, "", "FluxBoundUpper"], [3, 2, 1, "", "FluxObjective"], [3, 2, 1, "", "FluxObjectiveQuadratic"], [3, 2, 1, "", "Gene"], [3, 2, 1, "", "GeneProteinAssociation"], [3, 2, 1, "", "Group"], [3, 2, 1, "", "GroupMemberAttributes"], [3, 2, 1, "", "Model"], [3, 2, 1, "", "Objective"], [3, 2, 1, "", "Parameter"], [3, 2, 1, "", "Reaction"], [3, 2, 1, "", "ReactionNew"], [3, 2, 1, "", "Reagent"], [3, 2, 1, "", "Species"], [3, 2, 1, "", "UserDefinedConstraint"]], "cbmpy.CBModel.Compartment": [[3, 3, 1, "", "containsReactions"], [3, 3, 1, "", "containsSpecies"], [3, 3, 1, "", "getDimensions"], [3, 3, 1, "", "getSize"], [3, 3, 1, "", "setDimensions"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setSize"]], "cbmpy.CBModel.Fbase": [[3, 3, 1, "", "addMIRIAMannotation"], [3, 3, 1, "", "addMIRIAMuri"], [3, 3, 1, "", "clone"], [3, 3, 1, "", "deleteAnnotation"], [3, 3, 1, "", "deleteMIRIAMannotation"], [3, 3, 1, "", "getAnnotation"], [3, 3, 1, "", "getAnnotations"], [3, 3, 1, "", "getCompartmentId"], [3, 3, 1, "", "getId"], [3, 3, 1, "", "getMIRIAMannotations"], [3, 3, 1, "", "getMetaId"], [3, 3, 1, "", "getModel"], [3, 3, 1, "", "getName"], [3, 3, 1, "", "getNotes"], [3, 3, 1, "", "getPid"], [3, 3, 1, "", "getSBOterm"], [3, 3, 1, "", "hasAnnotation"], [3, 3, 1, "", "serialize"], [3, 3, 1, "", "serializeToDisk"], [3, 3, 1, "", "setAnnotation"], [3, 3, 1, "", "setCompartmentId"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setMetaId"], [3, 3, 1, "", "setName"], [3, 3, 1, "", "setNotes"], [3, 3, 1, "", "setPid"], [3, 3, 1, "", "setSBOterm"]], "cbmpy.CBModel.FluxBound": [[3, 3, 1, "", "getType"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "setReactionId"], [3, 3, 1, "", "setValue"]], "cbmpy.CBModel.FluxBoundBase": [[3, 3, 1, "", "getType"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "setValue"], [3, 4, 1, "", "value"]], "cbmpy.CBModel.Gene": [[3, 3, 1, "", "getLabel"], [3, 3, 1, "", "isActive"], [3, 3, 1, "", "resetActivity"], [3, 3, 1, "", "setActive"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setInactive"], [3, 3, 1, "", "setLabel"]], "cbmpy.CBModel.GeneProteinAssociation": [[3, 3, 1, "", "addAssociation"], [3, 3, 1, "", "addGeneref"], [3, 3, 1, "", "createAssociationAndGeneRefsFromString"], [3, 3, 1, "", "createAssociationAndGeneRefsFromTree"], [3, 3, 1, "", "deleteGeneFromAssociation"], [3, 3, 1, "", "deleteGeneref"], [3, 3, 1, "", "evalAssociation"], [3, 3, 1, "", "getActiveGenes"], [3, 3, 1, "", "getAssociationStr"], [3, 3, 1, "", "getGene"], [3, 3, 1, "", "getGeneIds"], [3, 3, 1, "", "getGeneLabels"], [3, 3, 1, "", "getGenes"], [3, 3, 1, "", "getProtein"], [3, 3, 1, "", "getTree"], [3, 3, 1, "", "getTreeCopy"], [3, 3, 1, "", "isProteinActive"], [3, 3, 1, "", "setAllGenesActive"], [3, 3, 1, "", "setAllGenesInactive"], [3, 3, 1, "", "setGeneActive"], [3, 3, 1, "", "setGeneInactive"], [3, 3, 1, "", "setProtein"], [3, 3, 1, "", "setTree"]], "cbmpy.CBModel.Group": [[3, 3, 1, "", "addMember"], [3, 3, 1, "", "addSharedMIRIAMannotation"], [3, 3, 1, "", "assignAllSharedPropertiesToMembers"], [3, 3, 1, "", "assignSharedAnnotationToMembers"], [3, 3, 1, "", "assignSharedMIRIAMannotationToMembers"], [3, 3, 1, "", "assignSharedNotesToMembers"], [3, 3, 1, "", "assignSharedSBOtermsToMembers"], [3, 3, 1, "", "clone"], [3, 3, 1, "", "deleteMember"], [3, 3, 1, "", "getKind"], [3, 3, 1, "", "getMember"], [3, 3, 1, "", "getMemberIDs"], [3, 3, 1, "", "getMembers"], [3, 3, 1, "", "getSharedAnnotations"], [3, 3, 1, "", "getSharedMIRIAMannotations"], [3, 3, 1, "", "getSharedNotes"], [3, 3, 1, "", "getSharedSBOterm"], [3, 3, 1, "", "hasMember"], [3, 3, 1, "", "serialize"], [3, 3, 1, "", "serializeToDisk"], [3, 3, 1, "", "setKind"], [3, 3, 1, "", "setSharedAnnotation"], [3, 3, 1, "", "setSharedNotes"], [3, 3, 1, "", "setSharedSBOterm"]], "cbmpy.CBModel.Model": [[3, 3, 1, "", "addCompartment"], [3, 3, 1, "", "addFluxBound"], [3, 3, 1, "", "addGPRAssociation"], [3, 3, 1, "", "addGene"], [3, 3, 1, "", "addGroup"], [3, 3, 1, "", "addMIRIAMannotation"], [3, 3, 1, "", "addModelCreator"], [3, 3, 1, "", "addObjective"], [3, 3, 1, "", "addParameter"], [3, 3, 1, "", "addReaction"], [3, 3, 1, "", "addSpecies"], [3, 3, 1, "", "addUserConstraint"], [3, 3, 1, "", "addUserDefinedConstraint"], [3, 3, 1, "", "buildStoichMatrix"], [3, 3, 1, "", "changeAllFluxBoundsWithValue"], [3, 3, 1, "", "clone"], [3, 3, 1, "", "convertUserConstraintsToUserDefinedConstraints"], [3, 3, 1, "", "copyUserDefinedConstraintsToUserConstraints"], [3, 3, 1, "", "createCompartment"], [3, 3, 1, "", "createGeneAssociationsFromAnnotations"], [3, 3, 1, "", "createGeneProteinAssociation"], [3, 3, 1, "", "createGeneProteinAssociationFromTree"], [3, 3, 1, "", "createGroup"], [3, 3, 1, "", "createObjectiveFunction"], [3, 3, 1, "", "createParameter"], [3, 3, 1, "", "createReaction"], [3, 3, 1, "", "createReactionBounds"], [3, 3, 1, "", "createReactionLowerBound"], [3, 3, 1, "", "createReactionNew"], [3, 3, 1, "", "createReactionReagent"], [3, 3, 1, "", "createReactionUpperBound"], [3, 3, 1, "", "createSingleGeneEffectMap"], [3, 3, 1, "", "createSpecies"], [3, 3, 1, "", "createUserDefinedConstraint"], [3, 3, 1, "", "deleteAllFluxBoundsWithValue"], [3, 3, 1, "", "deleteBoundsForReactionId"], [3, 3, 1, "", "deleteCompartment"], [3, 3, 1, "", "deleteGPRAssociation"], [3, 3, 1, "", "deleteGene"], [3, 3, 1, "", "deleteGeneByLabel"], [3, 3, 1, "", "deleteGroup"], [3, 3, 1, "", "deleteNonReactingSpecies"], [3, 3, 1, "", "deleteObjective"], [3, 3, 1, "", "deleteReactionAndBounds"], [3, 3, 1, "", "deleteSpecies"], [3, 3, 1, "", "emptyUndelete"], [3, 3, 1, "", "exportFVAdata"], [3, 3, 1, "", "exportUserConstraints"], [3, 3, 1, "", "findFluxesForConnectedSpecies"], [3, 3, 1, "", "getActiveObjective"], [3, 3, 1, "", "getActiveObjectiveReactionIds"], [3, 3, 1, "", "getActiveObjectiveStoichiometry"], [3, 3, 1, "", "getAllFluxBounds"], [3, 3, 1, "", "getAllGeneActivities"], [3, 3, 1, "", "getAllGeneProteinAssociations"], [3, 3, 1, "", "getAllProteinActivities"], [3, 3, 1, "", "getAllProteinGeneAssociations"], [3, 3, 1, "", "getBoundarySpeciesIds"], [3, 3, 1, "", "getCompartment"], [3, 3, 1, "", "getCompartmentIds"], [3, 3, 1, "", "getCompartmentObjects"], [3, 3, 1, "", "getDescription"], [3, 3, 1, "", "getExchangeReactionIds"], [3, 3, 1, "", "getExchangeReactions"], [3, 3, 1, "", "getFluxBoundByID"], [3, 3, 1, "", "getFluxBoundByReactionID"], [3, 3, 1, "", "getFluxBoundIds"], [3, 3, 1, "", "getFluxBoundsByReactionID"], [3, 3, 1, "", "getFluxesAssociatedWithCompartments"], [3, 3, 1, "", "getFluxesAssociatedWithSpecies"], [3, 3, 1, "", "getGPRIdAssociatedWithGeneId"], [3, 3, 1, "", "getGPRIdAssociatedWithGeneLabel"], [3, 3, 1, "", "getGPRIds"], [3, 3, 1, "", "getGPRObjects"], [3, 3, 1, "", "getGPRassociation"], [3, 3, 1, "", "getGPRforReaction"], [3, 3, 1, "", "getGPRforReactionAsDict"], [3, 3, 1, "", "getGene"], [3, 3, 1, "", "getGeneByLabel"], [3, 3, 1, "", "getGeneIdFromLabel"], [3, 3, 1, "", "getGeneIds"], [3, 3, 1, "", "getGeneLabels"], [3, 3, 1, "", "getGeneObjects"], [3, 3, 1, "", "getGeneObjectsByLabel"], [3, 3, 1, "", "getGroup"], [3, 3, 1, "", "getGroupIds"], [3, 3, 1, "", "getGroupMembership"], [3, 3, 1, "", "getGroupNames"], [3, 3, 1, "", "getIrreversibleReactionIds"], [3, 3, 1, "", "getModel"], [3, 3, 1, "", "getModelCreators"], [3, 3, 1, "", "getObjFuncValue"], [3, 3, 1, "", "getObject"], [3, 3, 1, "", "getObjectiveIds"], [3, 3, 1, "", "getOptimalValue"], [3, 3, 1, "", "getParameter"], [3, 3, 1, "", "getReaction"], [3, 3, 1, "", "getReactionActivity"], [3, 3, 1, "", "getReactionBounds"], [3, 3, 1, "", "getReactionIds"], [3, 3, 1, "", "getReactionIdsAssociatedWithSpecies"], [3, 3, 1, "", "getReactionLowerBound"], [3, 3, 1, "", "getReactionNames"], [3, 3, 1, "", "getReactionObjects"], [3, 3, 1, "", "getReactionUpperBound"], [3, 3, 1, "", "getReactionValues"], [3, 3, 1, "", "getReversibleReactionIds"], [3, 3, 1, "", "getSolutionVector"], [3, 3, 1, "", "getSpecies"], [3, 3, 1, "", "getSpeciesIds"], [3, 3, 1, "", "getSpeciesObjects"], [3, 3, 1, "", "hasObject"], [3, 3, 1, "", "importUserConstraints"], [3, 3, 1, "", "registerObjectInGlobalStore"], [3, 3, 1, "", "renameObjectIds"], [3, 3, 1, "", "resetAllGenes"], [3, 3, 1, "", "resetAllInactiveGPRBounds"], [3, 3, 1, "", "serialize"], [3, 3, 1, "", "serializeToDisk"], [3, 3, 1, "", "setAllFluxBounds"], [3, 3, 1, "", "setAllInactiveGPRBounds"], [3, 3, 1, "", "setAllProteinActivities"], [3, 3, 1, "", "setBoundValueByName"], [3, 3, 1, "", "setCreatedDate"], [3, 3, 1, "", "setDescription"], [3, 3, 1, "", "setFluxBoundsFromDict"], [3, 3, 1, "", "setGeneActive"], [3, 3, 1, "", "setGeneInactive"], [3, 3, 1, "", "setModifiedDate"], [3, 3, 1, "", "setObjectiveFlux"], [3, 3, 1, "", "setPrefix"], [3, 3, 1, "", "setReactionBound"], [3, 3, 1, "", "setReactionBounds"], [3, 3, 1, "", "setReactionLowerBound"], [3, 3, 1, "", "setReactionUpperBound"], [3, 3, 1, "", "setSuffix"], [3, 3, 1, "", "sortReactionsById"], [3, 3, 1, "", "sortSpeciesById"], [3, 3, 1, "", "splitEqualityFluxBounds"], [3, 3, 1, "", "testGeneProteinAssociations"], [3, 3, 1, "", "unRegisterObjectInGlobalStore"], [3, 3, 1, "", "updateNetwork"]], "cbmpy.CBModel.Objective": [[3, 3, 1, "", "addFluxObjective"], [3, 3, 1, "", "createFluxObjectives"], [3, 3, 1, "", "createQuadraticFluxObjectives"], [3, 3, 1, "", "deleteAllFluxObjectives"], [3, 3, 1, "", "getFluxObjective"], [3, 3, 1, "", "getFluxObjectiveData"], [3, 3, 1, "", "getFluxObjectiveForReaction"], [3, 3, 1, "", "getFluxObjectiveIDs"], [3, 3, 1, "", "getFluxObjectiveReactions"], [3, 3, 1, "", "getFluxObjectives"], [3, 3, 1, "", "getLinearFluxObjectives"], [3, 3, 1, "", "getOperation"], [3, 3, 1, "", "getQuadraticBivariateFluxObjectives"], [3, 3, 1, "", "getQuadraticFluxObjectives"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "setOperation"], [3, 3, 1, "", "setValue"]], "cbmpy.CBModel.Parameter": [[3, 3, 1, "", "addAssociation"], [3, 3, 1, "", "deleteAssociation"], [3, 3, 1, "", "getAssociations"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "setValue"], [3, 4, 1, "", "value"]], "cbmpy.CBModel.Reaction": [[3, 3, 1, "", "addReagent"], [3, 3, 1, "", "changeId"], [3, 3, 1, "", "createReagent"], [3, 3, 1, "", "deactivateReaction"], [3, 3, 1, "", "deleteReagentWithSpeciesRef"], [3, 3, 1, "", "getEquation"], [3, 3, 1, "", "getFVAdata"], [3, 3, 1, "", "getGPRassociationString"], [3, 3, 1, "", "getLowerBound"], [3, 3, 1, "", "getProductIds"], [3, 3, 1, "", "getReagent"], [3, 3, 1, "", "getReagentObjIds"], [3, 3, 1, "", "getReagentRefs"], [3, 3, 1, "", "getReagentWithSpeciesRef"], [3, 3, 1, "", "getSpeciesIds"], [3, 3, 1, "", "getSpeciesObj"], [3, 3, 1, "", "getStoichiometry"], [3, 3, 1, "", "getSubstrateIds"], [3, 3, 1, "", "getUpperBound"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "reactivateReaction"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setLowerBound"], [3, 3, 1, "", "setStoichCoefficient"], [3, 3, 1, "", "setUpperBound"], [3, 3, 1, "", "setValue"]], "cbmpy.CBModel.ReactionNew": [[3, 3, 1, "", "deactivateReaction"], [3, 3, 1, "", "getLowerBound"], [3, 3, 1, "", "getUpperBound"], [3, 3, 1, "", "reactivateReaction"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setLowerBound"], [3, 3, 1, "", "setUpperBound"]], "cbmpy.CBModel.Reagent": [[3, 3, 1, "", "getCoefficient"], [3, 3, 1, "", "getRole"], [3, 3, 1, "", "getSpecies"], [3, 3, 1, "", "setCoefficient"], [3, 3, 1, "", "setSpecies"]], "cbmpy.CBModel.Species": [[3, 3, 1, "", "getCharge"], [3, 3, 1, "", "getChemFormula"], [3, 3, 1, "", "getReagentOf"], [3, 3, 1, "", "getValue"], [3, 3, 1, "", "isReagentOf"], [3, 3, 1, "", "setBoundary"], [3, 3, 1, "", "setCharge"], [3, 3, 1, "", "setChemFormula"], [3, 3, 1, "", "setId"], [3, 3, 1, "", "setReagentOf"], [3, 3, 1, "", "setValue"], [3, 3, 1, "", "unsetBoundary"]], "cbmpy.CBModel.UserDefinedConstraint": [[3, 3, 1, "", "addConstraintComponent"], [3, 3, 1, "", "createConstraintComponent"], [3, 3, 1, "", "getConstraintComponent"], [3, 3, 1, "", "getConstraintComponentData"], [3, 3, 1, "", "getConstraintComponentForVariable"], [3, 3, 1, "", "getConstraintComponentIDs"], [3, 3, 1, "", "getConstraintComponentVariableTypes"], [3, 3, 1, "", "getConstraintComponentVariables"], [3, 3, 1, "", "getConstraintComponents"]], "cbmpy.CBMultiCore": [[3, 1, 1, "", "grouper"], [3, 1, 1, "", "runMultiCoreFVA"]], "cbmpy.CBNetDB": [[3, 2, 1, "", "DBTools"], [3, 2, 1, "", "KeGGSequenceTools"], [3, 2, 1, "", "KeGGTools"], [3, 2, 1, "", "MIRIAMTools"], [3, 2, 1, "", "RESTClient"], [3, 2, 1, "", "SemanticSBML"]], "cbmpy.CBNetDB.DBTools": [[3, 3, 1, "", "checkEntryInColumn"], [3, 3, 1, "", "closeDB"], [3, 3, 1, "", "commitDB"], [3, 3, 1, "", "connectSQLiteDB"], [3, 3, 1, "", "createDBTable"], [3, 3, 1, "", "dumpTableToCSV"], [3, 3, 1, "", "dumpTableToTxt"], [3, 3, 1, "", "executeSQL"], [3, 3, 1, "", "fetchAll"], [3, 3, 1, "", "getCell"], [3, 3, 1, "", "getColumns"], [3, 3, 1, "", "getRow"], [3, 3, 1, "", "getTable"], [3, 3, 1, "", "insertData"], [3, 3, 1, "", "updateData"]], "cbmpy.CBNetDB.KeGGTools": [[3, 3, 1, "", "fetchSeqfromKeGG"]], "cbmpy.CBNetDB.RESTClient": [[3, 3, 1, "", "Close"], [3, 3, 1, "", "Connect"], [3, 3, 1, "", "Get"], [3, 3, 1, "", "GetLog"], [3, 3, 1, "", "Log"]], "cbmpy.CBNetDB.SemanticSBML": [[3, 3, 1, "", "parseXMLtoText"], [3, 3, 1, "", "quickLookup"], [3, 3, 1, "", "viewDataInWebrowser"]], "cbmpy.CBPlot": [[3, 1, 1, "", "plotFluxVariability"]], "cbmpy.CBRead": [[3, 1, 1, "", "loadModel"], [3, 1, 1, "", "readCOBRASBML"], [3, 1, 1, "", "readExcel97Model"], [3, 1, 1, "", "readSBML2FBA"], [3, 1, 1, "", "readSBML3FBC"], [3, 1, 1, "", "readSK_FVA"], [3, 1, 1, "", "readSK_vertex"], [3, 1, 1, "", "readSK_vertexOld"]], "cbmpy.CBReadtxt": [[3, 1, 1, "", "readCSV"]], "cbmpy.CBTools": [[3, 1, 1, "", "addFluxAsActiveObjective"], [3, 1, 1, "", "addGenesFromAnnotations"], [3, 1, 1, "", "addSinkReaction"], [3, 1, 1, "", "addSourceReaction"], [3, 1, 1, "", "addStoichToFBAModel"], [3, 1, 1, "", "checkExchangeReactions"], [3, 1, 1, "", "checkFluxBoundConsistency"], [3, 1, 1, "", "checkIds"], [3, 1, 1, "", "checkReactionBalanceElemental"], [3, 1, 1, "", "createTempFileName"], [3, 1, 1, "", "createZipArchive"], [3, 1, 1, "", "deSerialize"], [3, 1, 1, "", "deSerializeFromDisk"], [3, 1, 1, "", "exportArray2CSV"], [3, 1, 1, "", "exportArray2TXT"], [3, 1, 1, "", "exportLabelledArray"], [3, 1, 1, "", "exportLabelledArray2CSV"], [3, 1, 1, "", "exportLabelledArray2TXT"], [3, 1, 1, "", "exportLabelledArrayWithHeader"], [3, 1, 1, "", "exportLabelledArrayWithHeader2CSV"], [3, 1, 1, "", "exportLabelledArrayWithHeader2TXT"], [3, 1, 1, "", "exportLabelledLinkedList"], [3, 1, 1, "", "findDeadEndMetabolites"], [3, 1, 1, "", "findDeadEndReactions"], [3, 1, 1, "", "fixReversibility"], [3, 1, 1, "", "getBoundsDict"], [3, 1, 1, "", "getExchBoundsDict"], [3, 1, 1, "", "getModelGenesPerReaction"], [3, 1, 1, "", "loadObj"], [3, 1, 1, "", "merge2Models"], [3, 1, 1, "", "mergeGroups"], [3, 1, 1, "", "processBiGGannotationNote"], [3, 1, 1, "", "processBiGGchemFormula"], [3, 1, 1, "", "processExchangeReactions"], [3, 1, 1, "", "processSBMLAnnotationNotes"], [3, 1, 1, "", "removeFixedSpeciesReactions"], [3, 1, 1, "", "roundOffWithSense"], [3, 1, 1, "", "scanForReactionDuplicates"], [3, 1, 1, "", "scanForUnbalancedReactions"], [3, 1, 1, "", "setSpeciesPropertiesFromAnnotations"], [3, 1, 1, "", "splitReversibleReactions"], [3, 1, 1, "", "splitSingleReversibleReaction"], [3, 1, 1, "", "storeObj"], [3, 1, 1, "", "stringReplace"]], "cbmpy.CBWrite": [[3, 1, 1, "", "BuildHformatFluxBounds"], [3, 1, 1, "", "BuildLPConstraints"], [3, 1, 1, "", "BuildLPConstraintsMath"], [3, 1, 1, "", "BuildLPConstraintsRelaxed"], [3, 1, 1, "", "BuildLPConstraintsStrict"], [3, 1, 1, "", "BuildLPFluxBounds"], [3, 1, 1, "", "BuildLPUserConstraints"], [3, 1, 1, "", "WriteFVAdata"], [3, 1, 1, "", "WriteFVAtoCSV"], [3, 1, 1, "", "WriteModelHFormatFBA"], [3, 1, 1, "", "WriteModelHFormatFBA2"], [3, 1, 1, "", "WriteModelLP"], [3, 1, 1, "", "WriteModelLPOld"], [3, 1, 1, "", "WriteModelRaw"], [3, 1, 1, "", "convertExcelToFloat"], [3, 1, 1, "", "convertFloatToExcel"], [3, 1, 1, "", "exportModel"], [3, 1, 1, "", "generateBGID"], [3, 1, 1, "", "printFBASolution"], [3, 1, 1, "", "saveModel"], [3, 1, 1, "", "writeCOBRASBML"], [3, 1, 1, "", "writeFVAdata"], [3, 1, 1, "", "writeFVAtoCSV"], [3, 1, 1, "", "writeMinDistanceLPwithCost"], [3, 1, 1, "", "writeModelHFormatFBA"], [3, 1, 1, "", "writeModelHFormatFBA2"], [3, 1, 1, "", "writeModelInfoToFile"], [3, 1, 1, "", "writeModelLP"], [3, 1, 1, "", "writeModelLPOld"], [3, 1, 1, "", "writeModelRaw"], [3, 1, 1, "", "writeModelToCOMBINEarchive"], [3, 1, 1, "", "writeModelToExcel97"], [3, 1, 1, "", "writeOptimalSolution"], [3, 1, 1, "", "writeProteinCostToCSV"], [3, 1, 1, "", "writeReactionInfoToFile"], [3, 1, 1, "", "writeSBML2FBA"], [3, 1, 1, "", "writeSBML3FBC"], [3, 1, 1, "", "writeSBML3FBCV2"], [3, 1, 1, "", "writeSBML3FBCV3"], [3, 1, 1, "", "writeSensitivitiesToCSV"], [3, 1, 1, "", "writeSolutions"], [3, 1, 1, "", "writeSpeciesInfoToFile"], [3, 1, 1, "", "writeStoichiometricMatrix"]], "cbmpy.CBXML": [[3, 2, 1, "", "MLStripper"], [3, 5, 1, "", "SBML_NS"], [3, 1, 1, "", "sbml_convertCOBRASBMLtoFBC"], [3, 1, 1, "", "sbml_convertSBML3FBCToCOBRA"], [3, 1, 1, "", "sbml_createAssociationFromAST"], [3, 1, 1, "", "sbml_createAssociationFromTreeV2"], [3, 1, 1, "", "sbml_createModelL2"], [3, 1, 1, "", "sbml_exportSBML2FBAModel"], [3, 1, 1, "", "sbml_fileFindVersion"], [3, 1, 1, "", "sbml_fileValidate"], [3, 1, 1, "", "sbml_getCVterms"], [3, 1, 1, "", "sbml_getGPRasDictFBCv1"], [3, 1, 1, "", "sbml_getGPRasDictFBCv2"], [3, 1, 1, "", "sbml_getGeneRefs"], [3, 1, 1, "", "sbml_getNotes"], [3, 1, 1, "", "sbml_readCOBRANote"], [3, 1, 1, "", "sbml_readCOBRASBML"], [3, 1, 1, "", "sbml_readFBCv3KeyValuePairs"], [3, 1, 1, "", "sbml_readKeyValueDataAnnotation"], [3, 1, 1, "", "sbml_readSBML2FBA"], [3, 1, 1, "", "sbml_readSBML3FBC"], [3, 1, 1, "", "sbml_setAnnotationsL3Fbc"], [3, 1, 1, "", "sbml_setCVterms"], [3, 1, 1, "", "sbml_setCompartmentsL3"], [3, 1, 1, "", "sbml_setDescription"], [3, 1, 1, "", "sbml_setFBCv3KeyValuePairs"], [3, 1, 1, "", "sbml_setGroupsL3"], [3, 1, 1, "", "sbml_setNotes3"], [3, 1, 1, "", "sbml_setParametersL3Fbc"], [3, 1, 1, "", "sbml_setReactionsL2"], [3, 1, 1, "", "sbml_setReactionsL3Fbc"], [3, 1, 1, "", "sbml_setSpeciesL2"], [3, 1, 1, "", "sbml_setSpeciesL3"], [3, 1, 1, "", "sbml_setUnits"], [3, 1, 1, "", "sbml_setValidationOptions"], [3, 1, 1, "", "sbml_validateDocument"], [3, 1, 1, "", "sbml_writeAnnotationsAsCOBRANote"], [3, 1, 1, "", "sbml_writeCOBRASBML"], [3, 1, 1, "", "sbml_writeKeyValueDataAnnotation"], [3, 1, 1, "", "sbml_writeSBML2FBA"], [3, 1, 1, "", "sbml_writeSBML3FBC"], [3, 1, 1, "", "setCBSBOterm"], [3, 1, 1, "", "with_metaclass"], [3, 1, 1, "", "xml_addSBML2FBAFluxBound"], [3, 1, 1, "", "xml_addSBML2FBAObjective"], [3, 1, 1, "", "xml_createListOfFluxObjectives"], [3, 1, 1, "", "xml_createSBML2FBADoc"], [3, 1, 1, "", "xml_createSBML2FBAObjective"], [3, 1, 1, "", "xml_getSBML2FBAannotation"], [3, 1, 1, "", "xml_stripTags"], [3, 1, 1, "", "xml_viewSBML2FBAXML"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"cbmpy": [0, 1, 3], "refer": [0, 3], "guid": [0, 1], "indic": 0, "tabl": 0, "instal": 1, "introduct": [1, 2], "support": 1, "python": 1, "standard": 1, "librari": 1, "modul": [1, 3], "requir": 1, "bind": 1, "overview": 1, "pypi": 1, "minim": 1, "normal": 1, "full": 1, "user": 1, "tool": 1, "ubuntu": 1, "linux": 1, "2": 1, "7": 1, "libsbml": 1, "glpk": 1, "microsoft": 1, "window": 1, "anaconda": 1, "x": 1, "y": 1, "optmiz": 1, "1": 1, "ibm": 1, "cplex": 1, "optim": 1, "studio": 1, "academ": 1, "test": 1, "your": 1, "new": 1, "http": 1, "sourceforg": 1, "net": 1, "14": 1, "04": 1, "python2": 1, "pyscesmarinercbm": 1, "soaplib": 1, "marin": 1, "python3": 1, "appl": 1, "macintosh": 1, "o": 1, "pysc": 1, "cbm": 1, "depend": 1, "cherrypi": 1, "libxml": 1, "cbcommon": 3, "cbconfig": 3, "cbcplex": 3, "cbdatastruct": 3, "cbgui": 3, "cbmodel": 3, "cbmodeltool": 3, "cbmulticor": 3, "cbmultienv": 3, "cbnetdb": 3, "cbplot": 3, "cbread": 3, "cbreadtxt": 3, "cbsolver": 3, "cbtool": 3, "cbwrite": 3, "cbwx": 3, "cbxml": 3, "multicorefva": 3, "multicoreenvfva": 3}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"CBMPy Reference Guide": [[0, "cbmpy-reference-guide"]], "Indices and tables": [[0, "indices-and-tables"]], "CBMPy: Installation Guide": [[1, "cbmpy-installation-guide"]], "Introduction": [[1, "introduction"], [2, "introduction"]], "Support": [[1, "support"]], "Python standard library modules": [[1, "python-standard-library-modules"]], "Required libraries (Python bindings)": [[1, "required-libraries-python-bindings"]], "Overview": [[1, "overview"]], "PyPI": [[1, "pypi"]], "Minimal": [[1, "minimal"]], "Normal": [[1, "normal"]], "Full": [[1, "full"]], "User tools": [[1, "user-tools"]], "Installing on Ubuntu Linux": [[1, "installing-on-ubuntu-linux"]], "Python 2.7 (full install)": [[1, "python-2-7-full-install"]], "libSBML": [[1, "libsbml"], [1, "id1"]], "glpk/python-glpk": [[1, "glpk-python-glpk"], [1, "id2"]], "Installing on Microsoft Windows": [[1, "installing-on-microsoft-windows"]], "Anaconda": [[1, "anaconda"]], "Python(x,y)": [[1, "python-x-y"]], "Installing CBMPy": [[1, "installing-cbmpy"]], "Installing libSBML with Python bindings": [[1, "installing-libsbml-with-python-bindings"]], "Optmization (1): IBM cplex optimization studio (Academic)": [[1, "optmization-1-ibm-cplex-optimization-studio-academic"]], "Optmization (2): GLPK": [[1, "optmization-2-glpk"]], "Testing your new installation": [[1, "testing-your-new-installation"]], "Install CBMPy (http://cbmpy.sourceforge.net)": [[1, "install-cbmpy-http-cbmpy-sourceforge-net"]], "Linux: Ubuntu": [[1, "linux-ubuntu"]], "Linux: Ubuntu 14.04": [[1, "linux-ubuntu-14-04"]], "Python2": [[1, "python2"]], "CBMPy": [[1, "cbmpy"]], "Installing PyscesMarinerCBM": [[1, "installing-pyscesmarinercbm"]], "Install soaplib": [[1, "install-soaplib"]], "Install Mariner": [[1, "install-mariner"]], "Test installation": [[1, "test-installation"]], "Python3": [[1, "python3"]], "Apple Macintosh: OS X": [[1, "apple-macintosh-os-x"]], "Installing PySCeS-CBM Mariner (Microsoft Windows and Linux)": [[1, "installing-pysces-cbm-mariner-microsoft-windows-and-linux"]], "Dependencies: CherryPy, libXML and SOAPlib": [[1, "dependencies-cherrypy-libxml-and-soaplib"]], "PySCeS-CBM Mariner (http://cbmpy.sourceforge.net)": [[1, "pysces-cbm-mariner-http-cbmpy-sourceforge-net"]], "CBMPy Module Reference": [[3, "module-cbmpy.CBCommon"]], "CBMPy: CBCommon module": [[3, "cbmpy-cbcommon-module"]], "CBMPy: CBConfig module": [[3, "cbmpy-cbconfig-module"]], "CBMPy: CBCPLEX module": [[3, "cbmpy-cbcplex-module"]], "CBMPy: CBDataStruct module": [[3, "cbmpy-cbdatastruct-module"]], "CBMPy: CBGUI module": [[3, "cbmpy-cbgui-module"]], "CBMPy: CBModel module": [[3, "cbmpy-cbmodel-module"]], "CBMPy: CBModelTools module": [[3, "cbmpy-cbmodeltools-module"]], "CBMPy: CBMultiCore module": [[3, "cbmpy-cbmulticore-module"]], "CBMPy: CBMultiEnv module": [[3, "cbmpy-cbmultienv-module"]], "CBMPy: CBNetDB module": [[3, "cbmpy-cbnetdb-module"]], "CBMPy: CBPlot module": [[3, "cbmpy-cbplot-module"]], "CBMPy: CBRead module": [[3, "cbmpy-cbread-module"]], "CBMPy: CBReadtxt module": [[3, "cbmpy-cbreadtxt-module"]], "CBMPy: CBSolver module": [[3, "cbmpy-cbsolver-module"]], "CBMPy: CBTools module": [[3, "cbmpy-cbtools-module"]], "CBMPy: CBWrite module": [[3, "cbmpy-cbwrite-module"]], "CBMPy: CBWx module": [[3, "cbmpy-cbwx-module"]], "CBMPy: CBXML module": [[3, "cbmpy-cbxml-module"]], "CBMPy: MultiCoreFVA module": [[3, "cbmpy-multicorefva-module"]], "CBMPy: MultiCoreEnvFVA module": [[3, "cbmpy-multicoreenvfva-module"]]}, "indexentries": {"buildhformatfluxbounds() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildHformatFluxBounds"]], "buildlpconstraints() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPConstraints"]], "buildlpconstraintsmath() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPConstraintsMath"]], "buildlpconstraintsrelaxed() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPConstraintsRelaxed"]], "buildlpconstraintsstrict() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPConstraintsStrict"]], "buildlpfluxbounds() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPFluxBounds"]], "buildlpuserconstraints() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.BuildLPUserConstraints"]], "close() (restclient method)": [[3, "cbmpy.CBNetDB.RESTClient.Close"]], "combogen (class in cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.ComboGen"]], "compartment (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Compartment"]], "connect() (restclient method)": [[3, "cbmpy.CBNetDB.RESTClient.Connect"]], "constraintcomponent (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.ConstraintComponent"]], "dbtools (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.DBTools"]], "fbase (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Fbase"]], "fluxbound (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxBound"]], "fluxboundbase (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxBoundBase"]], "fluxboundlower (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxBoundLower"]], "fluxboundupper (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxBoundUpper"]], "fluxobjective (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxObjective"]], "fluxobjectivequadratic (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.FluxObjectiveQuadratic"]], "gene (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Gene"]], "geneproteinassociation (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.GeneProteinAssociation"]], "get() (restclient method)": [[3, "cbmpy.CBNetDB.RESTClient.Get"]], "getlog() (restclient method)": [[3, "cbmpy.CBNetDB.RESTClient.GetLog"]], "group (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Group"]], "groupmemberattributes (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.GroupMemberAttributes"]], "keggsequencetools (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.KeGGSequenceTools"]], "keggtools (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.KeGGTools"]], "log() (restclient method)": [[3, "cbmpy.CBNetDB.RESTClient.Log"]], "miriamtools (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.MIRIAMTools"]], "miriamannotation (class in cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.MIRIAMannotation"]], "mlstripper (class in cbmpy.cbxml)": [[3, "cbmpy.CBXML.MLStripper"]], "model (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Model"]], "objective (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Objective"]], "parameter (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Parameter"]], "restclient (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.RESTClient"]], "reaction (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Reaction"]], "reactionnew (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.ReactionNew"]], "reagent (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Reagent"]], "sbml_ns (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.SBML_NS"]], "semanticsbml (class in cbmpy.cbnetdb)": [[3, "cbmpy.CBNetDB.SemanticSBML"]], "species (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.Species"]], "structmatrix (class in cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.StructMatrix"]], "structmatrixlp (class in cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.StructMatrixLP"]], "userdefinedconstraint (class in cbmpy.cbmodel)": [[3, "cbmpy.CBModel.UserDefinedConstraint"]], "writefvadata() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteFVAdata"], [3, "cbmpy.CBWrite.writeFVAdata"]], "writefvatocsv() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteFVAtoCSV"], [3, "cbmpy.CBWrite.writeFVAtoCSV"]], "writemodelhformatfba() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteModelHFormatFBA"], [3, "cbmpy.CBWrite.writeModelHFormatFBA"]], "writemodelhformatfba2() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteModelHFormatFBA2"], [3, "cbmpy.CBWrite.writeModelHFormatFBA2"]], "writemodellp() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteModelLP"], [3, "cbmpy.CBWrite.writeModelLP"]], "writemodellpold() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteModelLPOld"], [3, "cbmpy.CBWrite.writeModelLPOld"]], "writemodelraw() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.WriteModelRaw"], [3, "cbmpy.CBWrite.writeModelRaw"]], "addassociation() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.addAssociation"]], "addassociation() (parameter method)": [[3, "cbmpy.CBModel.Parameter.addAssociation"]], "addcompartment() (model method)": [[3, "cbmpy.CBModel.Model.addCompartment"]], "addconstraintcomponent() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.addConstraintComponent"]], "addfluxasactiveobjective() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.addFluxAsActiveObjective"]], "addfluxbound() (model method)": [[3, "cbmpy.CBModel.Model.addFluxBound"]], "addfluxobjective() (objective method)": [[3, "cbmpy.CBModel.Objective.addFluxObjective"]], "addgprassociation() (model method)": [[3, "cbmpy.CBModel.Model.addGPRAssociation"]], "addgene() (model method)": [[3, "cbmpy.CBModel.Model.addGene"]], "addgeneref() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.addGeneref"]], "addgenesfromannotations() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.addGenesFromAnnotations"]], "addgroup() (model method)": [[3, "cbmpy.CBModel.Model.addGroup"]], "addidorguri() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.addIDorgURI"]], "addmiriamannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.addMIRIAMannotation"]], "addmiriamannotation() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.addMIRIAMannotation"]], "addmiriamannotation() (model method)": [[3, "cbmpy.CBModel.Model.addMIRIAMannotation"]], "addmiriamuri() (fbase method)": [[3, "cbmpy.CBModel.Fbase.addMIRIAMuri"]], "addmember() (group method)": [[3, "cbmpy.CBModel.Group.addMember"]], "addmodelcreator() (model method)": [[3, "cbmpy.CBModel.Model.addModelCreator"]], "addobjective() (model method)": [[3, "cbmpy.CBModel.Model.addObjective"]], "addparameter() (model method)": [[3, "cbmpy.CBModel.Model.addParameter"]], "addreaction() (model method)": [[3, "cbmpy.CBModel.Model.addReaction"]], "addreagent() (reaction method)": [[3, "cbmpy.CBModel.Reaction.addReagent"]], "addsharedmiriamannotation() (group method)": [[3, "cbmpy.CBModel.Group.addSharedMIRIAMannotation"]], "addsinkreaction() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.addSinkReaction"]], "addsourcereaction() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.addSourceReaction"]], "addspecies() (model method)": [[3, "cbmpy.CBModel.Model.addSpecies"]], "addstoichtofbamodel() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.addStoichToFBAModel"]], "adduserconstraint() (model method)": [[3, "cbmpy.CBModel.Model.addUserConstraint"]], "adduserdefinedconstraint() (model method)": [[3, "cbmpy.CBModel.Model.addUserDefinedConstraint"]], "assignallsharedpropertiestomembers() (group method)": [[3, "cbmpy.CBModel.Group.assignAllSharedPropertiesToMembers"]], "assignsharedannotationtomembers() (group method)": [[3, "cbmpy.CBModel.Group.assignSharedAnnotationToMembers"]], "assignsharedmiriamannotationtomembers() (group method)": [[3, "cbmpy.CBModel.Group.assignSharedMIRIAMannotationToMembers"]], "assignsharednotestomembers() (group method)": [[3, "cbmpy.CBModel.Group.assignSharedNotesToMembers"]], "assignsharedsbotermstomembers() (group method)": [[3, "cbmpy.CBModel.Group.assignSharedSBOtermsToMembers"]], "buildstoichmatrix() (model method)": [[3, "cbmpy.CBModel.Model.buildStoichMatrix"]], "cbmpy.cbcplex": [[3, "module-cbmpy.CBCPLEX"]], "cbmpy.cbcommon": [[3, "module-cbmpy.CBCommon"]], "cbmpy.cbconfig": [[3, "module-cbmpy.CBConfig"]], "cbmpy.cbdatastruct": [[3, "module-cbmpy.CBDataStruct"]], "cbmpy.cbgui": [[3, "module-cbmpy.CBGUI"]], "cbmpy.cbmodel": [[3, "module-cbmpy.CBModel"]], "cbmpy.cbmodeltools": [[3, "module-cbmpy.CBModelTools"]], "cbmpy.cbmulticore": [[3, "module-cbmpy.CBMultiCore"]], "cbmpy.cbmultienv": [[3, "module-cbmpy.CBMultiEnv"]], "cbmpy.cbnetdb": [[3, "module-cbmpy.CBNetDB"]], "cbmpy.cbplot": [[3, "module-cbmpy.CBPlot"]], "cbmpy.cbread": [[3, "module-cbmpy.CBRead"]], "cbmpy.cbreadtxt": [[3, "module-cbmpy.CBReadtxt"]], "cbmpy.cbsolver": [[3, "module-cbmpy.CBSolver"]], "cbmpy.cbtools": [[3, "module-cbmpy.CBTools"]], "cbmpy.cbwrite": [[3, "module-cbmpy.CBWrite"]], "cbmpy.cbwx": [[3, "module-cbmpy.CBWx"]], "cbmpy.cbxml": [[3, "module-cbmpy.CBXML"]], "cbmpy._multicoreenvfva": [[3, "module-cbmpy._multicoreenvfva"]], "cbmpy._multicorefva": [[3, "module-cbmpy._multicorefva"]], "cbmpy.miriamids": [[3, "module-cbmpy.miriamids"]], "changeallfluxboundswithvalue() (model method)": [[3, "cbmpy.CBModel.Model.changeAllFluxBoundsWithValue"]], "changeid() (reaction method)": [[3, "cbmpy.CBModel.Reaction.changeId"]], "checkchemformula() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.checkChemFormula"]], "checkentity() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.checkEntity"]], "checkentitypattern() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.checkEntityPattern"]], "checkentryincolumn() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.checkEntryInColumn"]], "checkexchangereactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.checkExchangeReactions"]], "checkfluxboundconsistency() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.checkFluxBoundConsistency"]], "checkid() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.checkId"]], "checkid() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.checkId"]], "checkids() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.checkIds"]], "checkreactionbalanceelemental() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.checkReactionBalanceElemental"]], "clone() (fbase method)": [[3, "cbmpy.CBModel.Fbase.clone"]], "clone() (group method)": [[3, "cbmpy.CBModel.Group.clone"]], "clone() (model method)": [[3, "cbmpy.CBModel.Model.clone"]], "closedb() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.closeDB"]], "commitdb() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.commitDB"]], "connectsqlitedb() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.connectSQLiteDB"]], "containsreactions() (compartment method)": [[3, "cbmpy.CBModel.Compartment.containsReactions"]], "containsspecies() (compartment method)": [[3, "cbmpy.CBModel.Compartment.containsSpecies"]], "convertexceltofloat() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.convertExcelToFloat"]], "convertfloattoexcel() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.convertFloatToExcel"]], "convertuserconstraintstouserdefinedconstraints() (model method)": [[3, "cbmpy.CBModel.Model.convertUserConstraintsToUserDefinedConstraints"]], "copyuserdefinedconstraintstouserconstraints() (model method)": [[3, "cbmpy.CBModel.Model.copyUserDefinedConstraintsToUserConstraints"]], "cplx_fluxvariabilityanalysis() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_FluxVariabilityAnalysis"]], "cplx_minimizenumactivefluxes() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_MinimizeNumActiveFluxes"]], "cplx_minimizesumofabsfluxes() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_MinimizeSumOfAbsFluxes"]], "cplx_multifluxvariabilityanalysis() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_MultiFluxVariabilityAnalysis"]], "cplx_solvemilp() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_SolveMILP"]], "cplx_writefvatocsv() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_WriteFVAtoCSV"]], "cplx_analyzemodel() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_analyzeModel"]], "cplx_constructlpfromfba() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_constructLPfromFBA"]], "cplx_fixconsense() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_fixConSense"]], "cplx_func_getcpxandpresolve() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_func_GetCPXandPresolve"]], "cplx_func_setobjectivefunctionasconstraint() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_func_SetObjectiveFunctionAsConstraint"]], "cplx_getcplexmodelfromlp() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getCPLEXModelFromLP"]], "cplx_getdualvalues() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getDualValues"]], "cplx_getmodelfromlp() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getModelFromLP"]], "cplx_getmodelfromobj() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getModelFromObj"]], "cplx_getoptimalsolution() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getOptimalSolution"]], "cplx_getoptimalsolution2() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getOptimalSolution2"]], "cplx_getreducedcosts() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getReducedCosts"]], "cplx_getsensitivities() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getSensitivities"]], "cplx_getshadowprices() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getShadowPrices"]], "cplx_getsolutionstatus() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_getSolutionStatus"]], "cplx_runinputscan() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_runInputScan"]], "cplx_setfbasolutiontomodel() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setFBAsolutionToModel"]], "cplx_setmipgaptolerance() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setMIPGapTolerance"]], "cplx_setobjective() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setObjective"]], "cplx_setobjective2() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setObjective2"]], "cplx_setoutputstreams() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setOutputStreams"]], "cplx_setsolutionstatustomodel() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_setSolutionStatusToModel"]], "cplx_singlegenescan() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_singleGeneScan"]], "cplx_singlereactiondeletionscan() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_singleReactionDeletionScan"]], "cplx_writelpsolution() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_writeLPsolution"]], "cplx_writelptolptfile() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.cplx_writeLPtoLPTfile"]], "createassociationandgenerefsfromstring() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.createAssociationAndGeneRefsFromString"]], "createassociationandgenerefsfromtree() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.createAssociationAndGeneRefsFromTree"]], "createassociationdictfromnode() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.createAssociationDictFromNode"]], "createcompartment() (model method)": [[3, "cbmpy.CBModel.Model.createCompartment"]], "createconstraintcomponent() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.createConstraintComponent"]], "createdbtable() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.createDBTable"]], "createfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.createFluxObjectives"]], "creategeneassociationsfromannotations() (model method)": [[3, "cbmpy.CBModel.Model.createGeneAssociationsFromAnnotations"]], "creategeneproteinassociation() (model method)": [[3, "cbmpy.CBModel.Model.createGeneProteinAssociation"]], "creategeneproteinassociationfromtree() (model method)": [[3, "cbmpy.CBModel.Model.createGeneProteinAssociationFromTree"]], "creategroup() (model method)": [[3, "cbmpy.CBModel.Model.createGroup"]], "createobjectivefunction() (model method)": [[3, "cbmpy.CBModel.Model.createObjectiveFunction"]], "createparameter() (model method)": [[3, "cbmpy.CBModel.Model.createParameter"]], "createquadraticfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.createQuadraticFluxObjectives"]], "createreaction() (model method)": [[3, "cbmpy.CBModel.Model.createReaction"]], "createreactionbounds() (model method)": [[3, "cbmpy.CBModel.Model.createReactionBounds"]], "createreactionlowerbound() (model method)": [[3, "cbmpy.CBModel.Model.createReactionLowerBound"]], "createreactionnew() (model method)": [[3, "cbmpy.CBModel.Model.createReactionNew"]], "createreactionreagent() (model method)": [[3, "cbmpy.CBModel.Model.createReactionReagent"]], "createreactionupperbound() (model method)": [[3, "cbmpy.CBModel.Model.createReactionUpperBound"]], "createreagent() (reaction method)": [[3, "cbmpy.CBModel.Reaction.createReagent"]], "createsinglegeneeffectmap() (model method)": [[3, "cbmpy.CBModel.Model.createSingleGeneEffectMap"]], "createspecies() (model method)": [[3, "cbmpy.CBModel.Model.createSpecies"]], "createtempfilename() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.createTempFileName"]], "createuserdefinedconstraint() (model method)": [[3, "cbmpy.CBModel.Model.createUserDefinedConstraint"]], "createziparchive() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.createZipArchive"]], "current_version() (in module cbmpy.cbconfig)": [[3, "cbmpy.CBConfig.current_version"]], "current_version_tuple() (in module cbmpy.cbconfig)": [[3, "cbmpy.CBConfig.current_version_tuple"]], "deserialize() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.deSerialize"]], "deserializefromdisk() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.deSerializeFromDisk"]], "deactivatereaction() (reaction method)": [[3, "cbmpy.CBModel.Reaction.deactivateReaction"]], "deactivatereaction() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.deactivateReaction"]], "deleteallfluxboundswithvalue() (model method)": [[3, "cbmpy.CBModel.Model.deleteAllFluxBoundsWithValue"]], "deleteallfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.deleteAllFluxObjectives"]], "deleteannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.deleteAnnotation"]], "deleteassociation() (parameter method)": [[3, "cbmpy.CBModel.Parameter.deleteAssociation"]], "deleteboundsforreactionid() (model method)": [[3, "cbmpy.CBModel.Model.deleteBoundsForReactionId"]], "deletecompartment() (model method)": [[3, "cbmpy.CBModel.Model.deleteCompartment"]], "deletegprassociation() (model method)": [[3, "cbmpy.CBModel.Model.deleteGPRAssociation"]], "deletegene() (model method)": [[3, "cbmpy.CBModel.Model.deleteGene"]], "deletegenebylabel() (model method)": [[3, "cbmpy.CBModel.Model.deleteGeneByLabel"]], "deletegenefromassociation() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.deleteGeneFromAssociation"]], "deletegeneref() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.deleteGeneref"]], "deletegroup() (model method)": [[3, "cbmpy.CBModel.Model.deleteGroup"]], "deletemiriamannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.deleteMIRIAMannotation"]], "deletemiriamannotation() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.deleteMIRIAMannotation"]], "deletemember() (group method)": [[3, "cbmpy.CBModel.Group.deleteMember"]], "deletenonreactingspecies() (model method)": [[3, "cbmpy.CBModel.Model.deleteNonReactingSpecies"]], "deleteobjective() (model method)": [[3, "cbmpy.CBModel.Model.deleteObjective"]], "deletereactionandbounds() (model method)": [[3, "cbmpy.CBModel.Model.deleteReactionAndBounds"]], "deletereagentwithspeciesref() (reaction method)": [[3, "cbmpy.CBModel.Reaction.deleteReagentWithSpeciesRef"]], "deletespecies() (model method)": [[3, "cbmpy.CBModel.Model.deleteSpecies"]], "dumptabletocsv() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.dumpTableToCSV"]], "dumptabletotxt() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.dumpTableToTxt"]], "emptyundelete() (model method)": [[3, "cbmpy.CBModel.Model.emptyUndelete"]], "evalassociation() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.evalAssociation"]], "executesql() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.executeSQL"]], "exportarray2csv() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportArray2CSV"]], "exportarray2txt() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportArray2TXT"]], "exportfvadata() (model method)": [[3, "cbmpy.CBModel.Model.exportFVAdata"]], "exportlabelledarray() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArray"]], "exportlabelledarray2csv() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArray2CSV"]], "exportlabelledarray2txt() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArray2TXT"]], "exportlabelledarraywithheader() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArrayWithHeader"]], "exportlabelledarraywithheader2csv() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArrayWithHeader2CSV"]], "exportlabelledarraywithheader2txt() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledArrayWithHeader2TXT"]], "exportlabelledlinkedlist() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.exportLabelledLinkedList"]], "exportmodel() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.exportModel"]], "exportuserconstraints() (model method)": [[3, "cbmpy.CBModel.Model.exportUserConstraints"]], "extractgeneidsfromstring() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.extractGeneIdsFromString"]], "fetchall() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.fetchAll"]], "fetchseqfromkegg() (keggtools method)": [[3, "cbmpy.CBNetDB.KeGGTools.fetchSeqfromKeGG"]], "finddeadendmetabolites() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.findDeadEndMetabolites"]], "finddeadendreactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.findDeadEndReactions"]], "findfluxesforconnectedspecies() (model method)": [[3, "cbmpy.CBModel.Model.findFluxesForConnectedSpecies"]], "fixid() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.fixId"]], "fixreversibility() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.fixReversibility"]], "func_getassociationstrfromgprdict() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.func_getAssociationStrFromGprDict"]], "generatebgid() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.generateBGID"]], "getactivegenes() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getActiveGenes"]], "getactiveobjective() (model method)": [[3, "cbmpy.CBModel.Model.getActiveObjective"]], "getactiveobjectivereactionids() (model method)": [[3, "cbmpy.CBModel.Model.getActiveObjectiveReactionIds"]], "getactiveobjectivestoichiometry() (model method)": [[3, "cbmpy.CBModel.Model.getActiveObjectiveStoichiometry"]], "getallfluxbounds() (model method)": [[3, "cbmpy.CBModel.Model.getAllFluxBounds"]], "getallgeneactivities() (model method)": [[3, "cbmpy.CBModel.Model.getAllGeneActivities"]], "getallgeneproteinassociations() (model method)": [[3, "cbmpy.CBModel.Model.getAllGeneProteinAssociations"]], "getallmiriamuris() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.getAllMIRIAMUris"]], "getallproteinactivities() (model method)": [[3, "cbmpy.CBModel.Model.getAllProteinActivities"]], "getallproteingeneassociations() (model method)": [[3, "cbmpy.CBModel.Model.getAllProteinGeneAssociations"]], "getandviewurisforqualifier() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.getAndViewUrisForQualifier"]], "getannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getAnnotation"]], "getannotations() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getAnnotations"]], "getassociationstr() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getAssociationStr"]], "getassociations() (parameter method)": [[3, "cbmpy.CBModel.Parameter.getAssociations"]], "getboundaryspeciesids() (model method)": [[3, "cbmpy.CBModel.Model.getBoundarySpeciesIds"]], "getboundsdict() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.getBoundsDict"]], "getcell() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.getCell"]], "getcharge() (species method)": [[3, "cbmpy.CBModel.Species.getCharge"]], "getchemformula() (species method)": [[3, "cbmpy.CBModel.Species.getChemFormula"]], "getcoefficient() (reagent method)": [[3, "cbmpy.CBModel.Reagent.getCoefficient"]], "getcolsbyidx() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getColsByIdx"]], "getcolsbyname() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getColsByName"]], "getcolumns() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.getColumns"]], "getcompartment() (model method)": [[3, "cbmpy.CBModel.Model.getCompartment"]], "getcompartmentid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getCompartmentId"]], "getcompartmentids() (model method)": [[3, "cbmpy.CBModel.Model.getCompartmentIds"]], "getcompartmentobjects() (model method)": [[3, "cbmpy.CBModel.Model.getCompartmentObjects"]], "getconstraintcomponent() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponent"]], "getconstraintcomponentdata() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentData"]], "getconstraintcomponentforvariable() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentForVariable"]], "getconstraintcomponentids() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentIDs"]], "getconstraintcomponentvariabletypes() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentVariableTypes"]], "getconstraintcomponentvariables() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentVariables"]], "getconstraintcomponents() (userdefinedconstraint method)": [[3, "cbmpy.CBModel.UserDefinedConstraint.getConstraintComponents"]], "getcopy() (structmatrixlp method)": [[3, "cbmpy.CBCommon.StructMatrixLP.getCopy"]], "getdescription() (model method)": [[3, "cbmpy.CBModel.Model.getDescription"]], "getdimensions() (compartment method)": [[3, "cbmpy.CBModel.Compartment.getDimensions"]], "getequation() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getEquation"]], "getexchboundsdict() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.getExchBoundsDict"]], "getexchangereactionids() (model method)": [[3, "cbmpy.CBModel.Model.getExchangeReactionIds"]], "getexchangereactions() (model method)": [[3, "cbmpy.CBModel.Model.getExchangeReactions"]], "getfvadata() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getFVAdata"]], "getfluxboundbyid() (model method)": [[3, "cbmpy.CBModel.Model.getFluxBoundByID"]], "getfluxboundbyreactionid() (model method)": [[3, "cbmpy.CBModel.Model.getFluxBoundByReactionID"]], "getfluxboundids() (model method)": [[3, "cbmpy.CBModel.Model.getFluxBoundIds"]], "getfluxboundsbyreactionid() (model method)": [[3, "cbmpy.CBModel.Model.getFluxBoundsByReactionID"]], "getfluxobjective() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjective"]], "getfluxobjectivedata() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjectiveData"]], "getfluxobjectiveforreaction() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjectiveForReaction"]], "getfluxobjectiveids() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjectiveIDs"]], "getfluxobjectivereactions() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjectiveReactions"]], "getfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.getFluxObjectives"]], "getfluxesassociatedwithcompartments() (model method)": [[3, "cbmpy.CBModel.Model.getFluxesAssociatedWithCompartments"]], "getfluxesassociatedwithspecies() (model method)": [[3, "cbmpy.CBModel.Model.getFluxesAssociatedWithSpecies"]], "getgpridassociatedwithgeneid() (model method)": [[3, "cbmpy.CBModel.Model.getGPRIdAssociatedWithGeneId"]], "getgpridassociatedwithgenelabel() (model method)": [[3, "cbmpy.CBModel.Model.getGPRIdAssociatedWithGeneLabel"]], "getgprids() (model method)": [[3, "cbmpy.CBModel.Model.getGPRIds"]], "getgprobjects() (model method)": [[3, "cbmpy.CBModel.Model.getGPRObjects"]], "getgprasdictfromstring() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.getGPRasDictFromString"]], "getgprassociation() (model method)": [[3, "cbmpy.CBModel.Model.getGPRassociation"]], "getgprassociationstring() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getGPRassociationString"]], "getgprforreaction() (model method)": [[3, "cbmpy.CBModel.Model.getGPRforReaction"]], "getgprforreactionasdict() (model method)": [[3, "cbmpy.CBModel.Model.getGPRforReactionAsDict"]], "getgene() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getGene"]], "getgene() (model method)": [[3, "cbmpy.CBModel.Model.getGene"]], "getgenebylabel() (model method)": [[3, "cbmpy.CBModel.Model.getGeneByLabel"]], "getgeneidfromlabel() (model method)": [[3, "cbmpy.CBModel.Model.getGeneIdFromLabel"]], "getgeneids() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getGeneIds"]], "getgeneids() (model method)": [[3, "cbmpy.CBModel.Model.getGeneIds"]], "getgenelabels() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getGeneLabels"]], "getgenelabels() (model method)": [[3, "cbmpy.CBModel.Model.getGeneLabels"]], "getgeneobjects() (model method)": [[3, "cbmpy.CBModel.Model.getGeneObjects"]], "getgeneobjectsbylabel() (model method)": [[3, "cbmpy.CBModel.Model.getGeneObjectsByLabel"]], "getgenes() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getGenes"]], "getgroup() (model method)": [[3, "cbmpy.CBModel.Model.getGroup"]], "getgroupids() (model method)": [[3, "cbmpy.CBModel.Model.getGroupIds"]], "getgroupmembership() (model method)": [[3, "cbmpy.CBModel.Model.getGroupMembership"]], "getgroupnames() (model method)": [[3, "cbmpy.CBModel.Model.getGroupNames"]], "getid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getId"]], "getindexes() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getIndexes"]], "getirreversiblereactionids() (model method)": [[3, "cbmpy.CBModel.Model.getIrreversibleReactionIds"]], "getkind() (group method)": [[3, "cbmpy.CBModel.Group.getKind"]], "getlabel() (gene method)": [[3, "cbmpy.CBModel.Gene.getLabel"]], "getlabels() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getLabels"]], "getlinearfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.getLinearFluxObjectives"]], "getlowerbound() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getLowerBound"]], "getlowerbound() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.getLowerBound"]], "getmiriamurisforqualifier() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.getMIRIAMUrisForQualifier"]], "getmiriamannotations() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getMIRIAMannotations"]], "getmember() (group method)": [[3, "cbmpy.CBModel.Group.getMember"]], "getmemberids() (group method)": [[3, "cbmpy.CBModel.Group.getMemberIDs"]], "getmembers() (group method)": [[3, "cbmpy.CBModel.Group.getMembers"]], "getmetaid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getMetaId"]], "getmodel() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getModel"]], "getmodel() (model method)": [[3, "cbmpy.CBModel.Model.getModel"]], "getmodelcreators() (model method)": [[3, "cbmpy.CBModel.Model.getModelCreators"]], "getmodelgenesperreaction() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.getModelGenesPerReaction"]], "getname() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getName"]], "getnotes() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getNotes"]], "getobjfuncvalue() (model method)": [[3, "cbmpy.CBModel.Model.getObjFuncValue"]], "getobject() (model method)": [[3, "cbmpy.CBModel.Model.getObject"]], "getobjectiveids() (model method)": [[3, "cbmpy.CBModel.Model.getObjectiveIds"]], "getoperation() (objective method)": [[3, "cbmpy.CBModel.Objective.getOperation"]], "getoptimalvalue() (model method)": [[3, "cbmpy.CBModel.Model.getOptimalValue"]], "getparameter() (model method)": [[3, "cbmpy.CBModel.Model.getParameter"]], "getpid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getPid"]], "getproductids() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getProductIds"]], "getprotein() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getProtein"]], "getquadraticbivariatefluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.getQuadraticBivariateFluxObjectives"]], "getquadraticfluxobjectives() (objective method)": [[3, "cbmpy.CBModel.Objective.getQuadraticFluxObjectives"]], "getreaction() (model method)": [[3, "cbmpy.CBModel.Model.getReaction"]], "getreactionactivity() (model method)": [[3, "cbmpy.CBModel.Model.getReactionActivity"]], "getreactionbounds() (model method)": [[3, "cbmpy.CBModel.Model.getReactionBounds"]], "getreactionids() (model method)": [[3, "cbmpy.CBModel.Model.getReactionIds"]], "getreactionidsassociatedwithspecies() (model method)": [[3, "cbmpy.CBModel.Model.getReactionIdsAssociatedWithSpecies"]], "getreactionlowerbound() (model method)": [[3, "cbmpy.CBModel.Model.getReactionLowerBound"]], "getreactionnames() (model method)": [[3, "cbmpy.CBModel.Model.getReactionNames"]], "getreactionobjects() (model method)": [[3, "cbmpy.CBModel.Model.getReactionObjects"]], "getreactionupperbound() (model method)": [[3, "cbmpy.CBModel.Model.getReactionUpperBound"]], "getreactionvalues() (model method)": [[3, "cbmpy.CBModel.Model.getReactionValues"]], "getreagent() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getReagent"]], "getreagentobjids() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getReagentObjIds"]], "getreagentof() (species method)": [[3, "cbmpy.CBModel.Species.getReagentOf"]], "getreagentrefs() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getReagentRefs"]], "getreagentwithspeciesref() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getReagentWithSpeciesRef"]], "getreducedcosts() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.getReducedCosts"]], "getreversiblereactionids() (model method)": [[3, "cbmpy.CBModel.Model.getReversibleReactionIds"]], "getrole() (reagent method)": [[3, "cbmpy.CBModel.Reagent.getRole"]], "getrow() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.getRow"]], "getrowsbyidx() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getRowsByIdx"]], "getrowsbyname() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.getRowsByName"]], "getsboterm() (fbase method)": [[3, "cbmpy.CBModel.Fbase.getSBOterm"]], "getsharedannotations() (group method)": [[3, "cbmpy.CBModel.Group.getSharedAnnotations"]], "getsharedmiriamannotations() (group method)": [[3, "cbmpy.CBModel.Group.getSharedMIRIAMannotations"]], "getsharednotes() (group method)": [[3, "cbmpy.CBModel.Group.getSharedNotes"]], "getsharedsboterm() (group method)": [[3, "cbmpy.CBModel.Group.getSharedSBOterm"]], "getsize() (compartment method)": [[3, "cbmpy.CBModel.Compartment.getSize"]], "getsolutionvector() (model method)": [[3, "cbmpy.CBModel.Model.getSolutionVector"]], "getspecies() (model method)": [[3, "cbmpy.CBModel.Model.getSpecies"]], "getspecies() (reagent method)": [[3, "cbmpy.CBModel.Reagent.getSpecies"]], "getspeciesids() (model method)": [[3, "cbmpy.CBModel.Model.getSpeciesIds"]], "getspeciesids() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getSpeciesIds"]], "getspeciesobj() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getSpeciesObj"]], "getspeciesobjects() (model method)": [[3, "cbmpy.CBModel.Model.getSpeciesObjects"]], "getstoichiometry() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getStoichiometry"]], "getsubstrateids() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getSubstrateIds"]], "gettable() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.getTable"]], "gettree() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getTree"]], "gettreecopy() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.getTreeCopy"]], "gettype() (fluxbound method)": [[3, "cbmpy.CBModel.FluxBound.getType"]], "gettype() (fluxboundbase method)": [[3, "cbmpy.CBModel.FluxBoundBase.getType"]], "getupperbound() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getUpperBound"]], "getupperbound() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.getUpperBound"]], "getvalue() (fluxbound method)": [[3, "cbmpy.CBModel.FluxBound.getValue"]], "getvalue() (fluxboundbase method)": [[3, "cbmpy.CBModel.FluxBoundBase.getValue"]], "getvalue() (objective method)": [[3, "cbmpy.CBModel.Objective.getValue"]], "getvalue() (parameter method)": [[3, "cbmpy.CBModel.Parameter.getValue"]], "getvalue() (reaction method)": [[3, "cbmpy.CBModel.Reaction.getValue"]], "getvalue() (species method)": [[3, "cbmpy.CBModel.Species.getValue"]], "grouper() (in module cbmpy.cbmulticore)": [[3, "cbmpy.CBMultiCore.grouper"]], "hasannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.hasAnnotation"]], "hasmember() (group method)": [[3, "cbmpy.CBModel.Group.hasMember"]], "hasobject() (model method)": [[3, "cbmpy.CBModel.Model.hasObject"]], "importuserconstraints() (model method)": [[3, "cbmpy.CBModel.Model.importUserConstraints"]], "insertdata() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.insertData"]], "isactive() (gene method)": [[3, "cbmpy.CBModel.Gene.isActive"]], "isproteinactive() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.isProteinActive"]], "isreagentof() (species method)": [[3, "cbmpy.CBModel.Species.isReagentOf"]], "loadcbgui() (in module cbmpy.cbgui)": [[3, "cbmpy.CBGUI.loadCBGUI"]], "loadmodel() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.loadModel"]], "loadobj() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.loadObj"]], "merge2models() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.merge2Models"]], "mergegroups() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.mergeGroups"]], "module": [[3, "module-cbmpy.CBCPLEX"], [3, "module-cbmpy.CBCommon"], [3, "module-cbmpy.CBConfig"], [3, "module-cbmpy.CBDataStruct"], [3, "module-cbmpy.CBGUI"], [3, "module-cbmpy.CBModel"], [3, "module-cbmpy.CBModelTools"], [3, "module-cbmpy.CBMultiCore"], [3, "module-cbmpy.CBMultiEnv"], [3, "module-cbmpy.CBNetDB"], [3, "module-cbmpy.CBPlot"], [3, "module-cbmpy.CBRead"], [3, "module-cbmpy.CBReadtxt"], [3, "module-cbmpy.CBSolver"], [3, "module-cbmpy.CBTools"], [3, "module-cbmpy.CBWrite"], [3, "module-cbmpy.CBWx"], [3, "module-cbmpy.CBXML"], [3, "module-cbmpy._multicoreenvfva"], [3, "module-cbmpy._multicorefva"], [3, "module-cbmpy.miriamids"]], "parsegeneassociation() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.parseGeneAssociation"]], "parsexmltotext() (semanticsbml method)": [[3, "cbmpy.CBNetDB.SemanticSBML.parseXMLtoText"]], "plotfluxvariability() (in module cbmpy.cbplot)": [[3, "cbmpy.CBPlot.plotFluxVariability"]], "printfbasolution() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.printFBASolution"]], "processbiggannotationnote() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.processBiGGannotationNote"]], "processbiggchemformula() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.processBiGGchemFormula"]], "processexchangereactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.processExchangeReactions"]], "processsbmlannotationnotes() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.processSBMLAnnotationNotes"]], "processspecieschargechemformulaannot() (in module cbmpy.cbcommon)": [[3, "cbmpy.CBCommon.processSpeciesChargeChemFormulaAnnot"]], "quicklookup() (semanticsbml method)": [[3, "cbmpy.CBNetDB.SemanticSBML.quickLookup"]], "reactivatereaction() (reaction method)": [[3, "cbmpy.CBModel.Reaction.reactivateReaction"]], "reactivatereaction() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.reactivateReaction"]], "readcobrasbml() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readCOBRASBML"]], "readcsv() (in module cbmpy.cbreadtxt)": [[3, "cbmpy.CBReadtxt.readCSV"]], "readexcel97model() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readExcel97Model"]], "readsbml2fba() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readSBML2FBA"]], "readsbml3fbc() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readSBML3FBC"]], "readsk_fva() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readSK_FVA"]], "readsk_vertex() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readSK_vertex"]], "readsk_vertexold() (in module cbmpy.cbread)": [[3, "cbmpy.CBRead.readSK_vertexOld"]], "registerobjectinglobalstore() (model method)": [[3, "cbmpy.CBModel.Model.registerObjectInGlobalStore"]], "removefixedspeciesreactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.removeFixedSpeciesReactions"]], "renameobjectids() (model method)": [[3, "cbmpy.CBModel.Model.renameObjectIds"]], "resetactivity() (gene method)": [[3, "cbmpy.CBModel.Gene.resetActivity"]], "resetallgenes() (model method)": [[3, "cbmpy.CBModel.Model.resetAllGenes"]], "resetallinactivegprbounds() (model method)": [[3, "cbmpy.CBModel.Model.resetAllInactiveGPRBounds"]], "roundoffwithsense() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.roundOffWithSense"]], "runmulticorefva() (in module cbmpy.cbmulticore)": [[3, "cbmpy.CBMultiCore.runMultiCoreFVA"]], "savemodel() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.saveModel"]], "sbml_convertcobrasbmltofbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_convertCOBRASBMLtoFBC"]], "sbml_convertsbml3fbctocobra() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_convertSBML3FBCToCOBRA"]], "sbml_createassociationfromast() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_createAssociationFromAST"]], "sbml_createassociationfromtreev2() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_createAssociationFromTreeV2"]], "sbml_createmodell2() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_createModelL2"]], "sbml_exportsbml2fbamodel() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_exportSBML2FBAModel"]], "sbml_filefindversion() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_fileFindVersion"]], "sbml_filevalidate() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_fileValidate"]], "sbml_getcvterms() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_getCVterms"]], "sbml_getgprasdictfbcv1() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_getGPRasDictFBCv1"]], "sbml_getgprasdictfbcv2() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_getGPRasDictFBCv2"]], "sbml_getgenerefs() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_getGeneRefs"]], "sbml_getnotes() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_getNotes"]], "sbml_readcobranote() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readCOBRANote"]], "sbml_readcobrasbml() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readCOBRASBML"]], "sbml_readfbcv3keyvaluepairs() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readFBCv3KeyValuePairs"]], "sbml_readkeyvaluedataannotation() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readKeyValueDataAnnotation"]], "sbml_readsbml2fba() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readSBML2FBA"]], "sbml_readsbml3fbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_readSBML3FBC"]], "sbml_setannotationsl3fbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setAnnotationsL3Fbc"]], "sbml_setcvterms() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setCVterms"]], "sbml_setcompartmentsl3() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setCompartmentsL3"]], "sbml_setdescription() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setDescription"]], "sbml_setfbcv3keyvaluepairs() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setFBCv3KeyValuePairs"]], "sbml_setgroupsl3() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setGroupsL3"]], "sbml_setnotes3() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setNotes3"]], "sbml_setparametersl3fbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setParametersL3Fbc"]], "sbml_setreactionsl2() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setReactionsL2"]], "sbml_setreactionsl3fbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setReactionsL3Fbc"]], "sbml_setspeciesl2() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setSpeciesL2"]], "sbml_setspeciesl3() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setSpeciesL3"]], "sbml_setunits() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setUnits"]], "sbml_setvalidationoptions() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_setValidationOptions"]], "sbml_validatedocument() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_validateDocument"]], "sbml_writeannotationsascobranote() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_writeAnnotationsAsCOBRANote"]], "sbml_writecobrasbml() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_writeCOBRASBML"]], "sbml_writekeyvaluedataannotation() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_writeKeyValueDataAnnotation"]], "sbml_writesbml2fba() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_writeSBML2FBA"]], "sbml_writesbml3fbc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.sbml_writeSBML3FBC"]], "scanforreactionduplicates() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.scanForReactionDuplicates"]], "scanforunbalancedreactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.scanForUnbalancedReactions"]], "serialize() (fbase method)": [[3, "cbmpy.CBModel.Fbase.serialize"]], "serialize() (group method)": [[3, "cbmpy.CBModel.Group.serialize"]], "serialize() (model method)": [[3, "cbmpy.CBModel.Model.serialize"]], "serializetodisk() (fbase method)": [[3, "cbmpy.CBModel.Fbase.serializeToDisk"]], "serializetodisk() (group method)": [[3, "cbmpy.CBModel.Group.serializeToDisk"]], "serializetodisk() (model method)": [[3, "cbmpy.CBModel.Model.serializeToDisk"]], "setactive() (gene method)": [[3, "cbmpy.CBModel.Gene.setActive"]], "setallfluxbounds() (model method)": [[3, "cbmpy.CBModel.Model.setAllFluxBounds"]], "setallgenesactive() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setAllGenesActive"]], "setallgenesinactive() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setAllGenesInactive"]], "setallinactivegprbounds() (model method)": [[3, "cbmpy.CBModel.Model.setAllInactiveGPRBounds"]], "setallproteinactivities() (model method)": [[3, "cbmpy.CBModel.Model.setAllProteinActivities"]], "setannotation() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setAnnotation"]], "setboundvaluebyname() (model method)": [[3, "cbmpy.CBModel.Model.setBoundValueByName"]], "setboundary() (species method)": [[3, "cbmpy.CBModel.Species.setBoundary"]], "setcbsboterm() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.setCBSBOterm"]], "setcharge() (species method)": [[3, "cbmpy.CBModel.Species.setCharge"]], "setchemformula() (species method)": [[3, "cbmpy.CBModel.Species.setChemFormula"]], "setcoefficient() (reagent method)": [[3, "cbmpy.CBModel.Reagent.setCoefficient"]], "setcol() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.setCol"]], "setcompartmentid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setCompartmentId"]], "setcreateddate() (model method)": [[3, "cbmpy.CBModel.Model.setCreatedDate"]], "setdescription() (model method)": [[3, "cbmpy.CBModel.Model.setDescription"]], "setdimensions() (compartment method)": [[3, "cbmpy.CBModel.Compartment.setDimensions"]], "setfluxboundsfromdict() (model method)": [[3, "cbmpy.CBModel.Model.setFluxBoundsFromDict"]], "setgeneactive() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setGeneActive"]], "setgeneactive() (model method)": [[3, "cbmpy.CBModel.Model.setGeneActive"]], "setgeneinactive() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setGeneInactive"]], "setgeneinactive() (model method)": [[3, "cbmpy.CBModel.Model.setGeneInactive"]], "setid() (compartment method)": [[3, "cbmpy.CBModel.Compartment.setId"]], "setid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setId"]], "setid() (gene method)": [[3, "cbmpy.CBModel.Gene.setId"]], "setid() (reaction method)": [[3, "cbmpy.CBModel.Reaction.setId"]], "setid() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.setId"]], "setid() (species method)": [[3, "cbmpy.CBModel.Species.setId"]], "setinactive() (gene method)": [[3, "cbmpy.CBModel.Gene.setInactive"]], "setkind() (group method)": [[3, "cbmpy.CBModel.Group.setKind"]], "setlabel() (gene method)": [[3, "cbmpy.CBModel.Gene.setLabel"]], "setlowerbound() (reaction method)": [[3, "cbmpy.CBModel.Reaction.setLowerBound"]], "setlowerbound() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.setLowerBound"]], "setmetaid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setMetaId"]], "setmodifieddate() (model method)": [[3, "cbmpy.CBModel.Model.setModifiedDate"]], "setname() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setName"]], "setnotes() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setNotes"]], "setobjectiveflux() (model method)": [[3, "cbmpy.CBModel.Model.setObjectiveFlux"]], "setoperation() (objective method)": [[3, "cbmpy.CBModel.Objective.setOperation"]], "setpid() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setPid"]], "setprefix() (model method)": [[3, "cbmpy.CBModel.Model.setPrefix"]], "setprotein() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setProtein"]], "setreactionbound() (model method)": [[3, "cbmpy.CBModel.Model.setReactionBound"]], "setreactionbounds() (model method)": [[3, "cbmpy.CBModel.Model.setReactionBounds"]], "setreactionid() (fluxbound method)": [[3, "cbmpy.CBModel.FluxBound.setReactionId"]], "setreactionlowerbound() (model method)": [[3, "cbmpy.CBModel.Model.setReactionLowerBound"]], "setreactionupperbound() (model method)": [[3, "cbmpy.CBModel.Model.setReactionUpperBound"]], "setreagentof() (species method)": [[3, "cbmpy.CBModel.Species.setReagentOf"]], "setreducedcosts() (in module cbmpy.cbcplex)": [[3, "cbmpy.CBCPLEX.setReducedCosts"]], "setrow() (structmatrix method)": [[3, "cbmpy.CBCommon.StructMatrix.setRow"]], "setsboterm() (fbase method)": [[3, "cbmpy.CBModel.Fbase.setSBOterm"]], "setsharedannotation() (group method)": [[3, "cbmpy.CBModel.Group.setSharedAnnotation"]], "setsharednotes() (group method)": [[3, "cbmpy.CBModel.Group.setSharedNotes"]], "setsharedsboterm() (group method)": [[3, "cbmpy.CBModel.Group.setSharedSBOterm"]], "setsize() (compartment method)": [[3, "cbmpy.CBModel.Compartment.setSize"]], "setspecies() (reagent method)": [[3, "cbmpy.CBModel.Reagent.setSpecies"]], "setspeciespropertiesfromannotations() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.setSpeciesPropertiesFromAnnotations"]], "setstoichcoefficient() (reaction method)": [[3, "cbmpy.CBModel.Reaction.setStoichCoefficient"]], "setsuffix() (model method)": [[3, "cbmpy.CBModel.Model.setSuffix"]], "settree() (geneproteinassociation method)": [[3, "cbmpy.CBModel.GeneProteinAssociation.setTree"]], "setupperbound() (reaction method)": [[3, "cbmpy.CBModel.Reaction.setUpperBound"]], "setupperbound() (reactionnew method)": [[3, "cbmpy.CBModel.ReactionNew.setUpperBound"]], "setvalue() (fluxbound method)": [[3, "cbmpy.CBModel.FluxBound.setValue"]], "setvalue() (fluxboundbase method)": [[3, "cbmpy.CBModel.FluxBoundBase.setValue"]], "setvalue() (objective method)": [[3, "cbmpy.CBModel.Objective.setValue"]], "setvalue() (parameter method)": [[3, "cbmpy.CBModel.Parameter.setValue"]], "setvalue() (reaction method)": [[3, "cbmpy.CBModel.Reaction.setValue"]], "setvalue() (species method)": [[3, "cbmpy.CBModel.Species.setValue"]], "sortreactionsbyid() (model method)": [[3, "cbmpy.CBModel.Model.sortReactionsById"]], "sortspeciesbyid() (model method)": [[3, "cbmpy.CBModel.Model.sortSpeciesById"]], "splitequalityfluxbounds() (model method)": [[3, "cbmpy.CBModel.Model.splitEqualityFluxBounds"]], "splitreversiblereactions() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.splitReversibleReactions"]], "splitsinglereversiblereaction() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.splitSingleReversibleReaction"]], "storeobj() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.storeObj"]], "stringreplace() (in module cbmpy.cbtools)": [[3, "cbmpy.CBTools.stringReplace"]], "testgeneproteinassociations() (model method)": [[3, "cbmpy.CBModel.Model.testGeneProteinAssociations"]], "unregisterobjectinglobalstore() (model method)": [[3, "cbmpy.CBModel.Model.unRegisterObjectInGlobalStore"]], "unsetboundary() (species method)": [[3, "cbmpy.CBModel.Species.unsetBoundary"]], "updatedata() (dbtools method)": [[3, "cbmpy.CBNetDB.DBTools.updateData"]], "updatenetwork() (model method)": [[3, "cbmpy.CBModel.Model.updateNetwork"]], "value (fluxboundbase property)": [[3, "cbmpy.CBModel.FluxBoundBase.value"]], "value (parameter property)": [[3, "cbmpy.CBModel.Parameter.value"]], "viewdatainwebrowser() (semanticsbml method)": [[3, "cbmpy.CBNetDB.SemanticSBML.viewDataInWebrowser"]], "viewurl() (miriamannotation method)": [[3, "cbmpy.CBCommon.MIRIAMannotation.viewURL"]], "with_metaclass() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.with_metaclass"]], "writecobrasbml() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeCOBRASBML"]], "writemindistancelpwithcost() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeMinDistanceLPwithCost"]], "writemodelinfotofile() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeModelInfoToFile"]], "writemodeltocombinearchive() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeModelToCOMBINEarchive"]], "writemodeltoexcel97() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeModelToExcel97"]], "writeoptimalsolution() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeOptimalSolution"]], "writeproteincosttocsv() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeProteinCostToCSV"]], "writereactioninfotofile() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeReactionInfoToFile"]], "writesbml2fba() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSBML2FBA"]], "writesbml3fbc() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSBML3FBC"]], "writesbml3fbcv2() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSBML3FBCV2"]], "writesbml3fbcv3() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSBML3FBCV3"]], "writesensitivitiestocsv() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSensitivitiesToCSV"]], "writesolutions() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSolutions"]], "writespeciesinfotofile() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeSpeciesInfoToFile"]], "writestoichiometricmatrix() (in module cbmpy.cbwrite)": [[3, "cbmpy.CBWrite.writeStoichiometricMatrix"]], "xml_addsbml2fbafluxbound() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_addSBML2FBAFluxBound"]], "xml_addsbml2fbaobjective() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_addSBML2FBAObjective"]], "xml_createlistoffluxobjectives() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_createListOfFluxObjectives"]], "xml_createsbml2fbadoc() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_createSBML2FBADoc"]], "xml_createsbml2fbaobjective() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_createSBML2FBAObjective"]], "xml_getsbml2fbaannotation() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_getSBML2FBAannotation"]], "xml_striptags() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_stripTags"]], "xml_viewsbml2fbaxml() (in module cbmpy.cbxml)": [[3, "cbmpy.CBXML.xml_viewSBML2FBAXML"]]}})