<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>CBMPy Module Reference</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css?v=b76e3c8a" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css?v=0a53256b" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-cbmpy.CBCommon">
<span id="cbmpy-module-reference"></span><h1>CBMPy Module Reference</h1>
<section id="cbmpy-cbcommon-module">
<h2>CBMPy: CBCommon module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBCommon.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBCommon.ComboGen">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">ComboGen</span></span></dt>
<dd><p>Generate sets of unique combinations</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">MIRIAMannotation</span></span></dt>
<dd><p>The MIRIAMannotation class MIRIAM annotations: Biological Qualifiers</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.addIDorgURI">
<span class="sig-name descname"><span class="pre">addIDorgURI</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">uri</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a URI directly into a qualifier collection:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>uri</em> the complete identifiers.org uri e.g. <a class="reference external" href="http://identifiers.org/chebi/CHEBI:58088">http://identifiers.org/chebi/CHEBI:58088</a></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.addMIRIAMannotation">
<span class="sig-name descname"><span class="pre">addMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.checkEntity">
<span class="sig-name descname"><span class="pre">checkEntity</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">entity</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check an entity entry, this is a MIRIAM resource name: “chEBI”. The test is case insensitive and will correct the case
of wrongly capitalised entities automatically. If the entity is not recognised then a list of possible candidates
based on the first letters of the input is displayed.</p>
<ul class="simple">
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.checkEntityPattern">
<span class="sig-name descname"><span class="pre">checkEntityPattern</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">entity</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>For an entity key compile the pattern to a regex, if necessary.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>entity</em> a MIRIAM resource entity</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.checkId">
<span class="sig-name descname"><span class="pre">checkId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check that a entity id e.g. CHEBI:17158</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mid</em> the entity id e.g. CHEBI:17158</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.deleteMIRIAMannotation">
<span class="sig-name descname"><span class="pre">deleteMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.getAllMIRIAMUris">
<span class="sig-name descname"><span class="pre">getAllMIRIAMUris</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a dictionary of qualifiers that contain ID.org URL’S</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.getAndViewUrisForQualifier">
<span class="sig-name descname"><span class="pre">getAndViewUrisForQualifier</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Retrieve all url’s associated with qualifier and attempt to open them all in a new browser tab</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> the qualifier e.g. “is” or “isEncoded”</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.getMIRIAMUrisForQualifier">
<span class="sig-name descname"><span class="pre">getMIRIAMUrisForQualifier</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return all list of urls associated with qualifier:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> the qualifier e.g. “is” or “isEncoded”</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.MIRIAMannotation.viewURL">
<span class="sig-name descname"><span class="pre">viewURL</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">url</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This will try to open the URL in a new tab of the default webbrowser</p>
<blockquote>
<div><ul class="simple">
<li><p><em>url</em> the url</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">StructMatrix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">array</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ridx</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cidx</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">row</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This class is specifically designed to store structural matrix information
give it an array and row/col index permutations it can generate its own
row/col labels given the label src.</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getColsByIdx">
<span class="sig-name descname"><span class="pre">getColsByIdx</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the columns referenced by index (1,3,5)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getColsByName">
<span class="sig-name descname"><span class="pre">getColsByName</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the columns referenced by label (‘s’,’x’,’d’)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getIndexes">
<span class="sig-name descname"><span class="pre">getIndexes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">axis</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the matrix indexes ([rows],[cols]) where axis=’row’/’col’/’all’</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getLabels">
<span class="sig-name descname"><span class="pre">getLabels</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">axis</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the matrix labels ([rows],[cols]) where axis=’row’/’col’/’all’</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getRowsByIdx">
<span class="sig-name descname"><span class="pre">getRowsByIdx</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the rows referenced by index (1,3,5)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.getRowsByName">
<span class="sig-name descname"><span class="pre">getRowsByName</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the rows referenced by label (‘s’,’x’,’d’)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.setCol">
<span class="sig-name descname"><span class="pre">setCol</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">src</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Assuming that the col index array is a permutation (full/subset)
of a source label array by supplying that src to setCol
maps the row labels to cidx and creates self.col (col label list)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrix.setRow">
<span class="sig-name descname"><span class="pre">setRow</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">src</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Assuming that the row index array is a permutation (full/subset)
of a source label array by supplying that source to setRow it
maps the row labels to ridx and creates self.row (row label list)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrixLP">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">StructMatrixLP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">array</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ridx</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cidx</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">row</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operators</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds some stuff to StructMatrix that makes it LP friendly</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBCommon.StructMatrixLP.getCopy">
<span class="sig-name descname"><span class="pre">getCopy</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">attr_str</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">deep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a copy of the attribute with name attr_str. Uses the copy module <cite>copy.copy</cite> or <cite>copy.deepcopy</cite></p>
<ul class="simple">
<li><p><em>attr_str</em> a string of the attribute name: ‘row’, ‘col’</p></li>
<li><p><em>deep</em> [default=False] try to do a deepcopy. Use with caution see copy module docstring for details</p></li>
</ul>
</dd></dl>

</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.checkChemFormula">
<span class="sig-name descname"><span class="pre">checkChemFormula</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cf</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Checks whether a string conforms to a Chemical Formula C3Br5 etc, returns True/False. Please see the SBML
Level 3 specification and <a class="reference external" href="http://wikipedia.org/wiki/Hill_system">http://wikipedia.org/wiki/Hill_system</a> for more information.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>cf</em> a string that contains a formula to check</p></li>
<li><p><em>quiet</em> [default=False] do not print error messages</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.checkId">
<span class="sig-name descname"><span class="pre">checkId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Checks the validity of the string to see if it conforms to a C variable. Returns true/false</p>
<ul class="simple">
<li><p><em>s</em> a string</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.createAssociationDictFromNode">
<span class="sig-name descname"><span class="pre">createAssociationDictFromNode</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">node</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">useweakref</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cntr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a GPR string ‘((g1 and g2) or g3)’ to a dictionary via a Python AST.
In future I will get rid of all the string elements and work only with AST’s.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>node</em> a Python AST node (e.g. body)</p></li>
<li><p><em>out</em> a gpr dictionary</p></li>
<li><p><em>model</em> a CBMPy model instance</p></li>
<li><p><em>useweakref</em> [default=True] use a weakref as the gene object or alternatively the label</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.extractGeneIdsFromString">
<span class="sig-name descname"><span class="pre">extractGeneIdsFromString</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">g</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_clean_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Extract and return a list of gene names from a gene association string formulation</p>
<ul class="simple">
<li><p><em>g</em> a COBRA style gene association string</p></li>
<li><p><em>return_clean_gpr</em> [default=False] in addition to the list returns the “cleaned” GPR string</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.fixId">
<span class="sig-name descname"><span class="pre">fixId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Checks a string (Sid) to see if it is a valid C style variable. first letter must be an underscore or letter,
the rest should be alphanumeric or underscore.</p>
<ul class="simple">
<li><p><em>s</em> the string to test</p></li>
<li><p><em>replace</em> [None] default is to leave out offensive character, otherwise replace with this one</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.func_getAssociationStrFromGprDict">
<span class="sig-name descname"><span class="pre">func_getAssociationStrFromGprDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gprd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">parent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get a old school GPR association string from a CBMPy gprDict, e.g. obtained from gpr.getTree()</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gprd</em> the gprDictionary</p></li>
<li><p><em>out</em> the output string</p></li>
<li><p><em>parent</em> [default=’’] the string representing the current nodes parent relationship, used for recursion</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.getGPRasDictFromString">
<span class="sig-name descname"><span class="pre">getGPRasDictFromString</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">node</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a GPR string ‘((g1 and g2) or g3)’ to a gprDict which is returned</p>
<blockquote>
<div><ul class="simple">
<li><p><em>node</em> a Python AST note (e.g. <cite>ast.parse(gprstring).body[0]</cite>)</p></li>
<li><p><em>out</em> a new dictionary that will be be created in place</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.parseGeneAssociation">
<span class="sig-name descname"><span class="pre">parseGeneAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parse a COBRA style gene association into a nested list.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gs</em> a string containing a gene association</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCommon.processSpeciesChargeChemFormulaAnnot">
<span class="sig-name descname"><span class="pre">processSpeciesChargeChemFormulaAnnot</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">getFromName</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">overwriteChemFormula</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">overwriteCharge</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Disambiguate the chemical formula from either the Notes or the overloaded name</p>
<blockquote>
<div><ul class="simple">
<li><p><em>s</em> a species object</p></li>
<li><p><em>getFromName</em> [default=False] whether to try strip the chemical formula from the name (old COBRA style)</p></li>
<li><p><em>overwriteChemFormula</em> [default=False]</p></li>
<li><p><em>overwriteCharge</em> [default=False]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBConfig"></span><section id="cbmpy-cbconfig-module">
<h2>CBMPy: CBConfig module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBConfig.py 711 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBConfig.current_version">
<span class="sig-name descname"><span class="pre">current_version</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the current CBMPy version as a string</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBConfig.current_version_tuple">
<span class="sig-name descname"><span class="pre">current_version_tuple</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the current CBMPy version as a tuple (x, y, z)</p>
</dd></dl>

<span class="target" id="module-cbmpy.CBCPLEX"></span><section id="cbmpy-cbcplex-module">
<h2>CBMPy: CBCPLEX module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBCPLEX.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_FluxVariabilityAnalysis">
<span class="sig-name descname"><span class="pre">cplx_FluxVariabilityAnalysis</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pre_opt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objF2constr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lower'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">markupmodel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">default_on_fail</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundoff_span</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'o'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Perform a flux variability analysis on an fba model:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an FBA model object</p></li>
<li><p><em>selected reactions</em> [default=None] means use all reactions otherwise use the reactions listed here</p></li>
<li><p><em>pre_opt</em> [default=True] attempt to presolve the FBA and report its results in the ouput, if this is disabled and <em>objF2constr</em> is True then the rid/value of the current active objective is used</p></li>
<li><p><em>tol</em>  [default=None] do not floor/ceiling the objective function constraint, otherwise round of to <em>tol</em></p></li>
<li><p><em>rhs_sense</em> [default=’lower’] means objC &gt;= objVal the inequality to use for the objective constraint can also be <em>upper</em> or <em>equal</em></p></li>
<li><p><em>optPercentage</em> [default=100.0] means the percentage optimal value to use for the RHS of the objective constraint: optimal_value*(optPercentage/100.0)</p></li>
<li><p><em>work_dir</em> [default=None] the FVA working directory for temporary files default = cwd+fva</p></li>
<li><p><em>debug</em> [default=False] if True write out all the intermediate FVA LP’s into work_dir</p></li>
<li><p><em>quiet</em> [default=False] if enabled, supress CPLEX output</p></li>
<li><p><em>objF2constr</em> [default=True] add the model objective function as a constraint using rhs_sense etc. If
this is True with pre_opt=False then the id/value of the active objective is used to form the constraint</p></li>
<li><p><em>markupmodel</em> [default=True] add the values returned by the fva to the reaction.fva_min and reaction.fva_max</p></li>
<li><p><em>default_on_fail</em> [default=False] if <em>pre_opt</em> is enabled replace a failed minimum/maximum with the solution value</p></li>
<li><p><em>roundoff_span</em> [default=10] number of digits is round off (not individual min/max values)</p></li>
<li><p><em>method</em> [default=’o’] choose the CPLEX method to use for solution, default is automatic. See CPLEX reference manual for details</p>
<ul>
<li><p>‘o’: auto</p></li>
<li><p>‘p’: primal</p></li>
<li><p>‘d’: dual</p></li>
<li><p>‘b’: barrier (no crossover)</p></li>
<li><p>‘h’: barrier</p></li>
<li><p>‘s’: sifting</p></li>
<li><p>‘c’: concurrent</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p>Returns an array with columns: Reaction, Reduced Costs, Variability Min, Variability Max, abs(Max-Min), MinStatus, MaxStatus and a list containing the row names.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_MinimizeNumActiveFluxes">
<span class="sig-name descname"><span class="pre">cplx_MinimizeNumActiveFluxes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pre_opt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objF2constr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lower'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objective_coefficients</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_lp_obj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">populate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Minimize the sum of active fluxes, updates the model with the values of the solution and returns the value
of the MILP objective function (not the model objective function which remains unchanged). If population mode is activated
output is as described below:</p>
<blockquote>
<div><dl class="simple">
<dt>Min: sum(Bi)</dt><dd><p>Bi = 0 -&gt; Ci Ji = 0</p>
</dd>
<dt>Such that:</dt><dd><p>NJi = 0
Jbio = opt</p>
</dd>
<dt>where:</dt><dd><p>Binary Bi</p>
</dd>
</dl>
</div></blockquote>
<p>Arguments:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an FBA model object</p></li>
<li><p><em>selected reactions</em> [default=None] means use all reactions otherwise use the reactions listed here</p></li>
<li><p><em>pre_opt</em> [default=True] attempt to presolve the FBA and report its results in the ouput, if this is diabled and <em>objF2constr</em> is True then the vid/value of the current active objective is used</p></li>
<li><p><em>tol</em>  [default=None] do not floor/ceiling the objective function constraint, otherwise round of to <em>tol</em></p></li>
<li><p><em>rhs_sense</em> [default=’lower’] means objC &gt;= objVal the inequality to use for the objective constraint can also be <em>upper</em> or <em>equal</em>
Note this does not necessarily mean the upper or lower bound, although practically it will. If in doubt use <em>equal</em></p></li>
<li><p><em>optPercentage</em> [default=100.0] means the percentage optimal value to use for the RHS of the objective constraint: optimal_value * (optPercentage/100.0)</p></li>
<li><p><em>work_dir</em> [default=None] the MSAF working directory for temporary files default = cwd+fva</p></li>
<li><p><em>debug</em> [default=False] if True write out all the intermediate MSAF LP’s into work_dir</p></li>
<li><p><em>quiet</em> [default=False] if enabled supress CPLEX output</p></li>
<li><p><em>objF2constr</em> [default=True] add the model objective function as a constraint using rhs_sense etc. If
this is True with pre_opt=False then the id/value of the active objective is used to form the constraint</p></li>
<li><p><em>objective_coefficients</em> [default=None] a dictionary of (reaction_id : float) pairs that provide the are introduced as objective coefficients to the absolute flux value. Note that the default value of the coefficient (non-specified) is +1.</p></li>
<li><p><em>return_lp_obj</em> [default=False] off by default when enabled it returns the CPLEX LP object</p></li>
<li><p><em>populate</em> [default=None] enable search algorithm to find multiple (sub)optimal solutions. Set with a tuple of (RELGAP=0.0, POPULATE_LIMIT=20, TIME_LIMIT=300) suggested values only.
- <em>RELGAP</em> [default=0.0] relative gap to optimal solution
- <em>POPULATE_LIMIT</em> [default=20] terminate when so many solutions have been found
- <em>TIME_LIMIT</em> [default=300] terminate search after so many seconds important with higher values of <em>POPULATION_LIMIT</em></p></li>
<li><p><em>with_reduced_costs</em> [default=’uncsaled’] can be ‘scaled’, ‘unscaled’ or anything else which is None</p></li>
</ul>
</div></blockquote>
<p>With outputs:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mincnt</em> the objective function value OR</p></li>
<li><p><em>mincnt, cpx</em> the objective function and cplex model OR</p></li>
<li><p><em>populate_data, mincnt</em> a population data set OR</p></li>
<li><p><em>populate_data, mincnt, cpx</em> both the cps object and population data set</p></li>
</ul>
</div></blockquote>
<p>depending on selected flags.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_MinimizeSumOfAbsFluxes">
<span class="sig-name descname"><span class="pre">cplx_MinimizeSumOfAbsFluxes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pre_opt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objF2constr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lower'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objective_coefficients</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_lp_obj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">with_reduced_costs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'o'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Minimize the sum of absolute fluxes sum(abs(J1) + abs(J2) + abs(J3) … abs(Jn)) by adding two constraints per flux
and a variable representing the absolute value:</p>
<blockquote>
<div><dl class="simple">
<dt>Min: Ci abs_Ji</dt><dd><p>Ji - abs_Ji &lt;= 0
Ji + abs_Ji &gt;= 0</p>
</dd>
<dt>Such that:</dt><dd><p>NJi = 0
Jopt = opt</p>
</dd>
</dl>
</div></blockquote>
<p>returns the value of the flux minimization objective function (not the model objective function which remains unchanged from)</p>
<p>Arguments:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an FBA model object</p></li>
<li><p><em>selected reactions</em> [default=None] means use all reactions otherwise use the reactions listed here</p></li>
<li><p><em>pre_opt</em> [default=True] attempt to presolve the FBA and report its results in the ouput, if this is disabled and <em>objF2constr</em> is True then the vid/value of the current active objective is used</p></li>
<li><p><em>tol</em>  [default=None] do not floor/ceiling the objective function constraint, otherwise round of to <em>tol</em></p></li>
<li><p><em>rhs_sense</em> [default=’lower’] means objC &gt;= objVal the inequality to use for the objective constraint can also be <em>upper</em> or <em>equal</em></p></li>
<li><p><em>optPercentage</em> [default=100.0] means the percentage optimal value to use for the RHS of the objective constraint: optimal_value*(optPercentage/100.0)</p></li>
<li><p><em>work_dir</em> [default=None] the MSAF working directory for temporary files default = cwd+fva</p></li>
<li><p><em>debug</em> [default=False] if True write out all the intermediate MSAF LP’s into work_dir</p></li>
<li><p><em>quiet</em> [default=False] if enabled supress CPLEX output</p></li>
<li><p><em>objF2constr</em> [default=True] add the model objective function as a constraint using rhs_sense etc. If
this is True with pre_opt=False then the id/value of the active objective is used to form the constraint</p></li>
<li><p><em>objective_coefficients</em> [default=None] a dictionary of (reaction_id : float) pairs that provide the are introduced as objective coefficients to the absolute flux value. Note that the default value of the coefficient (non-specified) is +1.</p></li>
<li><p><em>return_lp_obj</em> [default=False] off by default when enabled it returns the CPLEX LP object</p></li>
<li><p><em>with_reduced_costs</em> [default=None] if not None should be ‘scaled’ or ‘unscaled’</p></li>
<li><p><em>method</em> [default=’o’] choose the CPLEX method to use for solution, default is automatic. See CPLEX reference manual for details</p>
<ul>
<li><p>‘o’: auto</p></li>
<li><p>‘p’: primal</p></li>
<li><p>‘d’: dual</p></li>
<li><p>‘b’: barrier (no crossover)</p></li>
<li><p>‘h’: barrier</p></li>
<li><p>‘s’: sifting</p></li>
<li><p>‘c’: concurrent</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p>With outputs:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an update instance of a CBModel. Note that the FBA model objective function value is the original value set as a constraint</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_MultiFluxVariabilityAnalysis">
<span class="sig-name descname"><span class="pre">cplx_MultiFluxVariabilityAnalysis</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lp</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1e-10</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lower'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Perform a flux variability analysis on a multistate LP</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lp</em> a multistate LP</p></li>
<li><p><em>selected reactions</em> [default=None] means use all reactions otherwise use the reactions listed here</p></li>
<li><p><em>pre_opt</em> [default=True] attempt to presolve the FBA and report its results in the ouput</p></li>
<li><p><em>tol</em>  [default=1e-10] do floor/ceiling the objective function constraint, otherwise floor/ceil to <em>tol</em></p></li>
<li><p><em>rhs_sense</em> [default=’lower’] means objC &gt;= objVal the inequality to use for the objective constraint can also be <em>upper</em> or <em>equal</em></p></li>
<li><p><em>optPercentage</em> [default=100.0] means the percentage optimal value to use for the RHS of the objective constraint: optimal_value*(optPercentage/100.0)</p></li>
<li><p><em>work_dir</em> [default=None] the FVA working directory for temporary files default = cwd+fva</p></li>
<li><p><em>debug</em> [default=False] if True write out all the intermediate FVA LP’s into work_dir</p></li>
<li><p><em>bypass</em> [default=False] bypass everything and only run the min/max on lp</p></li>
</ul>
</div></blockquote>
<p>and returns an array with columns:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Reaction</span><span class="p">,</span> <span class="n">Reduced</span> <span class="n">Costs</span><span class="p">,</span> <span class="n">Variability</span> <span class="n">Min</span><span class="p">,</span> <span class="n">Variability</span> <span class="n">Max</span><span class="p">,</span> <span class="nb">abs</span><span class="p">(</span><span class="n">Max</span><span class="o">-</span><span class="n">Min</span><span class="p">),</span> <span class="n">MinStatus</span><span class="p">,</span> <span class="n">MaxStatus</span>
</pre></div>
</div>
<p>and a list containing the row names.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_SolveMILP">
<span class="sig-name descname"><span class="pre">cplx_SolveMILP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">auto_mipgap</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Solve and MILP</p>
<blockquote>
<div><ul class="simple">
<li><p><em>auto_mipgap</em> auto decrease mipgap until mipgap == absmipgap</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_WriteFVAtoCSV">
<span class="sig-name descname"><span class="pre">cplx_WriteFVAtoCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fva</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbaObj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes the resuls of a FluxVariabilityAnalysis method and writes it to a nice
csv file. Note this method has been refactored to <cite>CBWrite.WriteFVAtoCSV()</cite>.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>pid</em> filename_base for the CSV output</p></li>
<li><p><em>fva</em> FluxVariabilityAnalysis() OUTPUT_ARRAY</p></li>
<li><p><em>names</em> FluxVariabilityAnalysis() OUTPUT_NAMES</p></li>
<li><p><em>Dir</em> [default=None] if set the output directory for the csv files</p></li>
<li><p><em>fbaObj</em> [default=None] if supplied adds extra model information into the output tables</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_analyzeModel">
<span class="sig-name descname"><span class="pre">cplx_analyzeModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lpFname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_lp_obj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">with_reduced_costs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'unscaled'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">with_sensitivity</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">del_intermediate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">build_n</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'o'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Optimize a model and add the result of the optimization to the model object
(e.g. <cite>reaction.value</cite>, <cite>objectiveFunction.value</cite>). The stoichiometric
matrix is automatically generated. This is a common function available
in all solver interfaces. By default returns the objective function value</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> an instantiated PySCeSCBM model object</p></li>
<li><p><em>lpFname</em> [default=None] the name of the intermediate LP file. If not specified no LP file is produced</p></li>
<li><p><em>return_lp_obj</em> [default=False] off by default when enabled it returns the CPLEX LP object</p></li>
<li><p><em>with_reduced_costs</em> [default=’unscaled’] calculate and add reduced cost information to mode this can be: ‘unscaled’ or ‘scaled’
or anything else which is interpreted as ‘None’. Scaled means s_rcost = (r.reduced_cost*rval)/obj_value</p></li>
<li><p><em>with_sensitivity</em> [default=False] add solution sensitivity information (not yet implemented)</p></li>
<li><p><em>del_intermediate</em> [default=False] redundant except if output file is produced and deleted (not useful)</p></li>
<li><p><em>build_n</em> [default=True] generate stoichiometry from the reaction network (reactions/reagents/species)</p></li>
<li><p><em>quiet</em> [default=False] suppress cplex output</p></li>
<li><p><em>method</em> [default=’o’] choose the CPLEX method to use for solution, default is automatic. See CPLEX reference manual for details</p>
<ul>
<li><p>‘o’: auto</p></li>
<li><p>‘p’: primal</p></li>
<li><p>‘d’: dual</p></li>
<li><p>‘b’: barrier (no crossover)</p></li>
<li><p>‘h’: barrier</p></li>
<li><p>‘s’: sifting</p></li>
<li><p>‘c’: concurrent</p></li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_constructLPfromFBA">
<span class="sig-name descname"><span class="pre">cplx_constructLPfromFBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a CPLEX LP in memory.
- <em>fba</em> an FBA object
- <em>fname</em> optional filename if defined writes out the constructed lp</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_fixConSense">
<span class="sig-name descname"><span class="pre">cplx_fixConSense</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">operator</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Fixes the sense of inequality operators, returns corrected sense symbol</p>
<ul class="simple">
<li><p><em>operator</em> the operator to check</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_func_GetCPXandPresolve">
<span class="sig-name descname"><span class="pre">cplx_func_GetCPXandPresolve</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pre_opt</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objF2constr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">with_reduced_costs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'unscaled'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'o'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This is a utility function that does a presolve for FVA, MSAF etc. Generates properly formatted
empty objects if pre_opt == False</p>
<blockquote>
<div><ul class="simple">
<li><p><em>pre_opt</em> a boolean</p></li>
<li><p><em>fba</em> a CBModel object</p></li>
<li><p><em>objF2constr</em> add objective function as constraint</p></li>
<li><p><em>quiet</em> [default=False] supress cplex output</p></li>
<li><p><em>with_reduced_costs</em> [default=’unscaled’] can be ‘scaled’ or ‘unscaled’</p></li>
<li><p><em>method</em> [default=’o’] choose the CPLEX method to use for solution, default is automatic. See CPLEX reference manual for details</p>
<ul>
<li><p>‘o’: auto</p></li>
<li><p>‘p’: primal</p></li>
<li><p>‘d’: dual</p></li>
<li><p>‘b’: barrier (no crossover)</p></li>
<li><p>‘h’: barrier</p></li>
<li><p>‘s’: sifting</p></li>
<li><p>‘c’: concurrent</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p>Returns: pre_sol, pre_oid, pre_oval, OPTIMAL_PRESOLUTION, REDUCED_COSTS</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_func_SetObjectiveFunctionAsConstraint">
<span class="sig-name descname"><span class="pre">cplx_func_SetObjectiveFunctionAsConstraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cpx</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oval</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span></em><span class="sig-paren">)</span></dt>
<dd><dl class="simple">
<dt>Take the objective function and “optimum” value and add it as a constraint</dt><dd><ul class="simple">
<li><p><em>cpx</em> a cplex object</p></li>
<li><p><em>oval</em> the objective value</p></li>
<li><p><em>tol</em>  [default=None] do not floor/ceiling the objective function constraint, otherwise round of to <em>tol</em></p></li>
<li><p><em>rhs_sense</em> [default=’lower’] means objC &gt;= objVal the inequality to use for the objective constraint can also be <em>upper</em> or <em>equal</em></p></li>
<li><p><em>optPercentage</em> [default=100.0] means the percentage optimal value to use for the RHS of the objective constraint: optimal_value*(optPercentage/100.0)</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getCPLEXModelFromLP">
<span class="sig-name descname"><span class="pre">cplx_getCPLEXModelFromLP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lptFile</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Load a LPT (CPLEX format) file and return a CPLX LP model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lptfile</em> an CPLEX LP format file</p></li>
<li><p><em>Dir</em> an optional directory</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getDualValues">
<span class="sig-name descname"><span class="pre">cplx_getDualValues</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the get the dual values of the solution</p>
<blockquote>
<div><ul class="simple">
<li><p><em>c</em> a CPLEX LP</p></li>
</ul>
</div></blockquote>
<p>Output is a dictionary of {name : value} pairs</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getModelFromLP">
<span class="sig-name descname"><span class="pre">cplx_getModelFromLP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lptFile</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Load a LPT (CPLEX format) file and return a CPLX LP model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lptfile</em> an CPLEX LP format file</p></li>
<li><p><em>Dir</em> an optional directory</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getModelFromObj">
<span class="sig-name descname"><span class="pre">cplx_getModelFromObj</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a CPLEX object from a FBA model object (via LP file)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getOptimalSolution">
<span class="sig-name descname"><span class="pre">cplx_getOptimalSolution</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>From a CPLX model extract a tuple of solution, ObjFuncName and ObjFuncVal</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getOptimalSolution2">
<span class="sig-name descname"><span class="pre">cplx_getOptimalSolution2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>From a CPLX model extract a tuple of solution, ObjFuncName and ObjFuncVal</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getReducedCosts">
<span class="sig-name descname"><span class="pre">cplx_getReducedCosts</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scaled</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Extract ReducedCosts from LP and return as a dictionary ‘Rid’ : reduced cost</p>
<blockquote>
<div><ul class="simple">
<li><p><em>c</em> a cplex LP object</p></li>
<li><p><em>scaled</em> scale the reduced cost by the optimal flux value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getSensitivities">
<span class="sig-name descname"><span class="pre">cplx_getSensitivities</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the sensitivities of each constraint on the objective function with inpt</p>
<blockquote>
<div><ul class="simple">
<li><p><em>c</em> a CPLEX LP</p></li>
</ul>
</div></blockquote>
<p>Output is a tuple of bound and objective sensitivities where the objective
sensitivity is described in the CPLEX reference manual as:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">...</span> <span class="n">the</span> <span class="n">objective</span> <span class="n">sensitivity</span> <span class="n">shows</span> <span class="n">each</span> <span class="n">variable</span><span class="p">,</span> <span class="n">its</span> <span class="n">reduced</span> <span class="n">cost</span> <span class="ow">and</span> <span class="n">the</span> <span class="nb">range</span> <span class="n">over</span>
<span class="n">which</span> <span class="n">its</span> <span class="n">objective</span> <span class="n">function</span> <span class="n">coefficient</span> <span class="n">can</span> <span class="n">vary</span> <span class="n">without</span> <span class="n">forcing</span> <span class="n">a</span> <span class="n">change</span>
<span class="ow">in</span> <span class="n">the</span> <span class="n">optimal</span> <span class="n">basis</span><span class="o">.</span> <span class="n">The</span> <span class="n">current</span> <span class="n">value</span> <span class="n">of</span> <span class="n">each</span> <span class="n">objective</span> <span class="n">coefficient</span> <span class="ow">is</span>
<span class="n">also</span> <span class="n">displayed</span> <span class="k">for</span> <span class="n">reference</span><span class="o">.</span>

<span class="o">-</span> <span class="o">*</span><span class="n">objective</span> <span class="n">coefficient</span> <span class="n">sensitivity</span><span class="o">*</span> <span class="p">{</span><span class="n">flux</span> <span class="p">:</span> <span class="p">(</span><span class="n">reduced_cost</span><span class="p">,</span> <span class="n">lower_obj_sensitivity</span><span class="p">,</span> <span class="n">coeff_value</span><span class="p">,</span> <span class="n">upper_obj_sensitivity</span><span class="p">)}</span>
<span class="o">-</span> <span class="o">*</span><span class="n">rhs</span> <span class="n">sensitivity</span><span class="o">*</span> <span class="p">{</span><span class="n">constraint</span> <span class="p">:</span> <span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">high</span><span class="p">)}</span>
<span class="o">-</span> <span class="o">*</span><span class="n">bound</span> <span class="n">sensitivity</span> <span class="n">ranges</span><span class="o">*</span> <span class="p">{</span><span class="n">flux</span> <span class="p">:</span> <span class="p">(</span><span class="n">lb_low</span><span class="p">,</span> <span class="n">lb_high</span><span class="p">,</span> <span class="n">ub_low</span><span class="p">,</span> <span class="n">ub_high</span><span class="p">)}</span>
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getShadowPrices">
<span class="sig-name descname"><span class="pre">cplx_getShadowPrices</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of shadow prices containing ‘N_row_id’ : (lb, rhs, ub)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>c</em> a cplex LP object</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_getSolutionStatus">
<span class="sig-name descname"><span class="pre">cplx_getSolutionStatus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns one of:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>LPS_OPT</em>: solution is optimal;</p></li>
<li><p><em>LPS_FEAS</em>: solution is feasible;</p></li>
<li><p><em>LPS_INFEAS</em>: solution is infeasible;</p></li>
<li><p><em>LPS_NOFEAS</em>: problem has no feasible solution;</p></li>
<li><p><em>LPS_UNBND</em>: problem has unbounded solution;</p></li>
<li><p><em>LPS_UNDEF</em>: solution is undefined.</p></li>
<li><p><em>LPS_NONE</em>: no solution</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_runInputScan">
<span class="sig-name descname"><span class="pre">cplx_runInputScan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exDict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">wDir</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">input_lb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-10.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">input_ub</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">writeHformat</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rationalLPout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>scans all inputs</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setFBAsolutionToModel">
<span class="sig-name descname"><span class="pre">cplx_setFBAsolutionToModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lp</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">with_reduced_costs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'unscaled'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the FBA solution from a CPLEX solution to an FBA object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> and fba object</p></li>
<li><p><em>lp</em> a CPLEX LP object</p></li>
<li><p><em>with_reduced_costs</em> [default=’unscaled’] calculate and add reduced cost information to mode this can be: ‘unscaled’ or ‘scaled’
or anything else which is interpreted as None. Scaled is: s_rcost = (r.reduced_cost*rval)/obj_value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setMIPGapTolerance">
<span class="sig-name descname"><span class="pre">cplx_setMIPGapTolerance</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the the relative MIP gap tolerance</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setObjective">
<span class="sig-name descname"><span class="pre">cplx_setObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">expr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'maximize'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a new objective function note that there is a major memory leak in
<cite>c.variables.get_names()</cite> whch is used when reset=True. If this is a problem
use cplx_setObjective2 which takes <em>names</em> as an input:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>c</em> a CPLEX LP object</p></li>
<li><p><em>pid</em> the r_id of the flux to be optimized</p></li>
<li><p><em>expr</em> a list of (coefficient, flux) pairs</p></li>
<li><p><em>sense</em> ‘maximize’/’minimize’</p></li>
<li><p><em>reset</em> [default=True] reset all objective function coefficients to zero</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setObjective2">
<span class="sig-name descname"><span class="pre">cplx_setObjective2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">expr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'maximize'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a new objective function. This is a workaround function to avoid the
e is a major memory leak in <cite>c.variables.get_names()</cite> whch is used
in cplx_setObjective()  when reset=True.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setOutputStreams">
<span class="sig-name descname"><span class="pre">cplx_setOutputStreams</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lp</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'default'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the noise level of the solver, mode can be one of:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>None</em> silent i.e. no output</p></li>
<li><p><em>‘file’</em> set solver to silent and output logs to <em>CPLX_RESULT_STREAM_FILE</em> cplex_output.log</p></li>
<li><p><em>‘iostream’</em> set solver to silent and output logs to <em>CPLX_RESULT_STREAM_IO</em> csio</p></li>
<li><p><em>‘default’</em> or anything else noisy with full output closes STREAM_IO and STREAM_FILE (default)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_setSolutionStatusToModel">
<span class="sig-name descname"><span class="pre">cplx_setSolutionStatusToModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lp</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the lp solutions status to the CBMPy model</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_singleGeneScan">
<span class="sig-name descname"><span class="pre">cplx_singleGeneScan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">r_off_low</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">r_off_upp</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optrnd</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">8</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Perform a single gene deletion scan</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a model object</p></li>
<li><p><em>r_off_low</em> the lower bound of a deactivated reaction</p></li>
<li><p><em>r_off_upp</em> the upper bound of a deactivated reaction</p></li>
<li><p><em>optrnd</em> [default=8] round off the optimal value</p></li>
<li><p><em>altout</em> [default=False] by default return a list of gene:opt pairs, alternatively (True) return an extended result set including gene groups, optima and effect map</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_singleReactionDeletionScan">
<span class="sig-name descname"><span class="pre">cplx_singleReactionDeletionScan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">r_off_low</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">r_off_upp</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optrnd</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">8</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Perform a single reaction deletion scan</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a model object</p></li>
<li><p><em>r_off_low</em> the lower bound of a deactivated reaction</p></li>
<li><p><em>r_off_upp</em> the upper bound of a deactivated reaction</p></li>
<li><p><em>optrnd</em> [default=8] round off the optimal value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_writeLPsolution">
<span class="sig-name descname"><span class="pre">cplx_writeLPsolution</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba_sol</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objf_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">separator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function writes the optimal solution, produced wth <cite>cplx_getOptimalSolution</cite> to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba_sol</em> a dictionary of Flux : value pairs</p></li>
<li><p><em>objf_name</em> the objective function flux id</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>Dir</em> [default=None] use directory if not None</p></li>
<li><p><em>separator</em> [default=’,’] the column separator</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.cplx_writeLPtoLPTfile">
<span class="sig-name descname"><span class="pre">cplx_writeLPtoLPTfile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">c</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">title</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write out a CPLEX model as an LP format file</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.getReducedCosts">
<span class="sig-name descname"><span class="pre">getReducedCosts</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get a dictionary of reduced costs for each reaction/flux</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBCPLEX.setReducedCosts">
<span class="sig-name descname"><span class="pre">setReducedCosts</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reduced_costs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>For each reaction/flux, sets the attribute “reduced_cost” from a dictionary of
reduced costs</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba object</p></li>
<li><p><em>reduced_costs</em> a dictionary of {reaction : value} pairs</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBDataStruct"></span><section id="cbmpy-cbdatastruct-module">
<h2>CBMPy: CBDataStruct module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBDataStruct.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.CBGUI"></span><section id="cbmpy-cbgui-module">
<h2>CBMPy: CBGUI module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBGUI.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBGUI.loadCBGUI">
<span class="sig-name descname"><span class="pre">loadCBGUI</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Load an FBA model instance into the quick editor to view or change basic model properties</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mod</em> a PySCeS CBMPy model instance</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBModel"></span><section id="cbmpy-cbmodel-module">
<h2>CBMPy: CBModel module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBModel.py 706 2020-03-23 21:31:49Z bgoli $)</p>
</section>
<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Compartment</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">dimensions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">3</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">volume</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A compartment</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.containsReactions">
<span class="sig-name descname"><span class="pre">containsReactions</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Lists the species contained in this compartment</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.containsSpecies">
<span class="sig-name descname"><span class="pre">containsSpecies</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Lists the species contained in this compartment</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.getDimensions">
<span class="sig-name descname"><span class="pre">getDimensions</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the compartment dimensions</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.getSize">
<span class="sig-name descname"><span class="pre">getSize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the compartment size</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.setDimensions">
<span class="sig-name descname"><span class="pre">setDimensions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">dimensions</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the compartment dimensions</p>
<blockquote>
<div><ul class="simple">
<li><p><em>dimensions</em> set the new compartment dimensions</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplements &#64;FBase.setId()</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Compartment.setSize">
<span class="sig-name descname"><span class="pre">setSize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">size</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the compartment size</p>
<blockquote>
<div><ul class="simple">
<li><p><em>size</em> the new compartment size</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.ConstraintComponent">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">ConstraintComponent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">variable</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ctype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'linear'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A weighted flux that appears in an user defined constraint</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Fbase</span></span></dt>
<dd><p>Base class for CB Model objects</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.addMIRIAMannotation">
<span class="sig-name descname"><span class="pre">addMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158 or fully qualifies url (if only_qual_uri)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.addMIRIAMuri">
<span class="sig-name descname"><span class="pre">addMIRIAMuri</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">uri</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>uri</em> the fully qualified entity id e.g. <a class="reference external" href="http://identifiers.org/chebi/CHEBI:12345">http://identifiers.org/chebi/CHEBI:12345</a> (no validity checking is done)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.clone">
<span class="sig-name descname"><span class="pre">clone</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a clone of this object. Cloning performs a deepcop on the object which will also clone
any objects that exist as attributes of this object, in other words an independent copy of the
original. If this is not the desired behaviour override this method when subclassing or implement
your own.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.deleteAnnotation">
<span class="sig-name descname"><span class="pre">deleteAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Unsets (deltes) an objects annotation with key</p>
<blockquote>
<div><ul class="simple">
<li><p><em>key</em> the annotation key</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.deleteMIRIAMannotation">
<span class="sig-name descname"><span class="pre">deleteMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getAnnotation">
<span class="sig-name descname"><span class="pre">getAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the object annotation associated with:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>key</em> the annotation key</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getAnnotations">
<span class="sig-name descname"><span class="pre">getAnnotations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object annotation dictionary</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getCompartmentId">
<span class="sig-name descname"><span class="pre">getCompartmentId</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the compartment id where this element is located</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getId">
<span class="sig-name descname"><span class="pre">getId</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object ID.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getMIRIAMannotations">
<span class="sig-name descname"><span class="pre">getMIRIAMannotations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of all MIRIAM annotations associated with this object
or None of there are none defined.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getMetaId">
<span class="sig-name descname"><span class="pre">getMetaId</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object metaId.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getModel">
<span class="sig-name descname"><span class="pre">getModel</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the parent model object linked to in objref, can return model or None for unlinked object</p>
<p># Overwritten by Model</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getName">
<span class="sig-name descname"><span class="pre">getName</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object name.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getNotes">
<span class="sig-name descname"><span class="pre">getNotes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object’s notes</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getPid">
<span class="sig-name descname"><span class="pre">getPid</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the object ID.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.getSBOterm">
<span class="sig-name descname"><span class="pre">getSBOterm</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the SBO term for this object.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.hasAnnotation">
<span class="sig-name descname"><span class="pre">hasAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a boolean representing the presence/absence of the key in the objext annotation</p>
<blockquote>
<div><ul class="simple">
<li><p><em>key</em> the annotation key</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.serialize">
<span class="sig-name descname"><span class="pre">serialize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize object, returns a string by default</p>
<blockquote>
<div><ul class="simple">
<li><dl class="simple">
<dt><em>protocol</em> [default=0] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># Reimplemented in Model</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.serializeToDisk">
<span class="sig-name descname"><span class="pre">serializeToDisk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize to disk using pickle protocol:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>filename</em> the name of the output file</p></li>
<li><dl class="simple">
<dt><em>protocol</em> [default=2] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># Reimplemented in Model</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setAnnotation">
<span class="sig-name descname"><span class="pre">setAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ext</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set an objects annotation as a key : value pair.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>key</em> the annotation key</p></li>
<li><p><em>value</em> the annotation value</p></li>
<li><p><em>ext</em> a dictionary of extended properties in FBCv3 id, name, uri</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setCompartmentId">
<span class="sig-name descname"><span class="pre">setCompartmentId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">compartment</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the compartment id where this element is located</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplemented by &#64;Reaction, &#64;Species, &#64;Compartment, &#64;Gene</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setMetaId">
<span class="sig-name descname"><span class="pre">setMetaId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mid</em> [default=None] a valid c variable style metaid string, if None it will be set as meta+id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setName">
<span class="sig-name descname"><span class="pre">setName</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the object name:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>name</em> the name string</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setNotes">
<span class="sig-name descname"><span class="pre">setNotes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">notes</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object’s notes:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>notes</em> the note string, should preferably be (X)HTML for SBML</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setPid">
<span class="sig-name descname"><span class="pre">setPid</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Fbase.setSBOterm">
<span class="sig-name descname"><span class="pre">setSBOterm</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sbo</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the SBO term for this object.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sbo</em> the SBOterm with format: SBO:nnnnnnn”</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBound">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operation</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A reaction fluxbound</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBound.getType">
<span class="sig-name descname"><span class="pre">getType</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the <em>type</em> of FluxBound: ‘lower’, ‘upper’, ‘equality’ or None</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBound.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBound.setReactionId">
<span class="sig-name descname"><span class="pre">setReactionId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">react</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the reaction attribute of the FluxBound</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBound.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the attribute ‘’value’’</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundBase">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxBoundBase</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operator</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">parent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A refactored and streamlined FluxBound base class that can be a generic bound, superclass to FluxBoundUpper and FluxBoundLower</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundBase.getType">
<span class="sig-name descname"><span class="pre">getType</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the <em>type</em> of FluxBound: ‘lower’, ‘upper’</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundBase.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundBase.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the value attribute:</p>
<ul class="simple">
<li><p><em>value</em> a float</p></li>
</ul>
</dd></dl>

<dl class="py property">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundBase.value">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">value</span></span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundLower">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxBoundLower</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-inf</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxBoundUpper">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxBoundUpper</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">inf</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxObjective">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ctype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'linear'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A weighted flux that appears in an objective function</p>
<p>NOTE: reaction is a string containing a reaction id</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.FluxObjectiveQuadratic">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">FluxObjectiveQuadratic</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ctype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'quadratic'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A weighted quadratic flux that appears in an objective function, this fluxobjective contains
two reaction terms to define “quadratic” fluxobjectives of the type &lt;coefficient&gt;*&lt;variable1&gt;*&lt;variable2&gt;
For example 2*R1*R2</p>
<p>NOTE: reaction is a string containing a reaction id</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Gene</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">label</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">active</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Contains all the information about a gene (or gene+protein construct depending on your philosophy)</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.getLabel">
<span class="sig-name descname"><span class="pre">getLabel</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the gene label</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.isActive">
<span class="sig-name descname"><span class="pre">isActive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns whether the gene is active or not</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.resetActivity">
<span class="sig-name descname"><span class="pre">resetActivity</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Reset the gene to its default activity state</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.setActive">
<span class="sig-name descname"><span class="pre">setActive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Set the gene to be active</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplements Fbase method</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.setInactive">
<span class="sig-name descname"><span class="pre">setInactive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Set the gene to be inactive</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Gene.setLabel">
<span class="sig-name descname"><span class="pre">setLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">label</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the gene label, checks that the new label is unique</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">GeneProteinAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">protein</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_compiled</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This class associates genes to proteins.</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.addAssociation">
<span class="sig-name descname"><span class="pre">addAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">assoc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a gene/protein association expression</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.addGeneref">
<span class="sig-name descname"><span class="pre">addGeneref</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">geneid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a gene reference to the list of gene references</p>
<blockquote>
<div><ul class="simple">
<li><p><em>geneid</em> a valid model Gene id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.createAssociationAndGeneRefsFromString">
<span class="sig-name descname"><span class="pre">createAssociationAndGeneRefsFromString</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">assoc</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altlabels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Evaluate the gene/protein association and add the genes necessary to evaluate it
Note that this GPR should be added to a model with cmod.addGPRAssociation() before calling this method</p>
<blockquote>
<div><ul class="simple">
<li><p><em>assoc</em> the COBRA style gene protein association</p></li>
<li><p><em>altlabels</em> [default=None] a dictionary containing a label&lt;–&gt;id mapping</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.createAssociationAndGeneRefsFromTree">
<span class="sig-name descname"><span class="pre">createAssociationAndGeneRefsFromTree</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gprtree</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altlabels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Evaluate the GPR tree and add the genes necessary to evaluate it
Note that this GPR should be added to a model with cmod.addGPRAssociation() before calling this method</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gprtree</em> the CBMPy GPR tree data structure</p></li>
<li><p><em>altlabels</em> [default=None] a dictionary containing a label&lt;–&gt;id mapping</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.deleteGeneFromAssociation">
<span class="sig-name descname"><span class="pre">deleteGeneFromAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a gene id from the gene association. <em>WARNING</em> this process is irreversible!!</p>
<ul class="simple">
<li><p><em>gid</em> a valid gene identifier (not label)</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.deleteGeneref">
<span class="sig-name descname"><span class="pre">deleteGeneref</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a gene reference</p>
<ul class="simple">
<li><p><em>geneid</em> a valid model Gene id</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.evalAssociation">
<span class="sig-name descname"><span class="pre">evalAssociation</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns an integer value representing the logical associations or None.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getActiveGenes">
<span class="sig-name descname"><span class="pre">getActiveGenes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of active gene objects</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getAssociationStr">
<span class="sig-name descname"><span class="pre">getAssociationStr</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_labels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the gene association string, alternatively return string with labels</p>
<ul class="simple">
<li><p><em>use_lablels</em> [default=False] return the gene association string with labels rather than geneId’s (FBCv2 issue)</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getGene">
<span class="sig-name descname"><span class="pre">getGene</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a gene object with id</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getGeneIds">
<span class="sig-name descname"><span class="pre">getGeneIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of gene id’s</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getGeneLabels">
<span class="sig-name descname"><span class="pre">getGeneLabels</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of gene labels associated with this GPRass</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getGenes">
<span class="sig-name descname"><span class="pre">getGenes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of gene objects associated with this GPRass</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getProtein">
<span class="sig-name descname"><span class="pre">getProtein</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the protein associated with this set of genes</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getTree">
<span class="sig-name descname"><span class="pre">getTree</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the dictionary/tree representation of the GPR</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.getTreeCopy">
<span class="sig-name descname"><span class="pre">getTreeCopy</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a copy of the dictionary/tree representation of the GPR</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.isProteinActive">
<span class="sig-name descname"><span class="pre">isProteinActive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This returns a boolean which indicates the result of evaluating the gene association. If the result is positive
then the protein is expressed and <em>True</em> is returned, otherwise if the expression evaluates to a value of 0 then
the protein is not expressed and  <em>False</em> is returned.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setAllGenesActive">
<span class="sig-name descname"><span class="pre">setAllGenesActive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Activate all genes in association</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setAllGenesInactive">
<span class="sig-name descname"><span class="pre">setAllGenesInactive</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Deactivates all genes in association</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setGeneActive">
<span class="sig-name descname"><span class="pre">setGeneActive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a gene to be inactive</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setGeneInactive">
<span class="sig-name descname"><span class="pre">setGeneInactive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a gene to be inactive</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setProtein">
<span class="sig-name descname"><span class="pre">setProtein</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protein</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the protein associated with this set of genes</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.GeneProteinAssociation.setTree">
<span class="sig-name descname"><span class="pre">setTree</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tree</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a GPR dictionary/tree representation to the GPR.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>tree</em> a dictionary representation of a GPR.</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Group</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Container for SBML groups</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.addMember">
<span class="sig-name descname"><span class="pre">addMember</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add member CBMPy object(s) to the group</p>
<blockquote>
<div><ul class="simple">
<li><p><em>obj</em> either a single, tuple or list of CBMPy objects</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.addSharedMIRIAMannotation">
<span class="sig-name descname"><span class="pre">addSharedMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a qualified MIRIAM annotation or entity to the list of members (all) rather than the group itself:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158 or fully qualifies url (if only_qual_uri)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.assignAllSharedPropertiesToMembers">
<span class="sig-name descname"><span class="pre">assignAllSharedPropertiesToMembers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">overwrite</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Assigns all group shared properties (notes, annotations, MIRIAM annotations, SBO) to the group members.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>overwrite</em> [default=False] overwrite the target notes if they are defined</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.assignSharedAnnotationToMembers">
<span class="sig-name descname"><span class="pre">assignSharedAnnotationToMembers</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This function merges or updates the group member objects annotations with the group shared annotation.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.assignSharedMIRIAMannotationToMembers">
<span class="sig-name descname"><span class="pre">assignSharedMIRIAMannotationToMembers</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This function merges or updates the group member objects MIRIAM annotations with the group shared MIRIAM annotation.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.assignSharedNotesToMembers">
<span class="sig-name descname"><span class="pre">assignSharedNotesToMembers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">overwrite</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Assigns the group shared notes to the group members.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>overwrite</em> [default=False] overwrite the target notes if they are defined</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.assignSharedSBOtermsToMembers">
<span class="sig-name descname"><span class="pre">assignSharedSBOtermsToMembers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">overwrite</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Assigns the group shared member SBO term to the group members.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>overwrite</em> [default=False] overwrite the target SBO term if it is defined</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.clone">
<span class="sig-name descname"><span class="pre">clone</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a clone of this object. Note the for Groups this is a shallow copy, in that the reference
objects themselves are not cloned only the group (and attributes)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.deleteMember">
<span class="sig-name descname"><span class="pre">deleteMember</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">oid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a group member with group id.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>oid</em> group member id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getKind">
<span class="sig-name descname"><span class="pre">getKind</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the group kind</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getMember">
<span class="sig-name descname"><span class="pre">getMember</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the group member object that corresponds to mid</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mid</em> the id of the requested object</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getMemberIDs">
<span class="sig-name descname"><span class="pre">getMemberIDs</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">as_set</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the ids of the member objects.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>as_set</em> return id’s as a set rather than a list</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getMembers">
<span class="sig-name descname"><span class="pre">getMembers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">as_set</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the member objects of the group.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>as_set</em> return objects as a set rather than a list</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getSharedAnnotations">
<span class="sig-name descname"><span class="pre">getSharedAnnotations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a dictionary of the shared member annotations (rather than the group attribute).</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getSharedMIRIAMannotations">
<span class="sig-name descname"><span class="pre">getSharedMIRIAMannotations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a dictionary of the shared member MIRIAM annotations (rather than the group attribute).</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getSharedNotes">
<span class="sig-name descname"><span class="pre">getSharedNotes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the shared member notes (rather than the group attribute).</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.getSharedSBOterm">
<span class="sig-name descname"><span class="pre">getSharedSBOterm</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the shared member SBO term (rather than the group attribute).</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.hasMember">
<span class="sig-name descname"><span class="pre">hasMember</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a boolean indicating whether a member is in the group.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>mid</em> the id to check</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.serialize">
<span class="sig-name descname"><span class="pre">serialize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize object, returns a string by default</p>
<blockquote>
<div><ul class="simple">
<li><dl class="simple">
<dt><em>protocol</em> [default=0] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># Reimplemented in Model</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.serializeToDisk">
<span class="sig-name descname"><span class="pre">serializeToDisk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize to disk using pickle protocol:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>filename</em> the name of the output file</p></li>
<li><dl class="simple">
<dt><em>protocol</em> [default=2] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># Reimplemented in Model</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.setKind">
<span class="sig-name descname"><span class="pre">setKind</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">kind</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the kind or type of the group, this must be one of: ‘collection’, ‘partonomy’, ‘classification’.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>kind</em> the kind</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.setSharedAnnotation">
<span class="sig-name descname"><span class="pre">setSharedAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the list of members (all) annotation as a key : value pair.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>key</em> the annotation key</p></li>
<li><p><em>value</em> the annotation value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.setSharedNotes">
<span class="sig-name descname"><span class="pre">setSharedNotes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">notes</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the group of objects notes attribute (all):</p>
<blockquote>
<div><ul class="simple">
<li><p><em>notes</em> the note string, should preferably be (X)HTML for SBML</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Group.setSharedSBOterm">
<span class="sig-name descname"><span class="pre">setSharedSBOterm</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sbo</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the SBO term for the the members of the group (all).</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sbo</em> the SBOterm with format: “SBO:&lt;7 digit integer&gt;”</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.GroupMemberAttributes">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">GroupMemberAttributes</span></span></dt>
<dd><p>Contains the shared attributes of the group members (equivalent to SBML annotation on ListOfMembers)</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Container for constraint based model, adds methods for manipulating:</p>
<blockquote>
<div><ul class="simple">
<li><p>objectives</p></li>
<li><p>constraints</p></li>
<li><p>reactions</p></li>
<li><p>species</p></li>
<li><p>compartments</p></li>
<li><p>groups</p></li>
<li><p>parameters</p></li>
<li><p>N a structmatrix object</p></li>
</ul>
</div></blockquote>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addCompartment">
<span class="sig-name descname"><span class="pre">addCompartment</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">comp</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated Compartment object to the CBM model</p>
<ul class="simple">
<li><p><em>comp</em> an instance of the Compartment class</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addFluxBound">
<span class="sig-name descname"><span class="pre">addFluxBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fluxbound</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbexists</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated FluxBound object to the FBA model</p>
<ul class="simple">
<li><p><em>fluxbound</em> an instance of the FluxBound class</p></li>
<li><p><em>fbexists</em> [default=None] this is a list of strings which contains fluxbounds that have been added to the model, see sample code below.</p></li>
</ul>
<p>The format of the string is ‘reactionid_boundtype’</p>
<p><a href="#id1"><span class="problematic" id="id2">``</span></a><a href="#id3"><span class="problematic" id="id4">`</span></a>python
fbexists = []
for fluxbound in list_of_fluxbounds:</p>
<blockquote>
<div><p>model.addFluxBound(fluxbound, fbexists=fbexists)
fbexists.append(“{}_{}”.format(fluxbound.getReactionId(), fluxbound.getType()))</p>
</div></blockquote>
<p><a href="#id5"><span class="problematic" id="id6">``</span></a><a href="#id7"><span class="problematic" id="id8">`</span></a></p>
<p>Using the fbexists list drastically reduces the time it takes to add fluxbounds but circumvents any sort of existence checking and should <em>only</em> be
used as shown above when constructing a model from scratch. Alternativel, you need to prepopulate fbexists with existing fluxbound component information:</p>
<p><code class="docutils literal notranslate"><span class="pre">`python</span>
<span class="pre">fbexists</span> <span class="pre">=</span> <span class="pre">[&quot;{}_{}&quot;.format(fluxbound.getReactionId(),</span> <span class="pre">fluxbound.getType())</span> <span class="pre">for</span> <span class="pre">fluxbound</span> <span class="pre">in</span> <span class="pre">model.flux_bounds]</span>
<span class="pre">`</span></code></p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addGPRAssociation">
<span class="sig-name descname"><span class="pre">addGPRAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gpr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">update_idx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a GeneProteinAssociation instance to the model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gpr</em> an instantiated GeneProteinAssociation object</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addGene">
<span class="sig-name descname"><span class="pre">addGene</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gene</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated Gene object to the FBA model</p>
<ul class="simple">
<li><p><em>gene</em> an instance of the G class</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addGroup">
<span class="sig-name descname"><span class="pre">addGroup</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated group object to the model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>obj</em> the Group instance</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addMIRIAMannotation">
<span class="sig-name descname"><span class="pre">addMIRIAMannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">qual</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">entity</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a qualified MIRIAM annotation or entity:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>qual</em> a Biomodels biological qualifier e.g. “is” “isEncodedBy”</p></li>
<li><p><em>entity</em> a MIRIAM resource entity e.g. “ChEBI”</p></li>
<li><p><em>mid</em> the entity id e.g. CHEBI:17158</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addModelCreator">
<span class="sig-name descname"><span class="pre">addModelCreator</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">firstname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lastname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">organisation</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">email</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a model creator to the list of model creators, only the first and fmaily names are mandatory:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>firstname</em></p></li>
<li><p><em>lastname</em></p></li>
<li><p><em>organisation</em> [default=None]</p></li>
<li><p><em>email</em>  [default=None]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addObjective">
<span class="sig-name descname"><span class="pre">addObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">active</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated Objective object to the FBA model</p>
<ul class="simple">
<li><p><em>obj</em> an instance of the Objective class</p></li>
<li><p><em>active</em> [default=False] flag this objective as the active objective (fba.activeObjIdx)</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addParameter">
<span class="sig-name descname"><span class="pre">addParameter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">par</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated Parameter object to the model</p>
<ul class="simple">
<li><p><em>par</em> an instance of the Parameter class</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addReaction">
<span class="sig-name descname"><span class="pre">addReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">create_default_bounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds a reaction object to the model</p>
<ul class="simple">
<li><p><em>reaction</em> an instance of the Reaction class</p></li>
<li><p><em>create_default_bounds</em> create default reaction bounds, irreversible 0 &lt;= J &lt;= INF, reversable -INF &lt;= J &lt;= INF</p></li>
<li><p><em>silent</em> [default=False] if enabled this disables the printing of information messages</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addSpecies">
<span class="sig-name descname"><span class="pre">addSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">species</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an instantiated Species object to the FBA model</p>
<ul class="simple">
<li><p><em>species</em> an instance of the Species class</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addUserConstraint">
<span class="sig-name descname"><span class="pre">addUserConstraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fluxes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&gt;='</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a user defined constraint to FBA model, this is additional to the automatically determined Stoichiometric constraints.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>pid</em> user constraint name/id, use <cite>None</cite> for auto-assign</p></li>
<li><p><em>fluxes</em> a list of (coefficient, reaction id) pairs where coefficient is a float</p></li>
<li><p><em>operator</em> is one of ‘=’, ‘&gt;=’ or ‘&lt;=’ (&lt; and &gt; will be interpreted as &gt;= or &lt;=)</p></li>
<li><p><em>rhs</em> a float</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.addUserDefinedConstraint">
<span class="sig-name descname"><span class="pre">addUserDefinedConstraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">udc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a  User Defined Constraint object to the FBA model</p>
<ul class="simple">
<li><p><em>obj</em> an instance of the UserDefinedConstraint class</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.buildStoichMatrix">
<span class="sig-name descname"><span class="pre">buildStoichMatrix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">matrix_type</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'numpy'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">only_return</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build the stoichiometric matrix N and additional constraint matrix CN (if required)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>matrix_type</em> [default=’numpy’] the type of matrix to use to generate constraints</p>
<ul>
<li><p><em>numpy</em> a NumPy matrix default</p></li>
<li><p><em>sympy</em> a SymPy symbolic matrix, if available note the denominator limit can be set in <code class="docutils literal notranslate"><span class="pre">CBModel.__CBCONFIG__['SYMPY_DENOM_LIMIT']</span> <span class="pre">=</span> <span class="pre">10**12</span></code></p></li>
<li><p><em>scipy_csr</em> create using NumPy but store as SciPy csr_sparse</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p><em>only_return</em> [default=False] <strong>IMPORTANT</strong> only returns the stoichiometric matrix and constraint matrix (if required),
does not update the model</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.changeAllFluxBoundsWithValue">
<span class="sig-name descname"><span class="pre">changeAllFluxBoundsWithValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">old</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Replaces all flux bounds with value “old” with a new value “new”:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>old</em> value</p></li>
<li><p><em>new</em> value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.clone">
<span class="sig-name descname"><span class="pre">clone</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a clone of this object.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.convertUserConstraintsToUserDefinedConstraints">
<span class="sig-name descname"><span class="pre">convertUserConstraintsToUserDefinedConstraints</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>If a model is loaded with the old CBMPy specific constraint data structures json files and dictionaries, this function will
upmark it to the new FBCv3 data structures</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.copyUserDefinedConstraintsToUserConstraints">
<span class="sig-name descname"><span class="pre">copyUserDefinedConstraintsToUserConstraints</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This is a workaround until I complete full UserDefinedConstraints support</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createCompartment">
<span class="sig-name descname"><span class="pre">createCompartment</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">dimensions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">3</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">volume</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new compartment and add it to the model if the id does not exist</p>
<ul class="simple">
<li><p><em>cid</em> compartment id</p></li>
<li><p><em>name</em> [None] compartment name</p></li>
<li><p><em>size</em> [1] compartment size</p></li>
<li><p><em>dimensions</em> [3] compartment size dimensions</p></li>
<li><p><em>volume</em> [None] compartment volume</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createGeneAssociationsFromAnnotations">
<span class="sig-name descname"><span class="pre">createGeneAssociationsFromAnnotations</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">annotation_key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'GENE</span> <span class="pre">ASSOCIATION'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">replace_existing</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add genes to the model using the definitions stored in the annotation key. If this fails it tries some standard annotation
keys: GENE ASSOCIATION, GENE_ASSOCIATION, gene_association, gene association.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>annotation_key</em> the annotation dictionary key that holds the gene association for the protein/enzyme</p></li>
<li><p><em>replace_existing</em> [default=True] replace existing annotations, otherwise only new ones are added</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createGeneProteinAssociation">
<span class="sig-name descname"><span class="pre">createGeneProteinAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protein</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">assoc</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gene_pattern</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">update_idx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altlabels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create and add a gene protein relationship to the model, note genes are mapped on protein objects which may or may not be reactions</p>
<blockquote>
<div><ul class="simple">
<li><p><em>protein</em> in this case the reaction</p></li>
<li><p><em>assoc</em> the COBRA style gene protein association</p></li>
<li><p><em>gid</em> the unique id</p></li>
<li><p><em>name</em> the optional name</p></li>
<li><p><em>gene_pattern</em> deprecated, not needed anymore</p></li>
<li><p><em>update_idx</em> update the model gene index, not used</p></li>
<li><p><em>altlabels</em> [default=None] alternative labels for genes, default uses geneIds</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createGeneProteinAssociationFromTree">
<span class="sig-name descname"><span class="pre">createGeneProteinAssociationFromTree</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protein</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gprtree</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gene_pattern</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">update_idx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altlabels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create and add a gene protein relationship to the model, note genes are mapped on protein objects which may or may not be reactions</p>
<blockquote>
<div><ul class="simple">
<li><p><em>protein</em> in this case the reaction</p></li>
<li><p><em>gprtree</em> the CBMPy GPR dictionary tree</p></li>
<li><p><em>gid</em> the unique id</p></li>
<li><p><em>name</em> the optional name</p></li>
<li><p><em>gene_pattern</em> deprecated, not needed anymore</p></li>
<li><p><em>update_idx</em> update the model gene index, not used</p></li>
<li><p><em>altlabels</em> [default=None] alternative labels for genes, default uses geneIds</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createGroup">
<span class="sig-name descname"><span class="pre">createGroup</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create an empty group with</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gid</em> the unique group id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createObjectiveFunction">
<span class="sig-name descname"><span class="pre">createObjectiveFunction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">osense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'maximize'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">active</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">delete_current_obj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a single variable objective function:</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>rid</strong> The</p></li>
<li><p><strong>coefficient</strong> [default=1]</p></li>
<li><p><strong>osense</strong> [default=’maximize’]</p></li>
<li><p><strong>active</strong> [default=True]</p></li>
<li><p><strong>delete_current_obj</strong> [default=True]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createParameter">
<span class="sig-name descname"><span class="pre">createParameter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constant</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Instantiates a parameter</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReaction">
<span class="sig-name descname"><span class="pre">createReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reversible</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">create_default_bounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new blank reaction and add it to the model:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>id</em> the unique reaction ID</p></li>
<li><p><em>name</em> the reaction name</p></li>
<li><p><em>reversible</em> [default=True] the reaction reversibility. True is reversible, False is irreversible</p></li>
<li><p><em>create_default_bounds</em> create default reaction bounds, irreversible 0 &lt;= J &lt;= INF, reversable -INF &lt;= J &lt;= INF</p></li>
<li><p><em>silent</em> [default=False] if enabled this disables the printing of information messages</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReactionBounds">
<span class="sig-name descname"><span class="pre">createReactionBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb_value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub_value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new lower bound for a reaction: value &lt;= reaction</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>reaction</strong> the reaction id</p></li>
<li><p><strong>lb_value</strong> the value of the lower bound</p></li>
<li><p><strong>ub_value</strong> the value of the upper bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReactionLowerBound">
<span class="sig-name descname"><span class="pre">createReactionLowerBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new lower bound for a reaction: value &lt;= reaction</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>reaction</strong> the reaction id</p></li>
<li><p><strong>value</strong> the value of the bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReactionNew">
<span class="sig-name descname"><span class="pre">createReactionNew</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reversible</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">create_default_bounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new blank reaction and add it to the model:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>id</em> the unique reaction ID</p></li>
<li><p><em>name</em> the reaction name</p></li>
<li><p><em>reversible</em> [default=True] the reaction reversibility. True is reversible, False is irreversible</p></li>
<li><p><em>create_default_bounds</em> create default reaction bounds, irreversible 0 &lt;= J &lt;= INF, reversable -INF &lt;= J &lt;= INF</p></li>
<li><p><em>silent</em> [default=False] if enabled this disables the printing of information messages</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReactionReagent">
<span class="sig-name descname"><span class="pre">createReactionReagent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">metabolite</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a reagent to an existing reaction, both reaction and metabolites must exist</p>
<blockquote>
<div><ul class="simple">
<li><p><em>reaction</em> a reaction id</p></li>
<li><p><em>metabolite</em> a species/metabolite id</p></li>
<li><p><em>coefficient</em> the reagent coefficient</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createReactionUpperBound">
<span class="sig-name descname"><span class="pre">createReactionUpperBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reaction</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new upper bound for a reaction: reaction &lt;= value</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>reaction</strong> the reaction id</p></li>
<li><p><strong>value</strong> the value of the bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createSingleGeneEffectMap">
<span class="sig-name descname"><span class="pre">createSingleGeneEffectMap</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This takes a model and analyses the logical gene expression patterns. This only needs to be done once,
the result is a dictionary that has boolean effect patterns as keys and the (list of) genes that give rise to
those patterns as values. This map is used by the single gene deletion method for further analysis.</p>
<p>Note this dictionary can also be stored and retrieved separately as long as the model structure is not changed i.e.
the gene associations themselves or order of reactions (stored as the special entry ‘keyJ’).</p>
<p>Stored as self.__single_gene_effect_map__</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createSpecies">
<span class="sig-name descname"><span class="pre">createSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">boundary</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">nan</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compartment</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">charge</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chemFormula</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new species and add it to the model:</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>id</strong> the unique species id</p></li>
<li><p><strong>boundary</strong> [default=False] whether the species is a variable (False) or is a boundary parameter (fixed)</p></li>
<li><p><strong>name</strong> [default=’’] the species name</p></li>
<li><p><strong>value</strong> [default=nan] the value <em>not currently used</em></p></li>
<li><p><strong>compartment</strong> [default=None] the compartment the species is located in</p></li>
<li><p><strong>charge</strong> [default=None] the species charge</p></li>
<li><p><strong>chemFormula</strong> [default=None] the chemical formula</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.createUserDefinedConstraint">
<span class="sig-name descname"><span class="pre">createUserDefinedConstraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">components</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create an FBCv3 UserDefinedConstraint</p>
<ul class="simple">
<li><p><em>pid</em> unique id</p></li>
<li><p><em>lb</em> lower bound float/parameter</p></li>
<li><p><em>ub</em> upper bound float/parameter</p></li>
<li><dl class="simple">
<dt><em>componentents</em> optional, the user defined constraint componenents in the form of a list</dt><dd><p>[(coefficient, variable, type, id), …] and coefficient and variable can be parameters
id is optional</p>
</dd>
</dl>
</li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteAllFluxBoundsWithValue">
<span class="sig-name descname"><span class="pre">deleteAllFluxBoundsWithValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete all flux bounds which have a specified value:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>value</em> the value of the flux bound(s) to delete</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteBoundsForReactionId">
<span class="sig-name descname"><span class="pre">deleteBoundsForReactionId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete bounds connected to reaction, rid</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a valid reaction id</p></li>
<li><p><em>upper</em> [default=True] delete the upper bound</p></li>
<li><p><em>lower</em> [default=True] delete the lower bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteCompartment">
<span class="sig-name descname"><span class="pre">deleteCompartment</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">check_components</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a compartment object with id. Returns True if the compartment is deleted, False if not. In addition if components were checked
a list of id’s that reference the compartment are also returned.</p>
<ul class="simple">
<li><p><em>sid</em> the compartment id</p></li>
<li><p><em>check_components</em> [default=True] if  enabled check that no species or reactions makes</p></li>
</ul>
<p>use of the compartment, fail if it does.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteGPRAssociation">
<span class="sig-name descname"><span class="pre">deleteGPRAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gprid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete a GPR association with id</p>
<ul class="simple">
<li><p><em>gprid</em> the GPR association id</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteGene">
<span class="sig-name descname"><span class="pre">deleteGene</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">also_delete_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes the gene object with gid. Note if you want to delete a gene by label (locus tag etc)
use the deleteGeneByLabel() function.</p>
<ul class="simple">
<li><p><em>gid</em> the gene Id</p></li>
<li><p><em>also_delete_gpr</em> [default=True] automatically delete GPR’s that contain no gene references</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteGeneByLabel">
<span class="sig-name descname"><span class="pre">deleteGeneByLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">label</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">also_delete_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes the gene object with label (b2003 etc).</p>
<ul class="simple">
<li><p><em>label</em> the gene with label to be deleted</p></li>
<li><p><em>also_delete_gpr</em> [default=True] automatically delete GPR’s that contain no gene references</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteGroup">
<span class="sig-name descname"><span class="pre">deleteGroup</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete a group with</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gid</em> the unique group id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteNonReactingSpecies">
<span class="sig-name descname"><span class="pre">deleteNonReactingSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">simulate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes all species that are not reagents (do not to take part in a reaction).
<em>Warning</em> this deletion is permanent and greedy (not selective). Returns a list of (would be) deleted species</p>
<blockquote>
<div><ul class="simple">
<li><p><em>simulate</em> [default=True] only return a list of the speciesId’s that would have been deleted if False</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteObjective">
<span class="sig-name descname"><span class="pre">deleteObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">objective_id</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete objective function:</p>
<blockquote>
<div><p><em>objective_id</em> the id of the objective function. If objective_id is given  as ‘active’ then the active objective is deleted.</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteReactionAndBounds">
<span class="sig-name descname"><span class="pre">deleteReactionAndBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete all reaction and bounds connected to reaction</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a valid reaction id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.deleteSpecies">
<span class="sig-name descname"><span class="pre">deleteSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">also_delete</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deletes a species object with id</p>
<ul class="simple">
<li><p><em>sid</em> the species id</p></li>
<li><p><em>also_delete</em> [default=None] only delete the species</p></li>
</ul>
<p>– ‘reagents’ delete the species from the reactions it participates in as a <strong>reagent</strong>
– ‘reactions’ deletes the <strong>reactions</strong> that the species participates in</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.emptyUndelete">
<span class="sig-name descname"><span class="pre">emptyUndelete</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Empties the undelete cache</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.exportFVAdata">
<span class="sig-name descname"><span class="pre">exportFVAdata</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Export the fva data as an array and list of reaction id’s</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.exportUserConstraints">
<span class="sig-name descname"><span class="pre">exportUserConstraints</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Exports user constraints in json</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.findFluxesForConnectedSpecies">
<span class="sig-name descname"><span class="pre">findFluxesForConnectedSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">metab</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of (reaction, flux value) pairs that this metabolite appears as a reagent of</p>
<blockquote>
<div><ul class="simple">
<li><p><em>metab</em> the metabolite name</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getActiveObjective">
<span class="sig-name descname"><span class="pre">getActiveObjective</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the active objective object.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getActiveObjectiveReactionIds">
<span class="sig-name descname"><span class="pre">getActiveObjectiveReactionIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the active objective flux objective reaction id’s</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getActiveObjectiveStoichiometry">
<span class="sig-name descname"><span class="pre">getActiveObjectiveStoichiometry</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of (coefficient, flux_objective) tuples</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getAllFluxBounds">
<span class="sig-name descname"><span class="pre">getAllFluxBounds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>DEPRECATED
Returns a dictionary of all flux bounds [id:value]</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getAllGeneActivities">
<span class="sig-name descname"><span class="pre">getAllGeneActivities</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of genes (if defined) and whether they are active or not</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getAllGeneProteinAssociations">
<span class="sig-name descname"><span class="pre">getAllGeneProteinAssociations</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_labels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of genes associated with each protein</p>
<blockquote>
<div><ul class="simple">
<li><p><em>use_labels</em> use V2 gene labels rather than ID’s</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getAllProteinActivities">
<span class="sig-name descname"><span class="pre">getAllProteinActivities</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of reactions (if genes and GPR’s are defined) and whether they are active or not</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getAllProteinGeneAssociations">
<span class="sig-name descname"><span class="pre">getAllProteinGeneAssociations</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_labels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of the proteins associated with each gene</p>
<blockquote>
<div><ul class="simple">
<li><p><em>use_labels</em> use V2 gene labels rather than ID’s</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getBoundarySpeciesIds">
<span class="sig-name descname"><span class="pre">getBoundarySpeciesIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return all boundary species associated with reaction</p>
<blockquote>
<div><ul class="simple">
<li><p>rid [default=None] by default return all boundary species in a model, alternatively a string containing a reaction id or list of reaction id’s</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getCompartment">
<span class="sig-name descname"><span class="pre">getCompartment</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a compartment object with <em>cid</em></p>
<blockquote>
<div><ul class="simple">
<li><p><em>cid</em> compartment ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getCompartmentIds">
<span class="sig-name descname"><span class="pre">getCompartmentIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of compartment Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getCompartmentObjects">
<span class="sig-name descname"><span class="pre">getCompartmentObjects</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of compartment objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getDescription">
<span class="sig-name descname"><span class="pre">getDescription</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the model description which was stored in the SBML &lt;notes&gt; field</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getExchangeReactionIds">
<span class="sig-name descname"><span class="pre">getExchangeReactionIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns id’s of reactions where the ‘is_exchange’ attribute set to True. This is by default
reactions that contain a boundary species.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getExchangeReactions">
<span class="sig-name descname"><span class="pre">getExchangeReactions</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns reaction instances where the ‘is_exchange’ attribute set to True. This is by default
reactions that contain a boundary species.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxBoundByID">
<span class="sig-name descname"><span class="pre">getFluxBoundByID</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a FluxBound/Parameter with id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> the fluxBound ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxBoundByReactionID">
<span class="sig-name descname"><span class="pre">getFluxBoundByReactionID</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bound</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a FluxBound/Parameter instance</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction ID</p></li>
<li><p><em>bound</em> the bound: ‘upper’, ‘lower’, ‘equality’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxBoundIds">
<span class="sig-name descname"><span class="pre">getFluxBoundIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of fluxbound Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxBoundsByReactionID">
<span class="sig-name descname"><span class="pre">getFluxBoundsByReactionID</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns all FluxBound instances connected to a reactionId as a tuple of valid
(lower, upper, None) or (None, None, equality) or alternatively invalid (lower, upper, equality).</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction ID</p></li>
</ul>
<p><em>under evaluation</em></p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxesAssociatedWithCompartments">
<span class="sig-name descname"><span class="pre">getFluxesAssociatedWithCompartments</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">compartments</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determines all reactions and flux values associated with a list of
compartments. This function can be used to find all transport reactions
between compartments, e.g. the cytosol and mitochondria. If the
compartment IDs are ‘cyt’ and ‘mit’, respectively, you can call
“your_model.getFluxesAssociatedWithCompartments([‘cyt’, ‘mit’])”
to get all fluxes between these compartments.</p>
<dl class="simple">
<dt><em>compartments</em>: a list or set of compartment IDs.</dt><dd><p>To check the existing compartment IDs in your model
call “your_model.getCompartmentIds()”</p>
</dd>
</dl>
<p>:returns a dictionary with reaction IDs as keys and corresponding
flux values as values</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getFluxesAssociatedWithSpecies">
<span class="sig-name descname"><span class="pre">getFluxesAssociatedWithSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">metab</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of (reaction, flux value) pairs that this metabolite appears as a reagent in</p>
<blockquote>
<div><ul class="simple">
<li><p><em>metab</em> the metabolite name</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRIdAssociatedWithGeneId">
<span class="sig-name descname"><span class="pre">getGPRIdAssociatedWithGeneId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the GPR(s) associated with the gene id:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gid</em> a gene id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRIdAssociatedWithGeneLabel">
<span class="sig-name descname"><span class="pre">getGPRIdAssociatedWithGeneLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">label</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the GPR Id’s associated with the gene label:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>label</em> a gene label</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRIds">
<span class="sig-name descname"><span class="pre">getGPRIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of GPR Id’s, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRObjects">
<span class="sig-name descname"><span class="pre">getGPRObjects</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of GPR objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRassociation">
<span class="sig-name descname"><span class="pre">getGPRassociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gprid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a gene protein association object that has the identifier:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gprid</em> the gene protein identifier</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRforReaction">
<span class="sig-name descname"><span class="pre">getGPRforReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the GPR associated with the reaction id:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a reaction id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGPRforReactionAsDict">
<span class="sig-name descname"><span class="pre">getGPRforReactionAsDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">useweakref</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the GPR associated with the reaction id as a nested dictionary structure:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a reaction id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGene">
<span class="sig-name descname"><span class="pre">getGene</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a gene object that has the identifier:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gid</em> the gene identifier</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneByLabel">
<span class="sig-name descname"><span class="pre">getGeneByLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">label</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Given a gene label return the corresponding Gene object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>label</em></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneIdFromLabel">
<span class="sig-name descname"><span class="pre">getGeneIdFromLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">label</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Given a gene label it returns the corresponding Gene id or None</p>
<blockquote>
<div><ul class="simple">
<li><p><em>label</em></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneIds">
<span class="sig-name descname"><span class="pre">getGeneIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of gene Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneLabels">
<span class="sig-name descname"><span class="pre">getGeneLabels</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of gene labels (locus tags), applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the label</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneObjects">
<span class="sig-name descname"><span class="pre">getGeneObjects</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of gene objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGeneObjectsByLabel">
<span class="sig-name descname"><span class="pre">getGeneObjectsByLabel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of gene objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the label</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGroup">
<span class="sig-name descname"><span class="pre">getGroup</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">gid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a group with</p>
<blockquote>
<div><ul class="simple">
<li><p><em>gid</em> the unique group id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGroupIds">
<span class="sig-name descname"><span class="pre">getGroupIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get all group ids</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGroupMembership">
<span class="sig-name descname"><span class="pre">getGroupMembership</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns group membership of items in groups. Returns {object_id: [‘group_id1’, ‘group_id2’]}</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getGroupNames">
<span class="sig-name descname"><span class="pre">getGroupNames</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get all group names</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getIrreversibleReactionIds">
<span class="sig-name descname"><span class="pre">getIrreversibleReactionIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of irreversible reaction Id’s</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getModel">
<span class="sig-name descname"><span class="pre">getModel</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Overrides the FBase inherited method, returns own instance.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getModelCreators">
<span class="sig-name descname"><span class="pre">getModelCreators</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return model creator information</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getObjFuncValue">
<span class="sig-name descname"><span class="pre">getObjFuncValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the objective function value</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getObject">
<span class="sig-name descname"><span class="pre">getObject</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>pid</em> returns a model object with pid or None</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getObjectiveIds">
<span class="sig-name descname"><span class="pre">getObjectiveIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of objective function Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getOptimalValue">
<span class="sig-name descname"><span class="pre">getOptimalValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the optimal value of the objective function</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getParameter">
<span class="sig-name descname"><span class="pre">getParameter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a parameter object with pid</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReaction">
<span class="sig-name descname"><span class="pre">getReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a reaction object with <em>id</em></p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> reaction ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionActivity">
<span class="sig-name descname"><span class="pre">getReactionActivity</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>If there is a GPR and genes associated with the reaction ID then return either active=True or inactive=False
Note if there is no gene associated information then this will return active.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a reaction id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionBounds">
<span class="sig-name descname"><span class="pre">getReactionBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the bounds of a reaction, returns a tuple of rid, lowerbound value, upperbound value and equality value (None means bound does not exist).</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionIds">
<span class="sig-name descname"><span class="pre">getReactionIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of reaction Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionIdsAssociatedWithSpecies">
<span class="sig-name descname"><span class="pre">getReactionIdsAssociatedWithSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">metab</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of (reaction, flux value) pairs that this metabolite appears as a reagent in</p>
<blockquote>
<div><ul class="simple">
<li><p><em>metab</em> the metabolite name</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionLowerBound">
<span class="sig-name descname"><span class="pre">getReactionLowerBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the lower bound of a reaction (it it exists) or None</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionNames">
<span class="sig-name descname"><span class="pre">getReactionNames</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of reaction names, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the name</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionObjects">
<span class="sig-name descname"><span class="pre">getReactionObjects</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of reaction objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionUpperBound">
<span class="sig-name descname"><span class="pre">getReactionUpperBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the upper bound of a reaction (it it exists) or None</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReactionValues">
<span class="sig-name descname"><span class="pre">getReactionValues</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">only_exchange</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a dictionary of ReactionID : ReactionValue pairs:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>only_exchange</em> [default=False] only return the reactions labelled as exchange</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getReversibleReactionIds">
<span class="sig-name descname"><span class="pre">getReversibleReactionIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a list of reversible reaction Id’s</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getSolutionVector">
<span class="sig-name descname"><span class="pre">getSolutionVector</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a vector of solution values</p>
<blockquote>
<div><ul class="simple">
<li><p><em>names</em> [default=False] if True return a solution vector and list of names</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getSpecies">
<span class="sig-name descname"><span class="pre">getSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a species object with <em>sid</em></p>
<blockquote>
<div><ul class="simple">
<li><p><em>sid</em> a specied ID</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getSpeciesIds">
<span class="sig-name descname"><span class="pre">getSpeciesIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of species Ids, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.getSpeciesObjects">
<span class="sig-name descname"><span class="pre">getSpeciesObjects</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of species objects, applies a substring search if substring is defined</p>
<blockquote>
<div><ul class="simple">
<li><p><em>substring</em> search for this pattern anywhere in the id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.hasObject">
<span class="sig-name descname"><span class="pre">hasObject</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>pid</em> returns a boolean if there is a registered object with pid-</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.importUserConstraints">
<span class="sig-name descname"><span class="pre">importUserConstraints</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Exports user constraints in json</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.registerObjectInGlobalStore">
<span class="sig-name descname"><span class="pre">registerObjectInGlobalStore</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>object</em></p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.renameObjectIds">
<span class="sig-name descname"><span class="pre">renameObjectIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">prefix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">suffix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ignore</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This method is designed for target=”all” other use may result in inconsistent models. Update: “species” and “reactions”
should also work as advertised, please check results.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>prefix</em> [None] if supplied add as a prefix</p></li>
<li><p><em>suffix</em> [None] if supplied add as a suffix</p></li>
<li><p><em>target</em> [‘all’] specify what class of objects to rename</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>‘species’</p></li>
<li><p>‘reactions’</p></li>
<li><p>‘bounds’</p></li>
<li><p>‘objectives’</p></li>
<li><p>‘all’</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p><em>ignore</em> [default=None] a list of id’s to ignore</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.resetAllGenes">
<span class="sig-name descname"><span class="pre">resetAllGenes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">update_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Resets all genes to their default activity state (normally on)</p>
<ul class="simple">
<li><p><em>update_reactions</em> [default=False] update the associated reactions fluxbounds from the gene deletion bounds if they exist</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.resetAllInactiveGPRBounds">
<span class="sig-name descname"><span class="pre">resetAllInactiveGPRBounds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Resets all reaction bounds modified by the <code class="docutils literal notranslate"><span class="pre">cmod.setAllInactiveGeneReactionBounds()</span></code> method to their previous values</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.serialize">
<span class="sig-name descname"><span class="pre">serialize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize object, returns a string by default</p>
<blockquote>
<div><ul class="simple">
<li><dl class="simple">
<dt><em>protocol</em> [default=0] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># overloaded in CBModel</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.serializeToDisk">
<span class="sig-name descname"><span class="pre">serializeToDisk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">protocol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Serialize to disk using pickle protocol:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>filename</em> the name of the output file</p></li>
<li><dl class="simple">
<dt><em>protocol</em> [default=2] serialize to a string or binary if required,</dt><dd><p>see pickle module documentation for details</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p># overloaded in CBModel</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setAllFluxBounds">
<span class="sig-name descname"><span class="pre">setAllFluxBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">bounds</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>DEPRECATED! use setFluxBoundsFromDict()</p>
<p>Sets all the fluxbounds present in bounds</p>
<blockquote>
<div><ul class="simple">
<li><p><em>bounds</em> a dictionary of [fluxbound_id : value] pairs (not per reaction!!!)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setAllInactiveGPRBounds">
<span class="sig-name descname"><span class="pre">setAllInactiveGPRBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set all reactions that are inactive (as determined by gene and gpr evaluation) to bounds:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lower</em> [default=0.0] the new lower bound</p></li>
<li><p><em>upper</em> [default=0.0] the new upper bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setAllProteinActivities">
<span class="sig-name descname"><span class="pre">setAllProteinActivities</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">activites</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Given a dictionary of activities [rid : boolean] pairs set all the corresponding reactions:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>activities</em> a dictionary of [rid : boolean] pairs</p></li>
<li><p><em>lower</em> [default=0.0] the lower bound of the deactivated flux</p></li>
<li><p><em>upper</em> [default=0.0] the upper bound of the deactivated flux</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setBoundValueByName">
<span class="sig-name descname"><span class="pre">setBoundValueByName</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bound</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deprecated use setReactionBound</p>
<dl class="simple">
<dt>Set a reaction bound</dt><dd><ul class="simple">
<li><p><em>rid</em> the reactions id</p></li>
<li><p><em>value</em> the new value</p></li>
<li><p><em>bound</em> this is either ‘lower’ or ‘upper’</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setCreatedDate">
<span class="sig-name descname"><span class="pre">setCreatedDate</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">date</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the model created date tuple(year, month, day, hour, minute, second)</p>
<ul class="simple">
<li><p><em>date</em> [default=None] default is now (automatic) otherwise (year, month, day, hour, minute, second) e.g. (2012, 09, 24, 13, 34, 00)</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setDescription">
<span class="sig-name descname"><span class="pre">setDescription</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">html</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the model description which translates into the SBML &lt;notes&gt; field.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>html</em> any valid html or the empty string to clear ‘’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setFluxBoundsFromDict">
<span class="sig-name descname"><span class="pre">setFluxBoundsFromDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">bounds</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>DEPRECATED! This method will be modified to use reaction Idin CBMPy 0.9.0
Sets all the fluxbounds present in bounds</p>
<blockquote>
<div><ul class="simple">
<li><p><em>bounds</em> a dictionary of [fluxbound_id : value] pairs (not per reaction!!!)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setGeneActive">
<span class="sig-name descname"><span class="pre">setGeneActive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">g_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">update_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Effectively restores a gene by setting it’s active flag</p>
<blockquote>
<div><ul class="simple">
<li><p><em>g_id</em> a gene ID</p></li>
<li><p><em>update_reactions</em> [default=False] update the associated reactions fluxbounds from the gene deletion bounds if they exist</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setGeneInactive">
<span class="sig-name descname"><span class="pre">setGeneInactive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">g_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">update_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Effectively deletes a gene by setting it’s inactive flag while optionally updating the GPR associated reactions</p>
<blockquote>
<div><ul class="simple">
<li><p><em>g_id</em> a gene ID</p></li>
<li><p><em>update_reactions</em> [default=False] update the associated reactions fluxbounds</p></li>
<li><p><em>lower</em> [default=0.0] the deactivated reaction lower bound</p></li>
<li><p><em>upper</em> [default=0.0] the deactivated reaction upper bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setModifiedDate">
<span class="sig-name descname"><span class="pre">setModifiedDate</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">date</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the model modification date: tuple(year, month, day, hour, minute, second)</p>
<ul class="simple">
<li><p><em>date</em> [default=None] default is now (automatic) otherwise (year, month, day, hour, minute, second) e.g. (2012, 09, 24, 13, 34, 00)</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setObjectiveFlux">
<span class="sig-name descname"><span class="pre">setObjectiveFlux</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">osense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'maximize'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">delete_objflx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set single target reaction flux for the current active objective function.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a string containing a reaction id</p></li>
<li><p><em>coefficient</em> [default=1] an objective flux coefficient</p></li>
<li><p><em>osense</em> the optimization sense must be <strong>maximize</strong> or <strong>minimize</strong></p></li>
<li><p><em>delete_objflx</em> [default=True] delete all existing fluxObjectives in the active objective function</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setPrefix">
<span class="sig-name descname"><span class="pre">setPrefix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">prefix</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This is alpha stuff, target can be:</p>
<blockquote>
<div><ul class="simple">
<li><p>‘species’</p></li>
<li><p>‘reactions’</p></li>
<li><p>‘constraints’</p></li>
<li><p>‘objectives’</p></li>
<li><p>‘all’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setReactionBound">
<span class="sig-name descname"><span class="pre">setReactionBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bound</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a reaction bound</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reactions id</p></li>
<li><p><em>value</em> the new value</p></li>
<li><p><em>bound</em> this is either ‘lower’ or ‘upper’, or ‘equal’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setReactionBounds">
<span class="sig-name descname"><span class="pre">setReactionBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lower</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set both the upper and lower bound of a reaction:</p>
<ul class="simple">
<li><p><em>rid</em> the good old reaction id</p></li>
<li><p><em>lower</em> the lower bound value</p></li>
<li><p><em>upper</em> the upper bound value</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setReactionLowerBound">
<span class="sig-name descname"><span class="pre">setReactionLowerBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a reactions lower bound (if it exists)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reactions id</p></li>
<li><p><em>value</em> the new value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setReactionUpperBound">
<span class="sig-name descname"><span class="pre">setReactionUpperBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set a reactions upper bound (if it exists)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> the reaction id</p></li>
<li><p><em>value</em> the new value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.setSuffix">
<span class="sig-name descname"><span class="pre">setSuffix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">suffix</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This is alpha stuff, target can be:</p>
<blockquote>
<div><ul class="simple">
<li><p>‘species’</p></li>
<li><p>‘reactions’</p></li>
<li><p>‘constraints’</p></li>
<li><p>‘objectives’</p></li>
<li><p>‘all’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.sortReactionsById">
<span class="sig-name descname"><span class="pre">sortReactionsById</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Sorts the reactions by Reaction.id uses the python string sort</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.sortSpeciesById">
<span class="sig-name descname"><span class="pre">sortSpeciesById</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Sorts the reaction list by Reaction.id uses the python string sort</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.splitEqualityFluxBounds">
<span class="sig-name descname"><span class="pre">splitEqualityFluxBounds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Splits any equalit flux bounds into lower and upper bounds.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.testGeneProteinAssociations">
<span class="sig-name descname"><span class="pre">testGeneProteinAssociations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>This method will test the GeneProtein associations and return a list of protein, association pairs</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.unRegisterObjectInGlobalStore">
<span class="sig-name descname"><span class="pre">unRegisterObjectInGlobalStore</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>sid</em></p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Model.updateNetwork">
<span class="sig-name descname"><span class="pre">updateNetwork</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Update the reaction network based on gene activity. If reaction is deactivated then lower and upper bounds are used</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lower</em> [default=0.0] deactivated lower bound</p></li>
<li><p><em>upper</em> [default=0.0] deactivated upper bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Objective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operation</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>An objective function</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.addFluxObjective">
<span class="sig-name descname"><span class="pre">addFluxObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fobj</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">override</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds a FluxObjective instance to the Objective</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fobj</em> the FluxObjective object</p></li>
<li><p><em>override</em> [default=False] override pushing the global id map, this should never be used</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.createFluxObjectives">
<span class="sig-name descname"><span class="pre">createFluxObjectives</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fluxlist</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create and add flux objective objects to this objective function.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fluxlist</em> a list of one or more (‘coefficient’, ‘rid’, ‘type’) triples</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.createQuadraticFluxObjectives">
<span class="sig-name descname"><span class="pre">createQuadraticFluxObjectives</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fluxlist</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create and add quadratic flux objective objects to this objective function.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fluxlist</em> a list of one or more (‘coefficient’, ‘rid’, ‘rid2’, ‘type’) triples</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.deleteAllFluxObjectives">
<span class="sig-name descname"><span class="pre">deleteAllFluxObjectives</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Delete all flux objectives</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjective">
<span class="sig-name descname"><span class="pre">getFluxObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">foid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the flux objective with id.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>foid</em> the flux objective id returns either an object or a list if there are multiply defined flux objectives</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjectiveData">
<span class="sig-name descname"><span class="pre">getFluxObjectiveData</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of ObjectiveFunction components as (coefficient, flux, type) pairs</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjectiveForReaction">
<span class="sig-name descname"><span class="pre">getFluxObjectiveForReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the FluxObjective associated with the suplied rid. If there is more than fluxObjective associated with a reaction (illegal)
then a list of fluxObjectives is returned.</p>
<blockquote>
<div><p><em>rid</em> a reaction id</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjectiveIDs">
<span class="sig-name descname"><span class="pre">getFluxObjectiveIDs</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of ObjectiveFlux ids, for the reaction id’s use <em>getFluxObjectiveReactions()</em>
or for coefficient, fluxobjective pairs use <em>getFluxObjectiveData()</em></p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjectiveReactions">
<span class="sig-name descname"><span class="pre">getFluxObjectiveReactions</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of reactions that are used as flux_objectives</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getFluxObjectives">
<span class="sig-name descname"><span class="pre">getFluxObjectives</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the list of FluxObjective objects.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getLinearFluxObjectives">
<span class="sig-name descname"><span class="pre">getLinearFluxObjectives</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of linear variable flux objective objects</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getOperation">
<span class="sig-name descname"><span class="pre">getOperation</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the operation or sense of the objective</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getQuadraticBivariateFluxObjectives">
<span class="sig-name descname"><span class="pre">getQuadraticBivariateFluxObjectives</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of bivariate quadratic variable flux objective objects</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getQuadraticFluxObjectives">
<span class="sig-name descname"><span class="pre">getQuadraticFluxObjectives</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of quadratic variable flux objective objects</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.setOperation">
<span class="sig-name descname"><span class="pre">setOperation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">operation</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the objective operation (sense)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>operation</em> [default=’maximize’] one of ‘maximize’, ‘maximise’, ‘max’, ‘minimize’, ‘minimise’, ‘min’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Objective.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the attribute ‘’value’’</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Parameter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constant</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Holds parameter information</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.addAssociation">
<span class="sig-name descname"><span class="pre">addAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">assoc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add an object ID to associate with this object</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.deleteAssociation">
<span class="sig-name descname"><span class="pre">deleteAssociation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">assoc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete the object id associated with this object</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.getAssociations">
<span class="sig-name descname"><span class="pre">getAssociations</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the Object ID’s associated with this parameter</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the value attribute:</p>
<ul class="simple">
<li><p><em>value</em> a float</p></li>
</ul>
</dd></dl>

<dl class="py property">
<dt class="sig sig-object py" id="cbmpy.CBModel.Parameter.value">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">value</span></span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Reaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reversible</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Holds reaction information</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.addReagent">
<span class="sig-name descname"><span class="pre">addReagent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reag</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds an instantiated Reagent object to the reaction</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.changeId">
<span class="sig-name descname"><span class="pre">changeId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Changes the Id of the reaction and updates associated FluxBounds</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.createReagent">
<span class="sig-name descname"><span class="pre">createReagent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">metabolite</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a new reagent and add it to the reaction:</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>metabolite</strong> the metabolite name</p></li>
<li><p><strong>coefficient</strong> the</p></li>
</ul>
<p class="attribution">—negative coefficient is a substrate
– positive coefficient is a product</p>
</div></blockquote>
<p>Will fail if a species reference already exists</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.deactivateReaction">
<span class="sig-name descname"><span class="pre">deactivateReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deactivates a reaction by setting its bounds to lower and upper. Restore with reactivateReaction()</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lower</em> [default=0.0] bound</p></li>
<li><p><em>upper</em> [default=0.0] bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.deleteReagentWithSpeciesRef">
<span class="sig-name descname"><span class="pre">deleteReagentWithSpeciesRef</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Delete a reagent (or reagents) that refers to the species id:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sid</em> a species/metabolite id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getEquation">
<span class="sig-name descname"><span class="pre">getEquation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">reverse_symb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'='</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">irreverse_symb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&gt;'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a pretty printed string containing the reaction equation</p>
<blockquote>
<div><ul class="simple">
<li><p><em>reverse_symb</em> [default = ‘=’] the symbol to use for reversible reactions</p></li>
<li><p><em>irreverse_symb</em> [default = ‘&gt;’] the symbol to use for irreversible reactions</p></li>
<li><p><em>use_names</em> [defualt = False] use species names rather than id’s</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getFVAdata">
<span class="sig-name descname"><span class="pre">getFVAdata</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">roundnum</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the data generated by CBSolver.FluxVariabilityAnalysis() for this reaction as a tuple of
(Flux, FVAmin, FVAmax, span) where span is abs(FVAmax - FVAmin). FVAmin or FVAmax is None this indicates no solution
to that particular optimization (infeasible).</p>
<blockquote>
<div><ul class="simple">
<li><p><em>roundnum</em> [default=None] the integer number of roundoff decimals the default is no rounding</p></li>
<li><p><em>silent</em> [default=True] supress output to stdout</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getGPRassociationString">
<span class="sig-name descname"><span class="pre">getGPRassociationString</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_labels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the GPR string associated with this reaction (assuming it exists) or None.</p>
<ul class="simple">
<li><p><em>use_labels</em> [default=True] return string with lab</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getLowerBound">
<span class="sig-name descname"><span class="pre">getLowerBound</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the value of the reactions lower bound</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getProductIds">
<span class="sig-name descname"><span class="pre">getProductIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the reaction products, species identifiers</p>
<ul class="simple">
<li><p><em>use_names</em> [default = False] use species names rather than id’s</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getReagent">
<span class="sig-name descname"><span class="pre">getReagent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the one or more reagent objects which have <em>rid</em>:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a reagent <em>rid</em></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getReagentObjIds">
<span class="sig-name descname"><span class="pre">getReagentObjIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the reagent id’s. For the name of the reagents/metabolites use <em>&lt;reaction&gt;.getSpeciesIds()</em></p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getReagentRefs">
<span class="sig-name descname"><span class="pre">getReagentRefs</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the reagents/metabolites</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getReagentWithSpeciesRef">
<span class="sig-name descname"><span class="pre">getReagentWithSpeciesRef</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the reagent object which refers to the <em>species</em> id. If there are multiple reagents that
refer to the same species a list is returned.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sid</em> the species/metabolite id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getSpeciesIds">
<span class="sig-name descname"><span class="pre">getSpeciesIds</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the reagents/metabolites</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getSpeciesObj">
<span class="sig-name descname"><span class="pre">getSpeciesObj</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the species objects that are reagents</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getStoichiometry">
<span class="sig-name descname"><span class="pre">getStoichiometry</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">altout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of (coefficient, species) pairs for this reaction</p>
<ul class="simple">
<li><p><em>use_names</em> [default = False] use species names rather than id’s</p></li>
<li><p><em>altout</em> [default = False] returns a dictionary [DEPRECATED]</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getSubstrateIds">
<span class="sig-name descname"><span class="pre">getSubstrateIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">use_names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of the reaction substrates, species identifiers</p>
<ul class="simple">
<li><p><em>use_names</em> [defualt = False] use species names rather than id’s</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getUpperBound">
<span class="sig-name descname"><span class="pre">getUpperBound</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the value of the reactions upper bound</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the flux.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.reactivateReaction">
<span class="sig-name descname"><span class="pre">reactivateReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Activates a reaction deactivated with deactivateReaction</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplements &#64;FBase.setId()</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.setLowerBound">
<span class="sig-name descname"><span class="pre">setLowerBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the value of the reactions lower bound</p>
<blockquote>
<div><ul class="simple">
<li><p><em>value</em> a floating point value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.setStoichCoefficient">
<span class="sig-name descname"><span class="pre">setStoichCoefficient</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the stoichiometric coefficient of a reagent that refers to a metabolite. Note <em>negative coefficients</em> are <em>substrates</em>
while <em>positive</em> ones are <em>products</em>. At this point zero coefficients are not allowed</p>
<ul class="simple">
<li><p><em>sid</em> the species/metabolite id</p></li>
<li><p><em>value</em> a floating point value != 0</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.setUpperBound">
<span class="sig-name descname"><span class="pre">setUpperBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the value of the reactions upper bound</p>
<blockquote>
<div><ul class="simple">
<li><p><em>value</em> a floating point value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reaction.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the attribute <em>value</em> in this case the flux.</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">ReactionNew</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-inf</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">inf</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reversible</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Extended reaction class with new upper/lower bound structure</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.deactivateReaction">
<span class="sig-name descname"><span class="pre">deactivateReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">lower</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">upper</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deactivates a reaction by setting its bounds to lower and upper. Restore with reactivateReaction()</p>
<blockquote>
<div><ul class="simple">
<li><p><em>lower</em> [default=0.0] bound</p></li>
<li><p><em>upper</em> [default=0.0] bound</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.getLowerBound">
<span class="sig-name descname"><span class="pre">getLowerBound</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the value of the reactions lower bound</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.getUpperBound">
<span class="sig-name descname"><span class="pre">getUpperBound</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the value of the reactions upper bound</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.reactivateReaction">
<span class="sig-name descname"><span class="pre">reactivateReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">silent</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Activates a reaction deactivated with deactivateReaction</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplements &#64;FBase.setId()</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.setLowerBound">
<span class="sig-name descname"><span class="pre">setLowerBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the value of the reactions lower bound</p>
<blockquote>
<div><ul class="simple">
<li><p><em>value</em> a floating point value</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.ReactionNew.setUpperBound">
<span class="sig-name descname"><span class="pre">setUpperBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the value of the reactions upper bound</p>
<blockquote>
<div><ul class="simple">
<li><p><em>value</em> a floating point value</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Reagent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">species_ref</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coef</span></span></em><span class="sig-paren">)</span></dt>
<dd><dl class="simple">
<dt>Has a reactive species id and stoichiometric coefficient:</dt><dd><ul class="simple">
<li><p>negative = substrate</p></li>
<li><p>positive = product</p></li>
<li><p>species_ref a reference to a species obj</p></li>
</ul>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent.getCoefficient">
<span class="sig-name descname"><span class="pre">getCoefficient</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the reagent coefficient</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent.getRole">
<span class="sig-name descname"><span class="pre">getRole</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the reagents role, “substrate”, “product” or None</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent.getSpecies">
<span class="sig-name descname"><span class="pre">getSpecies</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the metabolite/species that the reagent reference refers to</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent.setCoefficient">
<span class="sig-name descname"><span class="pre">setCoefficient</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coef</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the reagent coefficient and role, negative coefficients are substrates and positive ones are products</p>
<blockquote>
<div><ul class="simple">
<li><p><em>coeff</em> the new coefficient</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Reagent.setSpecies">
<span class="sig-name descname"><span class="pre">setSpecies</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">spe</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the metabolite/species that the reagent reference refers to</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">Species</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">boundary</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">nan</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compartment</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">charge</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chemFormula</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Holds species/metabolite information</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.getCharge">
<span class="sig-name descname"><span class="pre">getCharge</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the species charge</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.getChemFormula">
<span class="sig-name descname"><span class="pre">getChemFormula</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the species chemical formula</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.getReagentOf">
<span class="sig-name descname"><span class="pre">getReagentOf</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a list of reaction id’s that this metabolite occurs in</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.getValue">
<span class="sig-name descname"><span class="pre">getValue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the current value of the attribute (input/solution)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.isReagentOf">
<span class="sig-name descname"><span class="pre">isReagentOf</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Returns a dynamically generated list of reactions that this species occurs as a reagent</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setBoundary">
<span class="sig-name descname"><span class="pre">setBoundary</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Sets the species so it is a boundary metabolite or fixed which does not occur in the stoichiometric matrix N</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setCharge">
<span class="sig-name descname"><span class="pre">setCharge</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">charge</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the species charge:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>charge</em> a signed double but generally a signed int is used</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setChemFormula">
<span class="sig-name descname"><span class="pre">setChemFormula</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cf</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the species chemical formula</p>
<blockquote>
<div><ul class="simple">
<li><p><em>cf</em> a chemical formula e.g. CH3NO2</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setId">
<span class="sig-name descname"><span class="pre">setId</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">allow_rename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the object Id</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fid</em> a valid c variable style id string</p></li>
</ul>
<p>Reimplements &#64;FBase.setId()</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setReagentOf">
<span class="sig-name descname"><span class="pre">setReagentOf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds the supplied reaction id to the reagent_of list (if it isn’t one already)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>rid</em> a valid reaction id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.setValue">
<span class="sig-name descname"><span class="pre">setValue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the attribute ‘’value’’</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.Species.unsetBoundary">
<span class="sig-name descname"><span class="pre">unsetBoundary</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Unsets the species boundary attribute so that the metabolite is free and therefore occurs in the stoichiometric matrix N</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">UserDefinedConstraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This is an FBCv3 class that defines a set of user defined constraints, it is similar to an objective constraint except allows parameters as
coefficients and values in the constraint components</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.addConstraintComponent">
<span class="sig-name descname"><span class="pre">addConstraintComponent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cc</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>cc</em> UserConstraintComponent</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.createConstraintComponent">
<span class="sig-name descname"><span class="pre">createConstraintComponent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">variable</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ctype</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponent">
<span class="sig-name descname"><span class="pre">getConstraintComponent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cid</span></span></em><span class="sig-paren">)</span></dt>
<dd><ul class="simple">
<li><p><em>cid</em> get a constraint component that matches cid</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentData">
<span class="sig-name descname"><span class="pre">getConstraintComponentData</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentForVariable">
<span class="sig-name descname"><span class="pre">getConstraintComponentForVariable</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><em>rid</em> a component id</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentIDs">
<span class="sig-name descname"><span class="pre">getConstraintComponentIDs</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentVariableTypes">
<span class="sig-name descname"><span class="pre">getConstraintComponentVariableTypes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponentVariables">
<span class="sig-name descname"><span class="pre">getConstraintComponentVariables</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBModel.UserDefinedConstraint.getConstraintComponents">
<span class="sig-name descname"><span class="pre">getConstraintComponents</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<span class="target" id="module-cbmpy.CBModelTools"></span><section id="cbmpy-cbmodeltools-module">
<h2>CBMPy: CBModelTools module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBModelTools.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.CBMultiCore"></span><section id="cbmpy-cbmulticore-module">
<h2>CBMPy: CBMultiCore module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBMultiCore.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBMultiCore.grouper">
<span class="sig-name descname"><span class="pre">grouper</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">3</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'abcdefg'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'x')</span> <span class="pre">--&gt;</span> <span class="pre">('a'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'b'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'c')</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">('d'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'e'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'f')</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">('g'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'x'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">'x'</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBMultiCore.runMultiCoreFVA">
<span class="sig-name descname"><span class="pre">runMultiCoreFVA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pre_opt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objF2constr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rhs_sense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lower'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optPercentage</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oldlpgen</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">markupmodel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">procs</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">override_bin</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Run a multicore FVA where:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> is an fba model instance</p></li>
<li><p><em>procs</em> [default=2] number of processing threads (optimum seems to be about the number of physical cores)</p></li>
<li><p><em>python_override_bin</em> allows customization of the Python bin used for the multicore process</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBMultiEnv"></span><section id="cbmpy-cbmultienv-module">
<h2>CBMPy: CBMultiEnv module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBMultiEnv.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.CBNetDB"></span><section id="cbmpy-cbnetdb-module">
<h2>CBMPy: CBNetDB module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBNetDB.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">DBTools</span></span></dt>
<dd><p>Tools to work with SQLite DB’s (optimized, no SQL required).</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.checkEntryInColumn">
<span class="sig-name descname"><span class="pre">checkEntryInColumn</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check if an entry exists in a table</p>
<ul class="simple">
<li><p><em>table</em> the table name</p></li>
<li><p><em>col</em> the column name</p></li>
<li><p><em>rid</em> the row to search for</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.closeDB">
<span class="sig-name descname"><span class="pre">closeDB</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Close the DB connection and reset the DBTools instance (can be reconnected)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.commitDB">
<span class="sig-name descname"><span class="pre">commitDB</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Commits all curent changes to DB, returns a boolean.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.connectSQLiteDB">
<span class="sig-name descname"><span class="pre">connectSQLiteDB</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">db_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Connect to a sqlite database.</p>
<ul class="simple">
<li><p><em>db_name</em> the name of the sqlite database</p></li>
<li><p><em>work_dir</em> the optional database path</p></li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.createDBTable">
<span class="sig-name descname"><span class="pre">createDBTable</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sqlcols</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a database table if it does not exist:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the table name</p></li>
<li><p><em>sqlcols</em> a list containing the SQL definitions of the table columns: &lt;id&gt; &lt;type&gt; for example <cite>[‘gene TEXT PRIMARY KEY’, ‘aa_seq TEXT’, ‘nuc_seq TEXT’, ‘aa_len INT’, ‘nuc_len INT’]</cite></p></li>
</ul>
</div></blockquote>
<p>Effectively writes CREATE TABLE “table” (&lt;id&gt; &lt;type&gt;, gene TEXT PRIMARY KEY, aa_seq TEXT, nuc_seq TEXT, aa_len INT, nuc_len INT) % table</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.dumpTableToCSV">
<span class="sig-name descname"><span class="pre">dumpTableToCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Save a table as tab separated txt file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the table to export</p></li>
<li><p><em>filename</em> the filename of the table dump</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.dumpTableToTxt">
<span class="sig-name descname"><span class="pre">dumpTableToTxt</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Save a table as tab separated txt file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the table to export</p></li>
<li><p><em>filename</em> the filename of the table dump</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.executeSQL">
<span class="sig-name descname"><span class="pre">executeSQL</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sql</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Execute a SQL command:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sql</em> a string containing a SQL command</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.fetchAll">
<span class="sig-name descname"><span class="pre">fetchAll</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sql</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Raw SQL query e.g. ‘SELECT id FROM gene WHERE gene=”G”’</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.getCell">
<span class="sig-name descname"><span class="pre">getCell</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cell</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the table cell which correspond to rid in column. Returns the value or None</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the database table</p></li>
<li><p><em>col</em> the column id</p></li>
<li><p><em>rid</em> the row index id</p></li>
<li><p><em>cell</em> the column of the cell you want tp extract</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.getColumns">
<span class="sig-name descname"><span class="pre">getColumns</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cols</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Fetch the contents of one or more columns of data in a table</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the database table</p></li>
<li><p><em>cols</em> a list of one or more column id’s</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.getRow">
<span class="sig-name descname"><span class="pre">getRow</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the table row(s) which correspond to rid in column. Returns the row(s) as a list, if the column is the primary key
this is always a single entry.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the database table</p></li>
<li><p><em>col</em> the column id</p></li>
<li><p><em>rid</em> the row index id</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.getTable">
<span class="sig-name descname"><span class="pre">getTable</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">colOut</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns an entire database table</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the table name</p></li>
<li><p><em>colOut</em> optionally return a tuple of (data,ColNames)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.insertData">
<span class="sig-name descname"><span class="pre">insertData</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">commit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><dl>
<dt>Insert data into a table: “INSERT INTO %s (?, ?, ?, ?, ?) VALUES (?, ?, ?, ?, ?)” % table,</dt><dd><blockquote>
<div><p>(?, ?, ?, ?, ?)) )</p>
</div></blockquote>
<ul class="simple">
<li><p><em>table</em> the DB table name</p></li>
<li><p><em>data</em> a dictionary of {id:value} pairs</p></li>
<li><p><em>commit</em> whether to commit the data insertions</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.DBTools.updateData">
<span class="sig-name descname"><span class="pre">updateData</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">table</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">col</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">commit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Update already defined data</p>
<blockquote>
<div><ul class="simple">
<li><p><em>table</em> the table name</p></li>
<li><p><em>col</em> the column name</p></li>
<li><p><em>rid</em> the row id to update</p></li>
<li><p><em>data</em> a dictionary of {id:value} pairs</p></li>
<li><p><em>commit</em> whether to commit the data updates</p></li>
</ul>
<p>UPDATE COMPANY SET ADDRESS = ‘Texas’ WHERE ID = 6;</p>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.KeGGSequenceTools">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">KeGGSequenceTools</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">url</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">db_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Using the KeGG connector this class provides tools to construct an organims specific sequence database</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.KeGGTools">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">KeGGTools</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">url</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Class that holds useful methods for querying KeGG via a SUDS provided soap client</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.KeGGTools.fetchSeqfromKeGG">
<span class="sig-name descname"><span class="pre">fetchSeqfromKeGG</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">k_gene</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Given a gene name try and retrieve the gene and amino acid sequence</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.MIRIAMTools">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">MIRIAMTools</span></span></dt>
<dd><p>Tools dealing with MIRIAM annotations</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">RESTClient</span></span></dt>
<dd><p>Class that provides the basis for application specific connectors to REST web services</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient.Close">
<span class="sig-name descname"><span class="pre">Close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Close the currently active connection</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient.Connect">
<span class="sig-name descname"><span class="pre">Connect</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">root</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Establish HTTP connection to</p>
<blockquote>
<div><ul class="simple">
<li><p><em>root</em> the site root “www.google.com”</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient.Get">
<span class="sig-name descname"><span class="pre">Get</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">query</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Perform an http GET using:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>query</em> e.g.</p></li>
<li><p><em>reply_mode</em> [default=’’] this is the reply mode</p></li>
</ul>
</div></blockquote>
<p>For example “/semanticSBML/annotate/search.xml?q=ATP”</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient.GetLog">
<span class="sig-name descname"><span class="pre">GetLog</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the logged history</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.RESTClient.Log">
<span class="sig-name descname"><span class="pre">Log</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">txt</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add txt to logfile history</p>
<blockquote>
<div><ul class="simple">
<li><p><em>txt</em> a string</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.SemanticSBML">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">SemanticSBML</span></span></dt>
<dd><p>REST client for connecting to SemanticSBML services</p>
<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.SemanticSBML.parseXMLtoText">
<span class="sig-name descname"><span class="pre">parseXMLtoText</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">xml</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parse the xml output by quickLookup() into a list of URL</p>
<blockquote>
<div><ul class="simple">
<li><p><em>xml</em> XML returns from SemanticSBML</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.SemanticSBML.quickLookup">
<span class="sig-name descname"><span class="pre">quickLookup</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">txt</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Do a quick lookpup for txt using SemanticSBML (connectic if required) and return results. Returns
a list of identifiers.org id’s in descending priority (as return)</p>
<blockquote>
<div><ul class="simple">
<li><p><em>txt</em> the string to lookup</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cbmpy.CBNetDB.SemanticSBML.viewDataInWebrowser">
<span class="sig-name descname"><span class="pre">viewDataInWebrowser</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">maxres</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Attempt to view #maxres results returned by SemanticSBML in the default browser</p>
<blockquote>
<div><ul class="simple">
<li><p><em>maxres</em> default maximum number of results to display.</p></li>
</ul>
</div></blockquote>
</dd></dl>

</dd></dl>

<span class="target" id="module-cbmpy.CBPlot"></span><section id="cbmpy-cbplot-module">
<h2>CBMPy: CBPlot module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBPlot.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBPlot.plotFluxVariability">
<span class="sig-name descname"><span class="pre">plotFluxVariability</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fva_data</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fva_names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">title</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ySlice</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">minHeight</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maxHeight</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundec</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">autoclose</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fluxval</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">type</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'png'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Plots and saves as an image the flux variability results as generated by CBSolver.FluxVariabilityAnalysis.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fva_data</em> FluxVariabilityAnalysis() FVA OUTPUT_ARRAY</p></li>
<li><p><em>fva_names</em> FluxVariabilityAnalysis() FVA OUTPUT_NAMES</p></li>
<li><p><em>fname</em> filename_base for the CSV output</p></li>
<li><p><em>work_dir</em> [default=None] if set the output directory for the csv files</p></li>
<li><p><em>title</em> [default=None] the user defined title for the graph</p></li>
<li><p><em>ySlice</em> [default=None] this sets an absolute (fixed) limit on the Y-axis (+- ySlice)</p></li>
<li><p><em>minHeight</em> [default=None] the minimum length that defined a span</p></li>
<li><p><em>maxHeight</em> [default=None] the maximum length a span can obtain, bar will be limited to maxHeight and coloured yellow</p></li>
<li><p><em>roundec</em> [default=None] an integer indicating at which decimal to round off output. Default is no rounding.</p></li>
<li><p><em>autoclose</em> [default=True] autoclose plot after save</p></li>
<li><p><em>fluxval</em> [default=True] plot the flux value</p></li>
<li><p><em>type</em> [default=’png’] the output format, depends on matplotlib backend e.g. ‘png’, ‘pdf’, ‘eps’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBRead"></span><section id="cbmpy-cbread-module">
<h2>CBMPy: CBRead module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBRead.py 669 2019-02-18 22:58:19Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.loadModel">
<span class="sig-name descname"><span class="pre">loadModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sbmlfile</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Loads any SBML model in COBRA, FAME (SBML2FBA), SBML3FBCv1, SBML3FBCv2 format.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sbmlfile</em> an SBML model file</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readCOBRASBML">
<span class="sig-name descname"><span class="pre">readCOBRASBML</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">delete_intermediate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fake_boundary_species_search</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skip_genes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scan_notes_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in a COBRA format SBML Level 2 file with FBA annotation where and return either a CBM model object
or a (cbm_mod, sbml_mod) pair if return_sbml_model=True</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory</p></li>
<li><p><em>delete_intermediate</em> [default=False] delete the intermediate SBML Level 3 FBC file</p></li>
<li><p><em>fake_boundary_species_search</em> [default=False] after looking for the boundary_condition of a species search for overloaded id’s &lt;id&gt;_b</p></li>
<li><p><em>output_dir</em> [default=None] the directory to output the intermediate SBML L3 files (if generated) default to input directory</p></li>
<li><p><em>skip_genes</em> [default=False] do not load GPR data</p></li>
<li><p><em>scan_notes_gpr</em> [default=True] if the model is loaded and no genes are detected the scan the &lt;notes&gt; field for GPR associationa</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readExcel97Model">
<span class="sig-name descname"><span class="pre">readExcel97Model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">xlname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">write_sbml</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbml_level</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">3</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_dictionaries</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reads a model encoded as an Excel97 workbook and returns it as a CBMPy model object and SBML file. Note the workbook must be formatted
exactly like those produced by cbm.writeModelToExcel97(). Note that reactions have to be defined in <strong>both</strong> the <em>reaction</em>
and <em>network_react</em> sheets to be included in the model.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>xlpath</em> the filename of the Excel workbook</p></li>
<li><p><em>return_model</em> [default=True] construct and return the CBMPy model</p></li>
<li><p><em>write_sbml</em> [default=True] write the SBML file to fname</p></li>
<li><p><em>return_dictionaries</em> [default=False] return the dictionaries constructed when reading the Excel file (in place of the model)</p></li>
<li><p><em>sbml_level</em> [default=3] write the SBML file as either SBML L2 FBA or SBML L3 FBC file.</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readSBML2FBA">
<span class="sig-name descname"><span class="pre">readSBML2FBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fake_boundary_species_search</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scan_notes_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in an SBML Level 2 file with FBA annotation where:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory if None then only fname is used</p></li>
<li><p><em>return_sbml_model</em> [default=False] return a a (cbm_mod, sbml_mod) pair</p></li>
<li><p><em>fake_boundary_species_search</em> [default=False] after looking for the boundary_condition of a species search for overloaded id’s &lt;id&gt;_b</p></li>
<li><p><em>scan_notes_gpr</em> [default=True] if the model is loaded and no genes are detected the scan the &lt;notes&gt; field for GPR associationa</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readSBML3FBC">
<span class="sig-name descname"><span class="pre">readSBML3FBC</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xoptions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{'validate':</span> <span class="pre">False}</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scan_notes_gpr</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in an SBML Level 3 file with FBC annotation where and return a CBM model object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory</p></li>
<li><p><em>return_sbml_model</em> deprecated and ignored please update code</p></li>
<li><p><em>xoptions</em> special load options, enable with option=True except for nmatrix_type which has a type.</p>
<ul>
<li><p><em>nogenes</em> do not load/process genes</p></li>
<li><p><em>noannot</em> do not load/process any annotations</p></li>
<li><p><em>validate</em> validate model and display errors and warnings before loading</p></li>
<li><p><em>readcobra</em> read the cobra annotation</p></li>
<li><p><em>read_model_string</em> [default=False] read the model from a string (instead of a filename) containing an SBML document</p></li>
<li><p><em>nmatrix_type</em> [default=’normal’] define the type of stoichiometrich matrix to be built</p>
<ul>
<li><p>‘numpy’ dense numpy array (best performance)</p></li>
<li><p>‘scipy_csr’ scipy sparse matrix (lower performance, low memory)</p></li>
<li><p>‘sympy’ a sympy rational matrix (low performance, high memory, cast to dense to analyse)</p></li>
<li><p>None do not build matrix</p></li>
</ul>
</li>
</ul>
</li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p><em>scan_notes_gpr</em> [default=True] if the model is loaded and no genes are detected scan the &lt;notes&gt; field for GPR associationa</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readSK_FVA">
<span class="sig-name descname"><span class="pre">readSK_FVA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read Stevens FVA results (opt.fva) file and return a list of dictionaries</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readSK_vertex">
<span class="sig-name descname"><span class="pre">readSK_vertex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bigfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fast_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">nformat</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%.14f'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compression</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">hdf5file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reads in Stevens vertex analysis file:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> the input filename (.all file that results from Stevens pipeline)</p></li>
<li><p><em>bigfile</em> [default=True] this option is now always true and is left in for backwards compatability</p></li>
<li><p><em>fast_rational</em> [default=False] by default off and uses SymPy for rational–&gt;float conversion, when on uses float decomposition with a slight (2th decimal) decrease in accuracy</p></li>
<li><p><em>nformat</em> [default=’%.14f’] the number format used in output files</p></li>
<li><p><em>compression</em> [default=None] compression to be used in hdf5 files can be one of [None, ‘lzf’, ‘gz?’, ‘szip’]</p></li>
<li><p><em>hdf5file</em> [default=None] if None then generic filename ‘_vtx_.tmp.hdf5’ is uses otherwise &lt;hdf5file&gt;.hdf5</p></li>
</ul>
</div></blockquote>
<p>and returns an hdf5 <em>filename</em> of the results with a single group named <strong>data</strong> which countains datasets</p>
<blockquote>
<div><ul class="simple">
<li><p>vertices</p></li>
<li><p>rays</p></li>
<li><p>lin</p></li>
</ul>
</div></blockquote>
<p>where all vectors are in terms of the column space of N.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBRead.readSK_vertexOld">
<span class="sig-name descname"><span class="pre">readSK_vertexOld</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bigfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fast_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">nformat</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%.14f'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compresslevel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">3</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reads in Stevens vertex analysis file and returns, even more optimized for large datasets than the original.</p>
<blockquote>
<div><ul class="simple">
<li><p>a list of vertex vectors</p></li>
<li><p>a list of ray vectors</p></li>
<li><p>the basis of the lineality space as a list of vectors</p></li>
</ul>
</div></blockquote>
<p>all vectors in terms of the column space of N</p>
</dd></dl>

<span class="target" id="module-cbmpy.CBReadtxt"></span><section id="cbmpy-cbreadtxt-module">
<h2>CBMPy: CBReadtxt module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBReadtxt.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBReadtxt.readCSV">
<span class="sig-name descname"><span class="pre">readCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model_file</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bounds_file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">biomass_flux</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model_id</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'FBAModel'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction_prefix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'R_'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">has_header</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function loads a CSV file and translates it into a Python object:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">-</span> <span class="o">*</span><span class="n">model_file</span><span class="o">*</span> <span class="n">the</span> <span class="n">name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">CSV</span> <span class="n">file</span> <span class="n">that</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">model</span>
<span class="o">-</span> <span class="o">*</span><span class="n">bounds_file</span><span class="o">*</span> <span class="n">the</span> <span class="n">name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">CSV</span> <span class="n">file</span> <span class="n">that</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">flux</span> <span class="n">bounds</span>
<span class="o">-</span> <span class="o">*</span><span class="n">biomass_flux</span><span class="o">*</span> <span class="n">the</span> <span class="n">name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">reaction</span> <span class="n">that</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">objective</span> <span class="n">function</span>
<span class="o">-</span> <span class="o">*</span><span class="n">reaction_prefix</span><span class="o">*</span> <span class="p">[</span><span class="n">default</span><span class="o">=</span><span class="s1">&#39;R _&#39;</span><span class="p">]</span> <span class="n">the</span> <span class="n">prefix</span> <span class="n">to</span> <span class="n">add</span> <span class="n">to</span> <span class="nb">input</span> <span class="n">reaction</span> <span class="n">ID</span><span class="s1">&#39;s</span>
<span class="o">-</span> <span class="o">*</span><span class="n">has_header</span><span class="o">*</span> <span class="p">[</span><span class="n">default</span><span class="o">=</span><span class="kc">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">header</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">csv</span> <span class="n">file</span>
</pre></div>
</div>
</dd></dl>

<span class="target" id="module-cbmpy.CBSolver"></span><section id="cbmpy-cbsolver-module">
<h2>CBMPy: CBSolver module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBSolver.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.CBTools"></span><section id="cbmpy-cbtools-module">
<h2>CBMPy: CBTools module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBTools.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.addFluxAsActiveObjective">
<span class="sig-name descname"><span class="pre">addFluxAsActiveObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">reaction_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">osense</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">coefficient</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds a flux as an active objective function</p>
<blockquote>
<div><ul class="simple">
<li><p><em>reaction_id</em> a string containing a reaction id</p></li>
<li><p><em>osense</em> objective sense must be <strong>maximize</strong> or <strong>minimize</strong></p></li>
<li><p><em>coefficient</em> the objective funtion coefficient [default=1]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.addGenesFromAnnotations">
<span class="sig-name descname"><span class="pre">addGenesFromAnnotations</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">annotation_key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'GENE</span> <span class="pre">ASSOCIATION'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gene_pattern</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>THIS METHOD IS DERPRECATED PLEASE USE cmod.createGeneAssociationsFromAnnotations()</p>
<p>Add genes to the model using the definitions stored in the annotation key</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> and fba object</p></li>
<li><p><em>annotation_key</em> the annotation dictionary key that holds the gene association for the protein/enzyme</p></li>
<li><p><em>gene_pattern</em> deprecated, not needed anymore</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.addSinkReaction">
<span class="sig-name descname"><span class="pre">addSinkReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">species</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1000.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds a sink reactions that consumes a model <em>species</em> so that X –&gt;</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fbam</em> an fba model object</p></li>
<li><p><em>species</em> a valid species name</p></li>
<li><p><em>lb</em> lower flux bound [default = 0.0]</p></li>
<li><p><em>ub</em> upper flux bound [default = 1000.0]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.addSourceReaction">
<span class="sig-name descname"><span class="pre">addSourceReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">species</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ub</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1000.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds a source reactions that produces a model <em>species</em> so that –&gt; X</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fbam</em> an fba model object</p></li>
<li><p><em>species</em> a valid species name</p></li>
<li><p><em>lb</em> lower flux bound [default = 0.0]</p></li>
<li><p><em>ub</em> upper flux bound [default = 1000.0]</p></li>
</ul>
</div></blockquote>
<p>Note reversiblity is determined by the lower bound, default 0 = irreversible. If
negative then reversible.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.addStoichToFBAModel">
<span class="sig-name descname"><span class="pre">addStoichToFBAModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fm</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build stoichiometry: this method has been refactored into the model class - cmod.buildStoichMatrix()</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.checkExchangeReactions">
<span class="sig-name descname"><span class="pre">checkExchangeReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">autocorrect</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Scan all reactions for exchange reactions (reactions containing a boundary species), return a list of
inconsistent reactions or correct automatically.</p>
<ul class="simple">
<li><p><em>fba</em> a CBMPy model</p></li>
<li><p><em>autocorrect</em> [default=True] correctly set the “is_exchange” attribute on a reaction</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.checkFluxBoundConsistency">
<span class="sig-name descname"><span class="pre">checkFluxBoundConsistency</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check flux bound consistency checks for multiply defined bounds, bounds without a reaction, inconsistent bounds with respect to each other
and reaction reversbility. Returns a dictionary of bounds/reactions where errors occur.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.checkIds">
<span class="sig-name descname"><span class="pre">checkIds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">items</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Checks the id’s of the specified model attributes to see if the name is legal and if there are duplicates.
Returns a list of items with errors.</p>
<ul class="simple">
<li><p><em>fba</em> a CBMPy model instance</p></li>
<li><p><em>items</em> [default=’all’] ‘all’ means ‘species,reactions,flux_bounds,objectives’ of which one or more can be specified</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.checkReactionBalanceElemental">
<span class="sig-name descname"><span class="pre">checkReactionBalanceElemental</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Rid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">zero_tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1e-12</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check if the reaction is balanced using the chemical formula</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> the FBA object</p></li>
<li><p><em>Rid</em> [default = None] the reaction to check, defaults to all</p></li>
<li><p><em>zero_tol</em> [default=1.0e-12] the floating point zero used for elemental balancing</p></li>
</ul>
</div></blockquote>
<p>This function is derived from the code found here: <a class="reference external" href="http://pyparsing.wikispaces.com/file/view/chemicalFormulas.py">http://pyparsing.wikispaces.com/file/view/chemicalFormulas.py</a></p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.createTempFileName">
<span class="sig-name descname"><span class="pre">createTempFileName</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return a temporary filename</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.createZipArchive">
<span class="sig-name descname"><span class="pre">createZipArchive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">zipname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">files</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">move</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compression</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'normal'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a zip archive which contains one or more files</p>
<blockquote>
<div><ul class="simple">
<li><p><em>zipname</em> the name of the zip archive to create (fully qualified)</p></li>
<li><p><em>files</em> either a valid filename or a list of filenames (fully qualified)</p></li>
<li><p><em>move</em> [default=False] attempt to delete input files after zip-archive creation</p></li>
<li><p><em>compression</em> [default=’normal’] normal zip compression, set as None for no compression only store files (zlib not required)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.deSerialize">
<span class="sig-name descname"><span class="pre">deSerialize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Deserializes a serialised object contained in a string</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.deSerializeFromDisk">
<span class="sig-name descname"><span class="pre">deSerializeFromDisk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Loads a serialised Python pickle from <em>filename</em> returns the Python object(s)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportArray2CSV">
<span class="sig-name descname"><span class="pre">exportArray2CSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array to fname.csv</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportArray2TXT">
<span class="sig-name descname"><span class="pre">exportArray2TXT</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array to fname.txt</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArray">
<span class="sig-name descname"><span class="pre">exportLabelledArray</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fmt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%f'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write a 2D array type object to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
<li><p><em>fmt</em> [default=’%s’] the output number format</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArray2CSV">
<span class="sig-name descname"><span class="pre">exportLabelledArray2CSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array with row names to fname.csv</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArray2TXT">
<span class="sig-name descname"><span class="pre">exportLabelledArray2TXT</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array with row names to fname.txt</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
<li><p><em>fname</em> the output filename</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArrayWithHeader">
<span class="sig-name descname"><span class="pre">exportLabelledArrayWithHeader</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">header</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fmt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%f'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array with row names and header</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
<li><p><em>header</em> [default=None] the list of column names</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
<li><p><em>fmt</em> [default=’%s’] the output number format</p></li>
<li><p><em>appendlist</em> [default=False] if True append the array to <em>fname</em> otherwise create a new file</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArrayWithHeader2CSV">
<span class="sig-name descname"><span class="pre">exportLabelledArrayWithHeader2CSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">header</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array with row names and header to fname.csv</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
<li><p><em>header</em> [default=None] the list of column names</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledArrayWithHeader2TXT">
<span class="sig-name descname"><span class="pre">exportLabelledArrayWithHeader2TXT</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">header</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export an array with row names and header to fname.txt</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the an array like object</p></li>
<li><p><em>names</em> the list of row names</p></li>
<li><p><em>header</em> the list of column names</p></li>
<li><p><em>fname</em> the output filename</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.exportLabelledLinkedList">
<span class="sig-name descname"><span class="pre">exportLabelledLinkedList</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fmt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">appendlist</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write a 2D linked list [[…],[…],[…],[…]] and optionally a list of row labels to file:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>arr</em> the linked list</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>names</em> [default=None] the list of row names</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
<li><p><em>fmt</em> [default=’%s’] the output number format</p></li>
<li><p><em>appendlist</em> [default=False] if True append the array to <em>fname</em> otherwise create a new file</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.findDeadEndMetabolites">
<span class="sig-name descname"><span class="pre">findDeadEndMetabolites</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Finds dead-end (single reaction) metabolites rows in N with a single entry), returns a list of (metabolite, reaction) ids</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.findDeadEndReactions">
<span class="sig-name descname"><span class="pre">findDeadEndReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Finds dead-end (single substrate/product) reactions (cols in N with a single entry), returns a list of (metabolite, reaction) ids</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.fixReversibility">
<span class="sig-name descname"><span class="pre">fixReversibility</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">auto_correct</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set fluxbound lower bound from reactions reversibility information.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fbam</em> and FBAModel instance</p></li>
<li><p><em>auto_correct</em> (default=False) if True automatically sets lower bound to zero if required, otherwise prints a warning if false.</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.getBoundsDict">
<span class="sig-name descname"><span class="pre">getBoundsDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbamod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">substring</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a dictionary of reactions&amp;bounds</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.getExchBoundsDict">
<span class="sig-name descname"><span class="pre">getExchBoundsDict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbamod</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a dictionary of all exchange reactions (as determined by the is_exchange attribute of Reaction)</p>
<ul class="simple">
<li><p><em>fbamod</em> a CBMPy model</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.getModelGenesPerReaction">
<span class="sig-name descname"><span class="pre">getModelGenesPerReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gene_pattern</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gene_annotation_key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'GENE</span> <span class="pre">ASSOCIATION'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parse a BiGG style gene annotation string using default gene_pattern=’((W*w*W*))’ or
(&lt;any non-alphanum&gt;&lt;any alphanum&gt;&lt;any non-alphanum&gt;)</p>
<p>Old eColi specific pattern ‘(bw*W)’</p>
<p>It is advisable to use the model methods directly rather than this function</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.loadObj">
<span class="sig-name descname"><span class="pre">loadObj</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Loads a serialised Python pickle from <em>filename</em>.dat returns the Python object(s)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.merge2Models">
<span class="sig-name descname"><span class="pre">merge2Models</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">m2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ignore</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ignore_duplicate_ids</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Merge 2 models, this method does a raw merge of model 2 into model 1 without any model checking.
Component id’s in ignore are ignored in both models and the first objective of model 1 is arbitrarily
set as active. Compartments are also merged and a new “OuterMerge” compartment is also created.</p>
<p>In all cases duplicate id’s are tracked and ignored, essentially using the object id encountered first -
usually that of model 1. Duplicate checking can be disabled by setting the <em>ignore_duplicate_ids</em> flag.</p>
<ul class="simple">
<li><p><em>m1</em> model 1</p></li>
<li><p><em>m2</em> model 2</p></li>
<li><p><em>ignore</em> [[]] do not merge these id’s</p></li>
<li><p><em>ignore_duplicate_ids</em> [False] default behaviour that can be enabled</p></li>
</ul>
<p>In development: merging genes and gpr’s.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.mergeGroups">
<span class="sig-name descname"><span class="pre">mergeGroups</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">groups</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">auto_delete</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Merge a list of groups into a new group. Note, annotations are not merged!</p>
<blockquote>
<div><ul class="simple">
<li><p><em>m</em> the model containing the source groups</p></li>
<li><p><em>groups</em> a list of groups</p></li>
<li><p><em>new_id</em> the new, merged, group id</p></li>
<li><p><em>new_name</em> [default=’’] the new group name, the default behaviour is to merge the old names</p></li>
<li><p><em>auto_delete</em> [default=False] delete the source groups</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.processBiGGannotationNote">
<span class="sig-name descname"><span class="pre">processBiGGannotationNote</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">annotation_key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'note'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parse the HTML formatted reaction information stored in the BiGG notes field.
This function is being deprecated and replaced by <cite>CBTools.processSBMLAnnotationNotes()</cite></p>
<blockquote>
<div><ul class="simple">
<li><p>requires an <em>annotation_key</em> which contains a BiGG HTML fragment</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.processBiGGchemFormula">
<span class="sig-name descname"><span class="pre">processBiGGchemFormula</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Disambiguates the overloaded BiGG name NAME_CHEMFORMULA into</p>
<blockquote>
<div><ul class="simple">
<li><p><em>species.name</em> NAME</p></li>
<li><p><em>species.chemFormula</em> CHEMFORMULA</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.processExchangeReactions">
<span class="sig-name descname"><span class="pre">processExchangeReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Extract exchange reactions from model using <em>key</em> and return:</p>
<blockquote>
<div><ul class="simple">
<li><p>a dictionary of all exchange reactions without <em>medium</em> reactions</p></li>
<li><p>a dictionary of <em>medium</em> exchange reactions (negative lower bound)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.processSBMLAnnotationNotes">
<span class="sig-name descname"><span class="pre">processSBMLAnnotationNotes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">annotation_key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'note'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">level</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">3</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parse the HTML formatted reaction information stored in the SBML notes field currently
processes BiGG and PySCeSCBM style annotations it looks for the the annotation indexed
with the <em>annotation_key</em></p>
<blockquote>
<div><ul class="simple">
<li><p><em>annotation_key</em> [default=’note’] which contains a HTML/XHTML fragment in BiGG/PySCeSCBM format (ignored in L3)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.removeFixedSpeciesReactions">
<span class="sig-name descname"><span class="pre">removeFixedSpeciesReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function is a hack that removes reactions which only have boundary species as reactants
and products. These are typically gene associations encoded in the Manchester style and there
is probably a better way of working around this problem …</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> an instantiated fba model object</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.roundOffWithSense">
<span class="sig-name descname"><span class="pre">roundOffWithSense</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">val</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">osense</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'max'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1e-08</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Round of a value in a way that takes into consideration the sense of the operation that generated it</p>
<blockquote>
<div><ul class="simple">
<li><p><em>val</em> the value</p></li>
<li><p><em>osense</em> [default=’max’] the sense</p></li>
<li><p><em>tol</em> [default=1e-8] the tolerance of the roundoff factor</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.scanForReactionDuplicates">
<span class="sig-name descname"><span class="pre">scanForReactionDuplicates</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ignore_coefficients</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This method uses uses a brute force apprach to finding reactions with matching
stoichiometry</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.scanForUnbalancedReactions">
<span class="sig-name descname"><span class="pre">scanForUnbalancedReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Scan a model for unbalanced reactions, returns a tuple of dictionaries balanced and unbalanced:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> an FBA model instance</p></li>
<li><p><em>output</em> [default=’all’] can be one of [‘all’,’charge’,’element’]</p></li>
<li><p><em>charge</em> return all charge <strong>un</strong> balanced reactions</p></li>
<li><p><em>element</em> return all element <strong>un</strong> balanced reactions</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.setSpeciesPropertiesFromAnnotations">
<span class="sig-name descname"><span class="pre">setSpeciesPropertiesFromAnnotations</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbam</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">overwriteCharge</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">overwriteChemFormula</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This will attempt to set the model Species properties from the annotation. With the default options
it will only replace missing data. With ChemicalFormula this is easy to detect however charge may
have an “unknown value” of 0. Setting the optional values to true will replace any existing value
with any valid annotation.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>overwriteChemFormula</em> [default=False]</p></li>
<li><p><em>overwriteCharge</em> [default=False]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.splitReversibleReactions">
<span class="sig-name descname"><span class="pre">splitReversibleReactions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">selected_reactions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Split a (set of) reactions into reversible reactions returns a copy of the original model</p>
<p>R1: A = B
R1f: A -&gt; B
R1r: B -&gt; A</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated CBMPy model object</p></li>
<li><p><em>selected_reactions</em> if a reversible reaction id is in here split it</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.splitSingleReversibleReaction">
<span class="sig-name descname"><span class="pre">splitSingleReversibleReaction</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fwd_id</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rev_id</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Split a single reversible reaction into two irreversible reactions, returns the original reversible reaction and bounds
while deleting them from model.</p>
<p>R1: A = B
R1_fwd: A -&gt; B
R1_rev: B -&gt; A</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated CBMPy model object</p></li>
<li><p><em>rid</em> a valid reaction id</p></li>
<li><p><em>fwd_id</em> [default=None] the new forward reaction id, defaults to rid_fwd</p></li>
<li><p><em>rev_id</em> [default=None] the new forward reaction id, defaults to rid_rev</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.storeObj">
<span class="sig-name descname"><span class="pre">storeObj</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compress</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Stores a Python <em>obj</em> as a serialised binary object in <em>filename</em>.dat</p>
<ul class="simple">
<li><p><em>obj</em> a python object</p></li>
<li><p><em>filename</em> the base filename</p></li>
<li><p><em>compress</em> [False] use gzip compression not <em>implemented</em></p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBTools.stringReplace">
<span class="sig-name descname"><span class="pre">stringReplace</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbamod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">old</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">new</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This is alpha stuff, target can be:</p>
<blockquote>
<div><ul class="simple">
<li><p>‘species’</p></li>
<li><p>‘reactions’</p></li>
<li><p>‘constraints’</p></li>
<li><p>‘objectives’</p></li>
<li><p>‘all’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBWrite"></span><section id="cbmpy-cbwrite-module">
<h2>CBMPy: CBWrite module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBWrite.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildHformatFluxBounds">
<span class="sig-name descname"><span class="pre">BuildHformatFluxBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains the flux bounds in H format</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a PySCeS-CBM FBA object</p></li>
<li><p><em>infinity_replace</em> [default=None] if defined this is the abs(value) of +-&lt;infinity&gt;</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPConstraints">
<span class="sig-name descname"><span class="pre">BuildLPConstraints</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains constraint constructed from
the StoichiometeryLP object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object which has a stoichiometry</p></li>
<li><p><em>use_rational</em> write rational number output [default=False]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPConstraintsMath">
<span class="sig-name descname"><span class="pre">BuildLPConstraintsMath</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains the constaints in LP format
Strict refers to dS/dt =&gt; 0 and dS/dt &lt;= 0</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPConstraintsRelaxed">
<span class="sig-name descname"><span class="pre">BuildLPConstraintsRelaxed</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains the constaints in LP format
Relaxed refers to dS/dt &gt;= 0</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPConstraintsStrict">
<span class="sig-name descname"><span class="pre">BuildLPConstraintsStrict</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains the constaints in LP format
Strict refers to dS/dt = 0</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPFluxBounds">
<span class="sig-name descname"><span class="pre">BuildLPFluxBounds</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains the flux bounds in LP format</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.BuildLPUserConstraints">
<span class="sig-name descname"><span class="pre">BuildLPUserConstraints</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Build and return a csio that contains constraint constructed from
the StoichiometeryLP object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object which has a stoichiometry</p></li>
<li><p><em>use_rational</em> write rational number output [default=False]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteFVAdata">
<span class="sig-name descname"><span class="pre">WriteFVAdata</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fva</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundec</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scale_min</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">appendfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">info</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeFVAdata()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteFVAtoCSV">
<span class="sig-name descname"><span class="pre">WriteFVAtoCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fva</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbaObj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeFVAtoCSV()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteModelHFormatFBA">
<span class="sig-name descname"><span class="pre">WriteModelHFormatFBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullLP</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeModelHFormatFBA2()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteModelHFormatFBA2">
<span class="sig-name descname"><span class="pre">WriteModelHFormatFBA2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullLP</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeModelHFormatFBA2()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteModelLP">
<span class="sig-name descname"><span class="pre">WriteModelLP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">multisymb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'</span> <span class="pre">'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constraint_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeModelLP()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteModelLPOld">
<span class="sig-name descname"><span class="pre">WriteModelLPOld</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">multisymb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'</span> <span class="pre">'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lpt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constraint_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'strict'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeModelLPOld()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.WriteModelRaw">
<span class="sig-name descname"><span class="pre">WriteModelRaw</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>INFO: this method will be deprecated please update your scripts to use “writeModelRaw()”</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.convertExcelToFloat">
<span class="sig-name descname"><span class="pre">convertExcelToFloat</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">num</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts an Excel “number” to a float</p>
<blockquote>
<div><ul class="simple">
<li><p><em>num</em> a number</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.convertFloatToExcel">
<span class="sig-name descname"><span class="pre">convertFloatToExcel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">num</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundoff</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a float to Excel compatible “number”</p>
<blockquote>
<div><ul class="simple">
<li><p><em>num</em> a number</p></li>
<li><p><em>roundoff</em> the number of roundoff digits for round()</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.exportModel">
<span class="sig-name descname"><span class="pre">exportModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fmt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'lp'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'both'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Export the FBA model in different formats:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> the FBA model</p></li>
<li><p><em>fname</em> [default=None] the exported filename if None then <cite>fba.getId()</cite> is used</p></li>
<li><p><em>fmt</em> [default=’lp’] the export format can be one of: ‘lp’ (CPLEX), ‘hformat’ (Polyhedra), ‘all’ (both)</p></li>
<li><p><em>use_rational</em> [default=’both’] if <em>all</em> or <em>hformat</em> is specified should hformat files be written using rational math or not. The default <em>both</em> is the legacy behaviour and writes both.</p></li>
</ul>
</div></blockquote>
<p>Note that ‘hformat’ ignores ‘fname’ and only uses fba.getId() this is a legacy behaviour</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.generateBGID">
<span class="sig-name descname"><span class="pre">generateBGID</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">num</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">prefix</span></span></em><span class="sig-paren">)</span></dt>
<dd><dl class="simple">
<dt>Create a BGID generator, which is &lt;prefix&gt;&lt;num&gt; where perfix is two letters num is padded to 6 figures</dt><dd><ul class="simple">
<li><p><em>num</em> the starting number</p></li>
<li><p><em>prefix</em> the two letter prefix</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.printFBASolution">
<span class="sig-name descname"><span class="pre">printFBASolution</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">include_all</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Prints the FBA optimal solution to the screen.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an FBA model object</p></li>
<li><p><em>include_all</em> include all variables</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.saveModel">
<span class="sig-name descname"><span class="pre">saveModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compress</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Saves the model to an SBML file using the lates SBML3 FBC version.</p>
<ul class="simple">
<li><p><em>model</em> the CBMPy model</p></li>
<li><p><em>filename</em> the filename to write</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeCOBRASBML">
<span class="sig-name descname"><span class="pre">writeCOBRASBML</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as a COBRA compatible :</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeFVAdata">
<span class="sig-name descname"><span class="pre">writeFVAdata</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fvadata</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundec</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scale_min</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">appendfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">info</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes the resuls of a FluxVariabilityAnalysis method and writes it to a nice
csv file. Note this method replaces the glpk/cplx_WriteFVAtoCSV methods. Data is output as a csv file
with columns: FluxName, FVA_MIN, FVA_MAX, OPT_VAL, SPAN</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fvadata</em> FluxVariabilityAnalysis() FVA OUTPUT_ARRAY</p></li>
<li><p><em>names</em> FluxVariabilityAnalysis() FVA OUTPUT_NAMES</p></li>
<li><p><em>fname</em> filename_base for the CSV output</p></li>
<li><p><em>work_dir</em> [default=None] if set the output directory for the csv files</p></li>
<li><p><em>roundec</em> [default=None] an integer indicating at which decimal to round off output. Default is no rounding.</p></li>
<li><p><em>scale_min</em> [default=False] normalise each flux such that that FVA_MIN = 0.0</p></li>
<li><p><em>appendfile</em> [default=False] instead of opening a new file try and append the data</p></li>
<li><p><em>info</em> [default=None] a string added to the results as an extra column, useful with <cite>appendfile</cite></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeFVAtoCSV">
<span class="sig-name descname"><span class="pre">writeFVAtoCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fvadata</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">names</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbaObj</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes the resuls of a FluxVariabilityAnalysis method and writes it to a nice
csv file. Note this method replaces the glpk/cplx_WriteFVAtoCSV methods.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fvadata</em> FluxVariabilityAnalysis() OUTPUT_ARRAY</p></li>
<li><p><em>names</em> FluxVariabilityAnalysis() OUTPUT_NAMES</p></li>
<li><p><em>fname</em> filename_base for the CSV output</p></li>
<li><p><em>Dir</em> [default=None] if set the output directory for the csv files</p></li>
<li><p><em>fbaObj</em> [default=None] if supplied adds extra model information into the output tables</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeMinDistanceLPwithCost">
<span class="sig-name descname"><span class="pre">writeMinDistanceLPwithCost</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbas</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ignoreDistance</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">[]</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constraint_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'strict'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>For backwards compatability only</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelHFormatFBA">
<span class="sig-name descname"><span class="pre">writeModelHFormatFBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullLP</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write an FBA-LP in polynomial H-Format file. This version has been replaced by <cite>writeModelHFormatFBA2()</cite>
but is kept for backwards compatability.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a PySCeS-CBM FBA object</p></li>
<li><p><em>Work_dir</em> [default=None] the output directory</p></li>
<li><p><em>use_rational</em> [default=false] use rational numbers in output (requires sympy)</p></li>
<li><p><em>fullLP</em> [default=True] include the default objective function as a maximization target</p></li>
<li><p><em>format</em> [default=’%s’] the number format string</p></li>
<li><p><em>infinity_replace</em> [default=None] if defined this is the abs(value) of +-&lt;infinity&gt;</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelHFormatFBA2">
<span class="sig-name descname"><span class="pre">writeModelHFormatFBA2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullLP</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write an FBA-LP in polynomial H-Format file. This is an improved version of <cite>WriteModelHFormatFBA()</cite>
which it replaces. Note that if a SymPy matrix is used as input then use_rational is automatically enabled.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a PySCeS-CBM FBA object</p></li>
<li><p><em>fname</em> [default=None] the output filename, fba.getId() if not defined</p></li>
<li><p><em>Work_dir</em> [default=None] the output directory</p></li>
<li><p><em>use_rational</em> [default=false] use rational numbers in output (requires sympy)</p></li>
<li><p><em>fullLP</em> [default=True] include the default objective function as a maximization target</p></li>
<li><p><em>format</em> [default=’%s’] the number format string</p></li>
<li><p><em>infinity_replace</em> [default=None] if defined this is the abs(value) of +-&lt;infinity&gt;</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelInfoToFile">
<span class="sig-name descname"><span class="pre">writeModelInfoToFile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">separator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">only_exchange</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">met_type</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function writes a CBModel to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instance of an PySCeSCBM model</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>Dir</em> [default=None] use directory if not None</p></li>
<li><p><em>separator</em> [default=’,’] the column separator</p></li>
<li><p><em>only_exchange</em> [default=False] only output fluxes labelled as exchange reactions</p></li>
<li><p><em>type</em> [default=’all’] only output certain type of species: ‘all’,’boundary’ or ‘variable’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelLP">
<span class="sig-name descname"><span class="pre">writeModelLP</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">multisymb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'</span> <span class="pre">'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constraint_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes an FBA object as an LP in CPLEX LP format</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated FBAmodel instance</p></li>
<li><p><em>work_dir</em> directory designated for output</p></li>
<li><p><em>fname</em> the file name [default=fba.getId()]</p></li>
<li><p><em>multisymb</em> the multiplication symbol (default: &lt;space&gt;)</p></li>
<li><p><em>format</em> the number format of the output</p></li>
<li><p><em>use_rational</em> output rational numbers [default=False]</p></li>
<li><p><em>quiet</em> [default=False] supress information messages</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelLPOld">
<span class="sig-name descname"><span class="pre">writeModelLPOld</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">multisymb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'</span> <span class="pre">'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lpt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">constraint_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'strict'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes a fba as an LP/LPT</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated FBAmodel instance</p></li>
<li><p><em>work_dir</em> directory designated for output</p></li>
<li><p><em>multisymb</em> the multiplication symbol (default: &lt;space&gt;)</p></li>
<li><p><em>lpt</em> the file format (default: True for lpt) or False for lp</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelRaw">
<span class="sig-name descname"><span class="pre">writeModelRaw</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes a fba (actually just dumps it) to a text file.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated FBAmodel instance</p></li>
<li><p><em>work_dir</em> directory designated for output</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelToCOMBINEarchive">
<span class="sig-name descname"><span class="pre">writeModelToCOMBINEarchive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbmlname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">withExcel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">vc_given</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'CBMPy'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">vc_family</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'Software'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">vc_email</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'None'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">vc_org</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'cbmpy.sourceforge.net'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write a model in SBML and Excel format to a COMBINE archive using the following information:</p>
<ul class="simple">
<li><p><em>mod</em> a model object</p></li>
<li><p><em>fname</em> the output base filename, archive will be &lt;fname&gt;.zip</p></li>
<li><p><em>directory</em> [default=None] created the combine archive ‘directory’</p></li>
<li><p><em>sbmlname</em> [default=’None’] If <em>sbmlname</em> is defined then SBML file is &lt;sbmlname&gt;.xml otherwise sbml will be &lt;fname&gt;.xml.</p></li>
<li><p><em>withExcel</em> [default=True] include a human readable Excel spreadsheet version of the model</p></li>
<li><p><em>vc_given</em> [default=’CBMPy’] first name</p></li>
<li><p><em>vc_family</em> [default=’Software’] family name</p></li>
<li><p><em>vc_email</em> [default=’None’] email</p></li>
<li><p><em>vc_org</em> [default=’None’] organisation</p></li>
<li><p><em>add_cbmpy_annot</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_annot</em> [default=True] add COBRA &lt;notes&gt; annotation</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeModelToExcel97">
<span class="sig-name descname"><span class="pre">writeModelToExcel97</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">roundoff</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">6</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Exports the model as an Excel 97 spreadsheet</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a CBMPy model instance</p></li>
<li><p><em>filename</em> the filename of the workbook</p></li>
<li><p><em>roundoff</em> [default=6] the number of digits to round off to</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeOptimalSolution">
<span class="sig-name descname"><span class="pre">writeOptimalSolution</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">separator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">only_exchange</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function writes the optimal solution to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instance of an PySCeSCBM model</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>Dir</em> [default=None] use current directory if not None</p></li>
<li><p><em>separator</em> [default=’,’] the column separator</p></li>
<li><p><em>only_exchange</em> [default=False] only output fluxes labelled as exchange reactions</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeProteinCostToCSV">
<span class="sig-name descname"><span class="pre">writeProteinCostToCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes the protein costs ‘CBM_PEPTIDE_COST’ annotation toa csv file.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instantiated FBA object</p></li>
<li><p><em>fname</em> the exported file name</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeReactionInfoToFile">
<span class="sig-name descname"><span class="pre">writeReactionInfoToFile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">separator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">only_exchange</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function writes a CBModel to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instance of an PySCeSCBM model</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>Dir</em> [default=None] use directory if not None</p></li>
<li><p><em>separator</em> [default=’,’] the column separator</p></li>
<li><p><em>only_exchange</em> [default=False] only output fluxes labelled as exchange reactions</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSBML2FBA">
<span class="sig-name descname"><span class="pre">writeSBML2FBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbml_level_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L2 with FBA annotations.
Note if you want to write BiGG/FAME style annotations then you must use <em>sbml_level_version=(2,1)</em></p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>sbml_level_version</em> [default=None] a tuple containing the SBML level and version e.g. (2,1)</p></li>
</ul>
</div></blockquote>
<p>This is a utility wrapper for the function <cite>CBXML.sbml_writeSBML2FBA</cite></p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSBML3FBC">
<span class="sig-name descname"><span class="pre">writeSBML3FBC</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gpr_from_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_groups</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xoptions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{'compress_bounds':</span> <span class="pre">True,</span> <span class="pre">'fbc_version':</span> <span class="pre">1,</span> <span class="pre">'validate':</span> <span class="pre">False}</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L3 FBC:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
<li><p><em>gpr_from_annot</em> [default=True] if enabled will attempt to add the gene protein associations from the annotations
if no gene protein association objects exist</p></li>
<li><p><em>add_groups</em> [default=True] add SBML3 groups (if supported by libSBML)</p></li>
<li><p><em>add_cbmpy_annot</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_annot</em> [default=True] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>xoptions</em> extended options</p>
<ul>
<li><p><em>fbc_version</em> [default=1] write SBML3FBC using version 1 (2013) or version 2 (2015)</p></li>
<li><p><em>validate</em> [default=False] validate the output SBML file</p></li>
<li><p><em>compress_bounds</em> [default=False] try compress output flux bound parameters</p></li>
<li><p><em>zip_model</em> [default=False] compress the model using PKZIP encoding</p></li>
<li><p><em>return_model_string</em> [default=False] return the SBML XML file as a string</p></li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSBML3FBCV2">
<span class="sig-name descname"><span class="pre">writeSBML3FBCV2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gpr_from_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_groups</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">validate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compress_bounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">zip_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_model_string</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L3 FBCv2 :</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
<li><p><em>gpr_from_annot</em> [default=False] if enabled will attempt to add the gene protein associations from the annotations</p></li>
<li><p><em>add_groups</em> [default=True] add SBML3 groups (if supported by libSBML)</p></li>
<li><p><em>add_cbmpy_annot</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_annot</em> [default=False] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>validate</em> [default=False] validate the output SBML file</p></li>
<li><p><em>compress_bounds</em> [default=True] try compress output flux bound parameters</p></li>
<li><p><em>zip_model</em> [default=False] compress the model using ZIP encoding</p></li>
<li><p><em>return_model_string</em> [default=False] return the SBML XML file as a string</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSBML3FBCV3">
<span class="sig-name descname"><span class="pre">writeSBML3FBCV3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gpr_from_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_groups</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">validate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compress_bounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">zip_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_model_string</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L3 FBCv3 :</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
<li><p><em>gpr_from_annot</em> [default=False] if enabled will attempt to add the gene protein associations from the annotations</p></li>
<li><p><em>add_groups</em> [default=True] add SBML3 groups (if supported by libSBML)</p></li>
<li><p><em>add_cbmpy_annot</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_annot</em> [default=False] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>validate</em> [default=False] validate the output SBML file</p></li>
<li><p><em>compress_bounds</em> [default=True] try compress output flux bound parameters</p></li>
<li><p><em>zip_model</em> [default=False] compress the model using ZIP encoding</p></li>
<li><p><em>return_model_string</em> [default=False] return the SBML XML file as a string</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSensitivitiesToCSV">
<span class="sig-name descname"><span class="pre">writeSensitivitiesToCSV</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sensitivities</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write out a sensitivity report using the objective sensitivities and
bound sensitivity dictionaries created by e.g. cplx_getSensitivities().</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sensitivity</em> tuple containing</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p><em>obj_sens</em> dictionary of objective coefficient sensitivities (per flux)</p></li>
<li><p><em>rhs_sens</em> dictionary of constraint rhs sensitivities (per constraint)</p></li>
<li><p><em>bound_sens</em> dictionary of bound sensitivities (per flux)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p><em>fname</em> output filename e.g. fname.csv</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSolutions">
<span class="sig-name descname"><span class="pre">writeSolutions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sols</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">[]</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">extra_output</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write 2 or more solutions where a solution is a dictionary of flux:value pairs:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> the export filename</p></li>
<li><p><em>sols</em> a list of dictionaries containing flux:value pairs (e.g. output by cmod.getReactionValues())</p></li>
<li><p><em>sep</em> [default=’,’] the column separator</p></li>
<li><p><em>extra_output</em> [default=None] add detailed information to output e.g. reaction names by giving a CBModel object as an argument to <em>extra_output</em>.</p></li>
<li><p><em>fba</em> an fba model that canbe used for extra_output</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeSpeciesInfoToFile">
<span class="sig-name descname"><span class="pre">writeSpeciesInfoToFile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">separator</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">','</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">met_type</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'all'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This function writes a CBModel to file</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an instance of an PySCeSCBM model</p></li>
<li><p><em>fname</em> the output filename</p></li>
<li><p><em>Dir</em> [default=None] use directory if not None</p></li>
<li><p><em>separator</em> [default=’,’] the column separator</p></li>
<li><p><em>met_type</em> [default=’all’] only output certain type of species: ‘all’,’boundary’ or ‘variable’</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBWrite.writeStoichiometricMatrix">
<span class="sig-name descname"><span class="pre">writeStoichiometricMatrix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use_rational</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullLP</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'%s'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">infinity_replace</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Write an FBA-LP in polynomial H-Format file. This is an improved version of <cite>WriteModelHFormatFBA()</cite>
which it replaces but is kept for backwards compatability.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a PySCeS-CBM FBA object</p></li>
<li><p><em>fname</em> [default=None] the output filename, fba.getId() if not defined</p></li>
<li><p><em>Work_dir</em> [default=None] the output directory</p></li>
<li><p><em>use_rational</em> [default=false] use rational numbers in output (requires sympy)</p></li>
<li><p><em>fullLP</em> [default=True] include the default objective function as a maximization target</p></li>
<li><p><em>format</em> [default=’%s’] the number format string</p></li>
<li><p><em>infinity_replace</em> [default=None] if defined this is the abs(value) of +-&lt;infinity&gt;</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy.CBWx"></span><section id="cbmpy-cbwx-module">
<h2>CBMPy: CBWx module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBWx.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.CBXML"></span><section id="cbmpy-cbxml-module">
<h2>CBMPy: CBXML module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: CBXML.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<dl class="py class">
<dt class="sig sig-object py" id="cbmpy.CBXML.MLStripper">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">MLStripper</span></span></dt>
<dd><p>Class for stripping a string of HTML/XML used from:
<a class="reference external" href="http://stackoverflow.com/questions/753052/strip-html-from-strings-in-python">http://stackoverflow.com/questions/753052/strip-html-from-strings-in-python</a></p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cbmpy.CBXML.SBML_NS">
<span class="sig-name descname"><span class="pre">SBML_NS</span></span><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">[('http://www.sbml.org/sbml/level3/version1/fbc/version3',</span> <span class="pre">'L3V1FBC3'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version1/fbc/version2',</span> <span class="pre">'L3V1FBC2'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version1/fbc/version1',</span> <span class="pre">'L3V1FBC1'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version2/fbc/version2',</span> <span class="pre">'L3V2FBC2'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version2/fbc/version1',</span> <span class="pre">'L3V2FBC1'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version2/core',</span> <span class="pre">'L3V2core'),</span> <span class="pre">('http://www.sbml.org/sbml/level3/version1/core',</span> <span class="pre">'L3V1core'),</span> <span class="pre">('http://www.sbml.org/sbml/level2/version4',</span> <span class="pre">'L2'),</span> <span class="pre">('http://www.sbml.org/sbml/level2',</span> <span class="pre">'L2')]</span></em></dt>
<dd><p>print libsbml.BQB_ENCODES            , 8  # “encodes”,
print libsbml.BQB_HAS_PART           , 1  # “hasPart”,
print libsbml.BQB_HAS_PROPERTY       , 10 # “hasProperty”,
print libsbml.BQB_HAS_VERSION        , 4  # “hasVersion”,
print libsbml.BQB_IS                 , 0  # “isA”,
print libsbml.BQB_IS_DESCRIBED_BY    , 6  # “isDescribedBy”,
print libsbml.BQB_IS_ENCODED_BY      , 7  # “isEncodedBy”,
print libsbml.BQB_IS_HOMOLOG_TO      , 5  # “isHomologTo”,
print libsbml.BQB_IS_PART_OF         , 2  # “isPartOf”,
print libsbml.BQB_IS_PROPERTY_OF     , 11 # “isPropertyOf”,
print libsbml.BQB_IS_VERSION_OF      , 3  # “isVersionOf”,
print libsbml.BQB_OCCURS_IN          , 9  # “occursIn”,
print libsbml.BQB_UNKNOWN            , 12 # None</p>
<p>print libsbml.BQM_IS                 , 0 # None
print libsbml.BQM_IS_DERIVED_FROM    , 2 # None
print libsbml.BQM_IS_DESCRIBED_BY    , 1 # None
print libsbml.BQM_UNKNOWN            , 3 # None</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_convertCOBRASBMLtoFBC">
<span class="sig-name descname"><span class="pre">sbml_convertCOBRASBMLtoFBC</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">outname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in a COBRA SBML Level 2 file and return the name of the created SBML Level 3 with FBC
file that is created in the output directory</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>outname</em> the name of the output file. If not specified then &lt;filename&gt;.l3fbc.xml is used as default</p></li>
<li><p><em>work_dir</em> [default=None] is the working directory</p></li>
<li><p><em>output_dir</em> [default=None] is the output directory (default is work_dir)</p></li>
</ul>
</div></blockquote>
<p>This method is based on code from libSBML (<a class="reference external" href="http://sbml.org">http://sbml.org</a>) in the file “convertCobra.py”
written by Frank T. Bergmann.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_convertSBML3FBCToCOBRA">
<span class="sig-name descname"><span class="pre">sbml_convertSBML3FBCToCOBRA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">outname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in a SBML Level 3 file and return the name of the created COBRA
file that is created in the output directory</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>outname</em> the name of the output file. If not specified then &lt;filename&gt;.cobra.xml is used as default</p></li>
<li><p><em>work_dir</em> [default=None] is the working directory</p></li>
<li><p><em>output_dir</em> [default=None] is the output directory (default is work_dir)</p></li>
</ul>
</div></blockquote>
<p>This method is based on code from libSBML (<a class="reference external" href="http://sbml.org">http://sbml.org</a>) in the file “convertFbcToCobra.py”
written by Frank T. Bergmann.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_createAssociationFromAST">
<span class="sig-name descname"><span class="pre">sbml_createAssociationFromAST</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">node</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a GPR string ‘((g1 and g2) or g3)’ to an association via a Python AST.
In future I will get rid of all the string elements and work only with associations
and AST’s.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>node</em> a Python AST note (e.g. body)</p></li>
<li><p><em>out</em> a new shiny FBC V2 GeneProductAssociation</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_createAssociationFromTreeV2">
<span class="sig-name descname"><span class="pre">sbml_createAssociationFromTreeV2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tree</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a GPR tree to an association</p>
<blockquote>
<div><ul class="simple">
<li><p><em>tree</em> a GPR dict tree</p></li>
<li><p><em>out</em> a new shiny FBC V2 GeneProductAssociation</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_createModelL2">
<span class="sig-name descname"><span class="pre">sbml_createModelL2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">level</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create an SBML model and document:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
<li><p><em>level</em> always 2</p></li>
<li><p><em>version</em> always 1</p></li>
</ul>
</div></blockquote>
<p>and returns:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> an SBML model</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_exportSBML2FBAModel">
<span class="sig-name descname"><span class="pre">sbml_exportSBML2FBAModel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_doc</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">remove_note_body</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes an SBML model object to file. Note this is an internal SBML method use <cite>sbml_writeSBML2FBA()</cite> to write an FBA model:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> a libSBML model instance</p></li>
<li><p><em>filename</em> the output filename</p></li>
<li><p><em>directory</em> [default=None] by default use filename otherwise join, &lt;dir&gt;&lt;filename&gt;</p></li>
<li><p><em>return_doc</em> [default=False] return the SBML document used to write the XML</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_fileFindVersion">
<span class="sig-name descname"><span class="pre">sbml_fileFindVersion</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Try and find the SBML version and FBC support</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> the SBML file</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_fileValidate">
<span class="sig-name descname"><span class="pre">sbml_fileValidate</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">level</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'normal'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Validate an SBML file and model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>f</em> the SBML file</p></li>
<li><p><em>level</em> [default=’normal’] the level of validation “normal” or “full”</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_getCVterms">
<span class="sig-name descname"><span class="pre">sbml_getCVterms</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get the MIRIAM compliant CV terms and return a MIRIAMAnnotation or None</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sb</em> a libSBML SBase derived object</p></li>
<li><p><em>model</em> is this a BQmodel term</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_getGPRasDictFBCv1">
<span class="sig-name descname"><span class="pre">sbml_getGPRasDictFBCv1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">node</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Converts a GPR string ‘((g1 and g2) or g3)’ to a gprDict which is returned</p>
<blockquote>
<div><ul class="simple">
<li><p><em>node</em> a Python AST note (e.g. <cite>ast.parse(gprstring).body[0]</cite>)</p></li>
<li><p><em>out</em> a new dictionary that will be be created in place</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_getGPRasDictFBCv2">
<span class="sig-name descname"><span class="pre">sbml_getGPRasDictFBCv2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">association</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cntr</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Walk through an SBML L3FBCV2 gene protein association and return a dictionary/tree representation</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_getGeneRefs">
<span class="sig-name descname"><span class="pre">sbml_getGeneRefs</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">association</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Walk through a gene association and extract GeneRefs inspired by Frank</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_getNotes">
<span class="sig-name descname"><span class="pre">sbml_getNotes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Returns the SBML objects notes</p>
<ul class="simple">
<li><p><em>obj</em> an SBML object</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readCOBRANote">
<span class="sig-name descname"><span class="pre">sbml_readCOBRANote</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Parses a COBRA style note from a XML string</p>
<blockquote>
<div><ul class="simple">
<li><p><em>s</em> an XML string</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readCOBRASBML">
<span class="sig-name descname"><span class="pre">sbml_readCOBRASBML</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">delete_intermediate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fake_boundary_species_search</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">speciesAnnotationFix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skip_genes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in a COBRA format SBML Level 2 file with FBA annotation where and return either a CBM model object
or a (cbm_mod, sbml_mod) pair if return_sbml_model=True</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory</p></li>
<li><p><em>return_sbml_model</em> [default=False] return a a (cbm_mod, sbml_mod) pair</p></li>
<li><p><em>delete_intermediate</em> [default=False] delete the intermediate SBML Level 3 FBC file</p></li>
<li><p><em>fake_boundary_species_search</em> [default=False] after looking for the boundary_condition of a species search for overloaded id’s &lt;id&gt;_b</p></li>
<li><p><em>output_dir</em> [default=None] the directory to output the intermediate SBML L3 files (if generated) default to input directory</p></li>
<li><p><em>speciesAnnotationFix</em> [default=True]</p></li>
<li><p><em>skip_genes</em> [default=False] convert GPR associations</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readFBCv3KeyValuePairs">
<span class="sig-name descname"><span class="pre">sbml_readFBCv3KeyValuePairs</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbcp</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reads FBCv3 KeyValue pair annotation and returns a dictionary of key:value pairs</p>
<ul class="simple">
<li><p><em>fbcp</em> an FBC plugin</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readKeyValueDataAnnotation">
<span class="sig-name descname"><span class="pre">sbml_readKeyValueDataAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">annotations</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reads KeyValueData annotation (<a class="reference external" href="http://pysces.sourceforge.net/KeyValueData">http://pysces.sourceforge.net/KeyValueData</a>) and returns a dictionary of key:value pairs</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readSBML2FBA">
<span class="sig-name descname"><span class="pre">sbml_readSBML2FBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fake_boundary_species_search</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in an SBML Level 2 file with FBA annotation where and return either a CBM model object
or a (cbm_mod, sbml_mod) pair if return_sbml_model=True</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory (only used if not None)</p></li>
<li><p><em>return_sbml_model</em> [default=False] return a a (cbm_mod, sbml_mod) pair</p></li>
<li><p><em>fake_boundary_species_search</em> [default=False] after looking for the boundary_condition of a species search for overloaded id’s &lt;id&gt;_b</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_readSBML3FBC">
<span class="sig-name descname"><span class="pre">sbml_readSBML3FBC</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">work_dir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_sbml_model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xoptions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{}</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Read in an SBML Level 3 file with FBC annotation where and return either a CBM model object
or a (cbm_mod, sbml_mod) pair if return_sbml_model=True</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fname</em> is the filename</p></li>
<li><p><em>work_dir</em> is the working directory</p></li>
<li><p><em>return_sbml_model</em> [default=False] return a a (cbm_mod, sbml_mod) pair</p></li>
<li><p><em>xoptions</em> special load options enable with option = True</p>
<ul>
<li><p><em>nogenes</em> do not load/process genes</p></li>
<li><p><em>noannot</em> do not load/process any annotations</p></li>
<li><p><em>validate</em> validate model and display errors and warnings before loading</p></li>
<li><p><em>readcobra</em> read the cobra annotation</p></li>
<li><p><em>read_model_string</em> [default=False] read the model from a string (instead of a filename) containing an SBML document</p></li>
<li><p><em>nmatrix_type</em> [default=’normal’] define the type of stoichiometrich matrix to be built</p></li>
<li><p><em>model_extension_class</em> extend CBModel class with new class (experimental, Python 3 only)</p></li>
<li><p><em>model_metaclass</em> add a custom metaclass to CBModel (experimental, Python 3 only)</p>
<ul>
<li><p>‘numpy’ dense numpy array (best performance)</p></li>
<li><p>‘scipy_csr’ scipy sparse matrix (lower performance, low memory)</p></li>
<li><p>‘sympy’ a sympy rational matrix (low performance, high memory, cast to dense to analyse)</p></li>
<li><p>None do not build matrix</p></li>
</ul>
</li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setAnnotationsL3Fbc">
<span class="sig-name descname"><span class="pre">sbml_setAnnotationsL3Fbc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cbmo</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbmlo</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add CBMPy Fbase annotations to an SBML object, MIRIAM, SBO, Notes. Should
be called last when creating SBML objects.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>cbmo</em> the CBMPy object</p></li>
<li><p><em>sbmlo</em> SBML object</p></li>
</ul>
<p>Note: this function should be used for new code, old code still needs to be
refactored.</p>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setCVterms">
<span class="sig-name descname"><span class="pre">sbml_setCVterms</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">uridict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add MIRIAM compliant CV terms to a sbml object from a CBM object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sb</em> a libSBML SBase derived object</p></li>
<li><p><em>uridict</em> a dictionary of uri’s as produced by getAllMIRIAMUris()</p></li>
<li><p><em>model</em> is this a BQmodel term [deprecated attribute, ignored and autodetected]</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setCompartmentsL3">
<span class="sig-name descname"><span class="pre">sbml_setCompartmentsL3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the model compartments.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> a libSBML model instance</p></li>
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setDescription">
<span class="sig-name descname"><span class="pre">sbml_setDescription</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Sets the model description as a &lt;note&gt; containing <cite>txt</cite> in an HTML paragraph on the model object.</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> a libSBML model instance</p></li>
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setFBCv3KeyValuePairs">
<span class="sig-name descname"><span class="pre">sbml_setFBCv3KeyValuePairs</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbcp</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">kv_pairs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds key value pairs to any FBCv3 SBase derived object</p>
<ul class="simple">
<li><p><em>fbcp</em> an FBCv3 plugin</p></li>
<li><p><em>kv_pairs</em> a dictionary of CBMPy Key Value pairs (format will be upgraded over next few versions)</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setGroupsL3">
<span class="sig-name descname"><span class="pre">sbml_setGroupsL3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cs</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>add groups to the SBML model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>cs</em> a CBMLtoSBML instance</p></li>
<li><p><em>fba</em> a CBMPy model instance</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setNotes3">
<span class="sig-name descname"><span class="pre">sbml_setNotes3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">s</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Formats the CBMPy notes as an SBML note and adds it to the SBMl object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>obj</em> an SBML object</p></li>
<li><p><em>s</em> a string that should be added as a note</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setParametersL3Fbc">
<span class="sig-name descname"><span class="pre">sbml_setParametersL3Fbc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbcmod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_anno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbc_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add non fluxbound related parameters to the model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fbcmod</em> a CBM2SBML instance</p></li>
<li><p><em>add_cbmpy_anno</em> [default=True] add CBMPy KeyValueData annotation.</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setReactionsL2">
<span class="sig-name descname"><span class="pre">sbml_setReactionsL2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_dict</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add the FBA instance reactions to the SBML model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> an SBML model instance</p></li>
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
<li><p><em>return_dict</em> [default=False] if True do not add reactions to SBML document instead return a dictionary description of the reactions</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setReactionsL3Fbc">
<span class="sig-name descname"><span class="pre">sbml_setReactionsL3Fbc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fbcmod</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_dict</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_anno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_anno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbc_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add the FBA instance reactions to the SBML model</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fbcmod</em> a CBM2SBML instance</p></li>
<li><p><em>return_dict</em> [default=False] if True do not add reactions to SBML document instead return a dictionary description of the reactions</p></li>
<li><p><em>add_cbmpy_anno</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_anno</em> [default=False] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>fbc_version</em> [default=2] writes either FBC v1 (2013) or v2 (2015) or v3 (2023)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setSpeciesL2">
<span class="sig-name descname"><span class="pre">sbml_setSpeciesL2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_dicts</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add the species definitions to the SBML object:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> [default=’’] a libSBML model instance or can be None if <em>return_dicts</em> == True</p></li>
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
<li><p><em>return_dicts</em> [default=False] only returns the compartment and species dictionaries without updated the SBML</p></li>
</ul>
</div></blockquote>
<p>returns:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>compartments</em> a dictionary of compartments (except when give <em>return_dicts</em> argument)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setSpeciesL3">
<span class="sig-name descname"><span class="pre">sbml_setSpeciesL3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_dicts</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_anno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_anno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">substance_units</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbc_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add the species definitions to the SBML object:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>model</em> and SBML model instance or can be None if <em>return_dicts</em> == True</p></li>
<li><p><em>fba</em> a PySCeSCBM model instance</p></li>
<li><p><em>return_dicts</em> [default=False] only returns the compartment and species dictionaries without updating the SBML</p></li>
<li><p><em>add_cbmpy_anno</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_anno</em> [default=False] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>substance_units</em> [default=True] defines the species in amounts rather than concentrations (necessary for default mmol/gdw.h)</p></li>
<li><p><em>fbc_version</em> [default=2] the FBC version to use</p></li>
</ul>
</div></blockquote>
<p>returns:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>compartments</em> a dictionary of compartments (except when given <em>return_dicts</em> argument)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setUnits">
<span class="sig-name descname"><span class="pre">sbml_setUnits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">units</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">give_default</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">L3</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds units to the model:</p>
<ul class="simple">
<li><p><em>model</em> a libSBML model instance</p></li>
<li><p><em>units</em> [default=None] a dictionary of units, if None default units are used</p></li>
<li><p><em>give_default</em> [default=False] if true method returns the default unit dictionary</p></li>
<li><p><em>L3</em> [default=True] use the L3 defaults</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_setValidationOptions">
<span class="sig-name descname"><span class="pre">sbml_setValidationOptions</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">D</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">level</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>set the validation level of an SBML document</p>
<blockquote>
<div><ul class="simple">
<li><p><em>D</em> an SBML document</p></li>
<li><p><em>level</em> the level of consistency check can be either one of:</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>‘normal’ basic id checking only</p></li>
<li><p>‘full’ all checks enabled</p></li>
<li><p>None disable all validation</p></li>
</ul>
</div></blockquote>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_validateDocument">
<span class="sig-name descname"><span class="pre">sbml_validateDocument</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">D</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fullmsg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">docread</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Validates and SBML document returns three dictionaries, errors, warnings, other and a boolean indicating an invalid document:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>D</em> and SBML document</p></li>
<li><p><em>fullmsg</em> [default=False] optionally display the full error message</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_writeAnnotationsAsCOBRANote">
<span class="sig-name descname"><span class="pre">sbml_writeAnnotationsAsCOBRANote</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">annotations</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes the annotations dictionary as a COBRA compatible SBML &lt;note&gt;</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_writeCOBRASBML">
<span class="sig-name descname"><span class="pre">sbml_writeCOBRASBML</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as a COBRA compatible :</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_writeKeyValueDataAnnotation">
<span class="sig-name descname"><span class="pre">sbml_writeKeyValueDataAnnotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">annotations</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Writes the key:value annotations as a KeyValueData annotation (http://pysces.sourceforge.net/KeyValueData)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_writeSBML2FBA">
<span class="sig-name descname"><span class="pre">sbml_writeSBML2FBA</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbml_level_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L3 FBA:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
<li><p><em>sbml_level_version</em> [default=None] a tuple containing the SBML level and version e.g. (2,4) (ignored)</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.sbml_writeSBML3FBC">
<span class="sig-name descname"><span class="pre">sbml_writeSBML3FBC</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">directory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sbml_level_version</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(3,</span> <span class="pre">1)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">autofix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">return_fbc</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gpr_from_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_groups</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cbmpy_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">add_cobra_annot</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xoptions</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{}</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and writes it to file as SBML L3 FBC:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> the model will be written as XML to <em>fname</em></p></li>
<li><p><em>directory</em> [default=None] if defined it is prepended to fname</p></li>
<li><p><em>sbml_level_version</em> [default=(3,1)] a tuple containing the SBML level and version e.g. (3,1)</p></li>
<li><p><em>autofix</em> convert &lt;&gt; to &lt;=&gt;=</p></li>
<li><p><em>return_fbc</em> return the FBC converter instance</p></li>
<li><p><em>gpr_from_annot</em> [default=False] if enabled will attempt to add the gene protein associations from the annotations
if no gene protein association objects exist</p></li>
<li><p><em>add_cbmpy_annot</em> [default=True] add CBMPy KeyValueData annotation. Replaces &lt;notes&gt;</p></li>
<li><p><em>add_cobra_annot</em> [default=True] add COBRA &lt;notes&gt; annotation</p></li>
<li><p><em>xoptions</em> extended options</p>
<ul>
<li><p><em>fbc_version</em> [default=2] write SBML3FBC using version 1 (2013) or version 2 (2015) oe version (2023)</p></li>
<li><p><em>validate</em> [default=False] validate the output SBML file</p></li>
<li><p><em>compress_bounds</em> [default=False] try compress output flux bound parameters</p></li>
<li><p><em>zip_model</em> [default=False] compress the model using ZIP encoding</p></li>
<li><p><em>return_model_string</em> [default=False] return the SBML XML file as a string</p></li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.setCBSBOterm">
<span class="sig-name descname"><span class="pre">setCBSBOterm</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sbo</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Given an SBOterm from libSBML, add it to a CBMPy object</p>
<blockquote>
<div><ul class="simple">
<li><p><em>sbo</em> the sbo term string</p></li>
<li><p><em>obj</em> the CBMPy Fbase derived object</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.with_metaclass">
<span class="sig-name descname"><span class="pre">with_metaclass</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">meta</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">bases</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a base class with a metaclass.
Usage is: NewClass(with_metaclass(MetaClass, BaseClass*)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_addSBML2FBAFluxBound">
<span class="sig-name descname"><span class="pre">xml_addSBML2FBAFluxBound</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operator</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fbid</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds an SBML3FBA flux bound to the document:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>document</em> a minidom XML document created by xml_createSBML2FBADoc</p></li>
<li><p><em>rid</em> the reaction id</p></li>
<li><p><em>operator</em> one of [‘greater’,’greaterEqual’,’less’,’lessEqual’,’equal’,’&gt;’,’&gt;=’,’&lt;’,’&lt;=’,’=’]</p></li>
<li><p><em>value</em> a float which will be cast to a string using str(value)</p></li>
<li><p><em>fbid</em> the flux bound id, autogenerated by default</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_addSBML2FBAObjective">
<span class="sig-name descname"><span class="pre">xml_addSBML2FBAObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">objective</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">active</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Adds an objective element to the documents listOfObjectives and sets the active attribute:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>document</em> a minidom XML document created by <cite>xml_createSBML2FBADoc</cite></p></li>
<li><p><em>objective</em> a minidom XML objective element created with <cite>xml_createSBML2FBAObjective</cite></p></li>
<li><p><em>active</em> [default=True] a boolean flag specifiying whether this objective is active</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_createListOfFluxObjectives">
<span class="sig-name descname"><span class="pre">xml_createListOfFluxObjectives</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">l</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a list of fluxObjectives to add to an Objective:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>document</em> a minidom XML document created by xml_createSBML2FBADoc</p></li>
<li><p><em>fluxobjs</em> a list of (rid, coefficient) tuples</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_createSBML2FBADoc">
<span class="sig-name descname"><span class="pre">xml_createSBML2FBADoc</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create a ‘document’ to store the SBML2FBA annotation, returns:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>DOC</em> a minidom document</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_createSBML2FBAObjective">
<span class="sig-name descname"><span class="pre">xml_createSBML2FBAObjective</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">oid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sense</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fluxObjectives</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Create a list of fluxObjectives to add to an Objective:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>document</em> a minidom XML document created by xml_createSBML2FBADoc</p></li>
<li><p><em>oid</em> the objective id</p></li>
<li><p><em>sense</em> a string containing the objective sense either: <strong>maximize</strong> or <strong>minimize</strong></p></li>
<li><p><em>fluxObjectives</em> a list of (rid, coefficient) tuples</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_getSBML2FBAannotation">
<span class="sig-name descname"><span class="pre">xml_getSBML2FBAannotation</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fba</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Takes an FBA model object and returns the SBML3FBA annotation as an XML string:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>fba</em> an fba model object</p></li>
<li><p><em>fname</em> [default=None] if supplied the XML will be written to file <em>fname</em></p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_stripTags">
<span class="sig-name descname"><span class="pre">xml_stripTags</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">html</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Strip a string of HTML/XML, returns a string</p>
<blockquote>
<div><ul class="simple">
<li><p><em>html</em> the string containing html</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cbmpy.CBXML.xml_viewSBML2FBAXML">
<span class="sig-name descname"><span class="pre">xml_viewSBML2FBAXML</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">document</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Print a minidom XML document to screen or file, arguments:</p>
<blockquote>
<div><ul class="simple">
<li><p><em>document</em> a minidom XML document</p></li>
<li><p><em>fname</em> [default=None] by default print to screen or write to file fname</p></li>
</ul>
</div></blockquote>
</dd></dl>

<span class="target" id="module-cbmpy._multicorefva"></span><section id="cbmpy-multicorefva-module">
<h2>CBMPy: MultiCoreFVA module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: _multicorefva.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy._multicoreenvfva"></span><section id="cbmpy-multicoreenvfva-module">
<h2>CBMPy: MultiCoreEnvFVA module</h2>
<p>PySCeS Constraint Based Modelling (<a class="reference external" href="http://cbmpy.sourceforge.net">http://cbmpy.sourceforge.net</a>)
Copyright (C) 2009-2024 Brett G. Olivier, VU University Amsterdam, Amsterdam, The Netherlands</p>
<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;</p>
<p>Author: Brett G. Olivier PhD
Contact developers: <a class="reference external" href="https://github.com/SystemsBioinformatics/cbmpy/issues">https://github.com/SystemsBioinformatics/cbmpy/issues</a>
Last edit: $Author: bgoli $ ($Id: _multicoreenvfva.py 710 2020-04-27 14:22:34Z bgoli $)</p>
</section>
<span class="target" id="module-cbmpy.miriamids"></span></section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>